---
title: Mapeando
date: '2023-05-06'
categories: 
  - Estadística
  - gis
  - R
  - 2023
execute: 
  message: false
  warning: false
  echo: true
format: 
  html: 
    fig-height: 5
    fig-dpi: 300
    fig-width: 8.88
    fig-align: center
    code-fold: show
    code-summary: "Mostrar / ocultar código"
knitr:
  opts_chunk:
    out.width: 80%
    fig.showtext: TRUE
    collapse: true
    comment: "#>"
editor_options:
  markdown:
    wrap: none
image: ""
---

Siempre me ha gustado el tema de los Sistemas de información geográfica y derivados. Ya cuando trabajaba en el [IESA](https://www.iesa.csic.es/) fui a un curso en Vigo sobre [gvSIG](http://www.gvsig.com/es) y luego aprendí cosas con [QGIS](https://www.qgis.org/es/site/) , el cual me sigue pareciendo un software más que excelente.

Hoy en día se pueden hacer muchísimas cosas con Python y con R, incluso tienen conectores con librerías de javascript para hacer cosas resultonas y con interactividad, veáse [esto](https://r-graph-gallery.com/map.html) por ejemplo. En realidad tanto python como R tiran de las mismas librerías de bajo nivel, a saber, `gdal`, `libproj`, `libgeos` y similares, las cuales, para ser honestos, pueden meterte en un infierno de dependencias en según qué sistemas unix. Eso sí, una vez sales de ahí es una gozada.

Total, el caso es que el pasado jueves me llega una duda del gran [Leonardo Hansa](https://leonardohansa.com/), que reproduzco a continuación.


>Vicepresi, tú sabes cómo se puede saber si dos códigos postales son adyancentes? Con datos, claro, no a ojo

Y bueno, como no tenía mucho más que hacer esa tarde y soy un picado de la vida, pues me dije. 

> Creo que tengo un shapefile de códigos postales de 2019 que no recuerdo como llegó a mis manos, quizá pueda hacer algo. 



Y me puse manos a la obra a investigar a ver cómo se podría hacer eso de encontrar polígonos adyacentes a uno dado usando `Rstats`. El caso es que llegué  a varios hilos dónde se comentaban diferentes formas, una era usando la función `poly2nb`  de la librería `spdep` y también cómo hacerlo usando la función `st_intersects` de la librería `sf` . En este [`issue`](https://github.com/r-spatial/sf/issues/234) incluso comentaban los grandes de estas cosas, Edzer Pebesma , Roger Bivand y nuestro conocico Virgilio Gómez Rubio. 


Bueno, vamos al código, que de eso se trata. 


```{r}
library(tidyverse)
library(sf)

mapa <- st_read(here::here("data/shapefiles/cod_postales/cp_19_dis.shp"))

head(mapa)

```

Pinto códigos postales de la provincia de Madrid por ejemplo, coloreando por área de cada polígono.

```{r}
mapa |>
    
    # calculo area usando st_area
    mutate(area_m2 = st_area(mapa) |> 
               as.numeric()) |>
    filter(cp_2 == 28) |>
    ggplot() +
    geom_sf(aes(fill = area_m2)) +
    scale_fill_viridis_c()
```

Para encontrar los polígonos adyacentes uso `st_intersects` que permite por ejemplo saber qué puntos están dentro de un polígono y cosas así. Al aplicarlo sobre una geometría de tipo polígono lo que encuentra son los polígonos adyacentes. 


```{r}
# mido a ver cuánto tarda. 
tictoc::tic()
lista_adyacentes <- st_intersects(mapa)
tictoc::toc()
```

Ahora si quisiera saber qué polígonos son adyacentes a uno dado, es simplemente seleccionar en lista adyacentes, por ejemplo 

```{r}
lista_adyacentes[1]
```

Para ver los adyacentes a mi código postal en Madrid. 

```{r}
(fila_mi_cp <-  mapa |> 
    rownames_to_column() |> 
    filter(cp == "28043") |> 
    pull(rowname))


(mis_vecinos_fila <- lista_adyacentes[as.numeric(fila_mi_cp)])


```
Pero me devuelve el número de fila, para ver el cp sería 

```{r}
mi_cp <-  "28043"
(mis_vecinos <- mapa$cp[mis_vecinos_fila[[1]]])

(adyacentes <-  setdiff(mis_vecinos, mi_cp))
```

Pintamos

```{r}
  mapa |> 
    filter(cp_2 == 28) |>
        mutate(
            tipo = case_when(
                cp == mi_cp ~ "mi_cp", 
                cp %in% adyacentes ~ "mis_copostales_vecinos", 
                TRUE ~ "resto de codpostales"
            )
        ) |> 
        ggplot() +
        geom_sf(aes(fill = tipo)) +
        scale_fill_viridis_d()
```

y listo.. 
Lo ponemos en unas funcioncitas todo 


```{r}
get_adyacentes <- function(mapa = mapa, id_col = "cp_num") {
  
  # quiza sacar el st_intersects de la función sea mejor
  nb <-  st_intersects(mapa)
  
  get_nb <-  function(x){
      res <- mapa[[id_col]][x]
      res
  }
  
  adjacency_list <-  lapply(nb, get_nb)
  adjacency_list_names <-  mapa[[id_col]][1:length(adjacency_list)]
  names(adjacency_list) <- adjacency_list_names
  adjacency_list
}




get_mis_vecinos <-  function(mi_cp, cps_adyacentes){
    cp_simbol <-  as.symbol(mi_cp) # a simbolo para poder llamara cps_adyacentes[[`18814`]]
    mis_vecinos <-  cps_adyacentes[[cp_simbol]]
}



# mapa seleccionando solo tu provincia 


plot_cp_vecinos <-  function(mi_cp, cps_adyacentes, mapa){
    cp_simbol <-  as.symbol(mi_cp)
    mis_vecinos <-  cps_adyacentes[[cp_simbol]]
    mi_prop <-  stringr::str_sub(mi_cp, 1, 2) |> as.numeric()
    adyacentes <-  setdiff(mis_vecinos, mi_cp)
    mapa |> 
        filter(cp_2_num == mi_prop) |> 
        mutate(
            tipo = case_when(
                cp_num == mi_cp ~ "mi_cp", 
                cp_num %in% adyacentes ~ "mis_copostales_vecinos", 
                TRUE ~ "resto de codpostales"
            )
        ) |> 
        ggplot() +
        geom_sf(aes(fill = tipo)) +
        scale_fill_viridis_d()
}
```



Y ya podemos usarlo

```{r}
cps_adyacentes <-  get_adyacentes(mapa, id_col = "cp_num")

(mis_cps_vecinos_pueblo <- get_mis_vecinos(18814, cps_adyacentes))
```


Pintamos 
```{r}

plot_cp_vecinos(18814, cps_adyacentes, mapa) +
    labs(title = "CP núcleo principal Cortes de Baza")

    
```


```{r}
# plaza cascorro

plot_cp_vecinos(28005, cps_adyacentes, mapa) +
    labs(title = "cp Plaza Cascorro")

```

```{r}
# Pongo Carmona por ser el de mayor área 

(get_mis_vecinos(41410, cps_adyacentes))

plot_cp_vecinos(41410, cps_adyacentes, mapa) +
    labs(title= "Carmona")


```
## Notas

* Los códigos postales que uso están desactualizados. La capa de shapefile es un producto que vende Correos a precio no barato. Antes se podían descargar de CartoCiudad, pero ya no. Algún enlace interesante: 
    * [post de Raúl Vaquerizo](https://analisisydecision.es/como-hacer-un-mapa-de-espana-por-codigos-postales-con-qgis/)
    * [post de nosolosig](https://www.nosolosig.com/articulos/1191-asi-hice-el-mapa-de-los-codigos-postales-de-espana-con-sig-y-datos-abiertos)
* Libros online sobre GIS en R:
    * [r-spatial](https://r-spatial.org/book/) 
    * [geocomputation with R](https://r.geocompx.org/index.html)
    
* [Applied Spatial Data Analysis with R](https://asdar-book.org/) . Un poco antiguo ya, no sé si Virgilio, Roger y Edzer están trabajando sobre nueva edición o no
    


