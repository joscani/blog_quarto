<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Muestrear no es pecado. rebranding</title>
<link>https://muestrear-no-es-pecado-rebranding.netlify.app/index.html</link>
<atom:link href="https://muestrear-no-es-pecado-rebranding.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
<description>Muestrear no es pecado. rebranding</description>
<generator>quarto-1.2.258</generator>
<lastBuildDate>Sat, 29 Oct 2022 22:00:00 GMT</lastBuildDate>
<item>
  <title>Api y docker con R. parte 2</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/30/api-y-docker-con-r-parte-2.html</link>
  <description><![CDATA[ 




<p>En la entrada de <a href="https://muestrear-no-es-pecado.netlify.app/2022/10/12/api-y-docker-con-r-parte-1/">api y docker con R parte I</a> veíamos que es muy fácil construir una api y dockerizarla para tener un modelo bayesiano en producción. Pero hay un pequeño incoveniente, el docker que hemos creado se base en <a href="https://rocker-project.org/images/">rocker/verse</a> que se basan en ubuntu. Y ubuntu ocupa mucho. Pero gracias a gente como Gabor Csardi (autor entre otras librerías de <code>igraph</code>), tenemos <a href="https://github.com/r-hub/r-minimal">r-hub/minimal</a>, que permiten tener una imagen de docker con R basadas en alpine, de hecho una imagen de docker con R y dplyr son unos 50 mb.</p>
<p>Lo primero de todo es ver cuánto ocupa el docker creado en el primer post.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">╰─</span> $ ▶ docker image ls mi_modelo_brms</span>
<span id="cb1-2"><span class="ex" style="color: null;">REPOSITORY</span>       TAG       IMAGE ID       CREATED       SIZE</span>
<span id="cb1-3"><span class="ex" style="color: null;">mi_modelo_brms</span>   latest    9e641ec2c150   3 weeks ago   3.42GB</span></code></pre></div>
<p>Pues son unos cuántos gigas, mayoritariamente al estar basado en ubuntu y al que los docker de rocker/verse instalan todo el software de R recomendado, los ficheros de ayuda, las capacidades gráficas, etc..</p>
<p>Pero con r-hub/minimal podemos dejar bastante limpio el tema. Leyendo el Readme del repo vemos que han configurado una utilidad a la que llaman <code>installr</code> que permite instalar librerías del sistema o de R, instalando los compiladores de C, fortran etc que haga falta y eliminarlos una vez están compiladas la librerías.</p>
<p>Sin más, cambiamos el Dockerfile del otro día por este otro .</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># Docker file para modelo brms</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="ex" style="color: null;">FROM</span> rhub/r-minimal:4.2.1</span>
<span id="cb2-5"></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-d</span> <span class="at" style="color: #657422;">-a</span> linux-headers ps</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-d</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"curl-dev linux-headers gfortran libcurl libxml2 libsodium-dev libsodium automake autoconf"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-d</span> Matrix MASS mgcv future codetools brms plumber tidybayes</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;">## Copio el modelo y el fichero de la api</span></span>
<span id="cb2-14"><span class="ex" style="color: null;">COPY</span> brms_model.rds /opt/ml/brms_model.rds</span>
<span id="cb2-15"><span class="ex" style="color: null;">COPY</span> plumber.R /opt/ml/plumber.R</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;"># exponemos el puerto</span></span>
<span id="cb2-18"><span class="ex" style="color: null;">EXPOSE</span> 8081</span>
<span id="cb2-19"><span class="ex" style="color: null;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;">"R"</span>, <span class="st" style="color: #20794D;">"-e"</span>, <span class="st" style="color: #20794D;">"pr &lt;- plumber::plumb('/opt/ml/plumber.R'); pr</span><span class="va" style="color: #111111;">$run</span><span class="st" style="color: #20794D;">(host = '0.0.0.0', port = 8081)"</span>]</span></code></pre></div>
<p>Y haciendo <code>docker build -t mi_modelo_brms_rminimal .</code> pasado un rato puesto que ha de compilar las librerías tenemos nuestra api dockerizada con la misma funcionalidad que el otro día.</p>
<p>Y con un tamaño mucho más contenido</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1">  <span class="ex" style="color: null;">╰─</span> $ ▶ docker image ls</span>
<span id="cb3-2"><span class="ex" style="color: null;">REPOSITORY</span>                    TAG                    IMAGE ID       CREATED         SIZE</span>
<span id="cb3-3"><span class="ex" style="color: null;">mi_modelo_brms_rminimal</span>       latest                 8d791d2ebc74   2 hours ago     665MB</span></code></pre></div>
<p>que se va a unos 655 mb, de los cuales unos 300 MB se deben a <code>stan</code> y <code>rstan</code>. Pero vamos, no está mal, pasar de 3.4 Gb a 665MB.</p>
<section id="actualización-usando-renv" class="level2">
<h2 class="anchored" data-anchor-id="actualización-usando-renv">Actualización, usando renv</h2>
<p>Por temas de buenas prácticas es recomendable usar <code>renv</code> para crear el archivo <code>renv.lock</code> dónde se guarda qué versión de las librerías estamos usando, y además porque usa por defecto un repo con las librerías compiladas.</p>
<p>Lo primero que hago es crearme un nuevo proyecto dónde pongo el modelo entrenado que queremos usar <code>brms_model.rds</code> que entrené en el primer post y el fichero <code>plumber.R</code> y ningún fichero más.</p>
<p>Fichero <strong>plumber.R</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># This is a Plumber API. In RStudio 1.2 or newer you can run the API by</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># clicking the 'Run API' button above.</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># In RStudio 1.1 or older, see the Plumber documentation for details</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># on running the API.</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># Find out more about building APIs with Plumber here:</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">#    https://www.rplumber.io/</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"># save as bos_rf_score.R</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="fu" style="color: #4758AB;">library</span>(brms)</span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;">library</span>(plumber)</span>
<span id="cb4-16"><span class="fu" style="color: #4758AB;">library</span>(tidybayes)</span>
<span id="cb4-17"></span>
<span id="cb4-18">brms_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>)</span>
<span id="cb4-19"></span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;">#* @apiTitle brms predict Api</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;">#* @apiDescription Endpoints for working with brms model</span></span>
<span id="cb4-23"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- filter-logger</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;">#* Log some information about the incoming request</span></span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;">#* @filter logger</span></span>
<span id="cb4-26"><span class="cf" style="color: #003B4F;">function</span>(req){</span>
<span id="cb4-27">    <span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">as.character</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>()), <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb4-28">        req<span class="sc" style="color: #5E5E5E;">$</span>REQUEST_METHOD, req<span class="sc" style="color: #5E5E5E;">$</span>PATH_INFO, <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb4-29">        req<span class="sc" style="color: #5E5E5E;">$</span>HTTP_USER_AGENT, <span class="st" style="color: #20794D;">"@"</span>, req<span class="sc" style="color: #5E5E5E;">$</span>REMOTE_ADDR, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb4-30">    <span class="fu" style="color: #4758AB;">forward</span>()</span>
<span id="cb4-31">}</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- post-data</span></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;">#* Submit data and get a prediction in return</span></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;">#* @post /predict</span></span>
<span id="cb4-36"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb4-37">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb4-38">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb4-39">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb4-40">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb4-41">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb4-42">    }</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="fu" style="color: #4758AB;">predict</span>(brms_model, data) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-45">        <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb4-46">}</span>
<span id="cb4-47"></span>
<span id="cb4-48"></span>
<span id="cb4-49"><span class="co" style="color: #5E5E5E;">#* @post /full_posterior</span></span>
<span id="cb4-50"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb4-51">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb4-52">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb4-53">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb4-54">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb4-55">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb4-56">    }</span>
<span id="cb4-57">    </span>
<span id="cb4-58">    <span class="fu" style="color: #4758AB;">add_epred_draws</span>(data, brms_model) </span>
<span id="cb4-59">    </span>
<span id="cb4-60">}</span></code></pre></div>
</div>
<p>A continuación activo <code>renv</code> en el proyecto</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"> renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">activate</span>()</span>
<span id="cb5-2"><span class="sc" style="color: #5E5E5E;">*</span> Project <span class="st" style="color: #20794D;">'~/Rstudio_projects/r-api-minimal'</span> loaded. [renv <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">16.0</span>]</span></code></pre></div>
</div>
<p>Una vez que está activado y el fichero plumber.R está creado en el directorio uso <code>hydrate</code> para que encuentre qué librerías se usan en el proyecto</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hydrate</span>()</span>
<span id="cb6-2"><span class="sc" style="color: #5E5E5E;">*</span> Discovering package dependencies ... Done<span class="sc" style="color: #5E5E5E;">!</span></span>
<span id="cb6-3"><span class="er" style="color: #AD0000;">*</span> Copying packages into the cache ... Done<span class="sc" style="color: #5E5E5E;">!</span></span></code></pre></div>
</div>
<p>y ya podemos crear el fichero <code>renv::snapshot()</code>, donde pone todas las librerías que se van a instalar y si vienen de CRAN , de GitHub o de RSPM(rstudio package manager)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">snapshot</span>()</span>
<span id="cb7-2">The following <span class="fu" style="color: #4758AB;">package</span>(s) will be updated <span class="cf" style="color: #003B4F;">in</span> the lockfile<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># CRAN ===============================</span></span>
<span id="cb7-5"><span class="sc" style="color: #5E5E5E;">-</span> Matrix           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.5</span><span class="dv" style="color: #AD0000;">-1</span>]</span>
<span id="cb7-6"><span class="sc" style="color: #5E5E5E;">-</span> R6               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">5.1</span>]</span>
<span id="cb7-7"><span class="sc" style="color: #5E5E5E;">-</span> RColorBrewer     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-8"><span class="sc" style="color: #5E5E5E;">-</span> Rcpp             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.9</span>]</span>
<span id="cb7-9"><span class="sc" style="color: #5E5E5E;">-</span> base64enc        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.1</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-10"><span class="sc" style="color: #5E5E5E;">-</span> bslib            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.0</span>]</span>
<span id="cb7-11"><span class="sc" style="color: #5E5E5E;">-</span> cachem           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.6</span>]</span>
<span id="cb7-12"><span class="sc" style="color: #5E5E5E;">-</span> codetools        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.2</span><span class="dv" style="color: #AD0000;">-18</span>]</span>
<span id="cb7-13"><span class="sc" style="color: #5E5E5E;">-</span> colorspace       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">2.0</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-14"><span class="sc" style="color: #5E5E5E;">-</span> ellipsis         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.2</span>]</span>
<span id="cb7-15"><span class="sc" style="color: #5E5E5E;">-</span> fansi            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-16"><span class="sc" style="color: #5E5E5E;">-</span> farver           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-17"><span class="sc" style="color: #5E5E5E;">-</span> fastmap          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb7-18"><span class="sc" style="color: #5E5E5E;">-</span> generics         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">1.3</span>]</span>
<span id="cb7-19"><span class="sc" style="color: #5E5E5E;">-</span> ggplot2          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">3.6</span>]</span>
<span id="cb7-20"><span class="sc" style="color: #5E5E5E;">-</span> htmltools        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">5.3</span>]</span>
<span id="cb7-21"><span class="sc" style="color: #5E5E5E;">-</span> jquerylib        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">1.4</span>]</span>
<span id="cb7-22"><span class="sc" style="color: #5E5E5E;">-</span> labeling         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-23"><span class="sc" style="color: #5E5E5E;">-</span> lattice          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.20</span><span class="dv" style="color: #AD0000;">-45</span>]</span>
<span id="cb7-24"><span class="sc" style="color: #5E5E5E;">-</span> lifecycle        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-25"><span class="sc" style="color: #5E5E5E;">-</span> magrittr         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-26"><span class="sc" style="color: #5E5E5E;">-</span> memoise          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.1</span>]</span>
<span id="cb7-27"><span class="sc" style="color: #5E5E5E;">-</span> mgcv             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.8</span><span class="dv" style="color: #AD0000;">-40</span>]</span>
<span id="cb7-28"><span class="sc" style="color: #5E5E5E;">-</span> mime             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.12</span>]</span>
<span id="cb7-29"><span class="sc" style="color: #5E5E5E;">-</span> munsell          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">5.0</span>]</span>
<span id="cb7-30"><span class="sc" style="color: #5E5E5E;">-</span> pkgconfig        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-31"><span class="sc" style="color: #5E5E5E;">-</span> prettyunits      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-32"><span class="sc" style="color: #5E5E5E;">-</span> processx         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">7.0</span>]</span>
<span id="cb7-33"><span class="sc" style="color: #5E5E5E;">-</span> ps               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">7.1</span>]</span>
<span id="cb7-34"><span class="sc" style="color: #5E5E5E;">-</span> rappdirs         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-35"><span class="sc" style="color: #5E5E5E;">-</span> rprojroot        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-36"><span class="sc" style="color: #5E5E5E;">-</span> sass             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-37"><span class="sc" style="color: #5E5E5E;">-</span> stringi          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">7.8</span>]</span>
<span id="cb7-38"><span class="sc" style="color: #5E5E5E;">-</span> tibble           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">1.8</span>]</span>
<span id="cb7-39"><span class="sc" style="color: #5E5E5E;">-</span> utf8             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.2</span>]</span>
<span id="cb7-40"><span class="sc" style="color: #5E5E5E;">-</span> withr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">5.0</span>]</span>
<span id="cb7-41"></span>
<span id="cb7-42"><span class="co" style="color: #5E5E5E;"># GitHub =============================</span></span>
<span id="cb7-43"><span class="sc" style="color: #5E5E5E;">-</span> glue             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> jimhester<span class="sc" style="color: #5E5E5E;">/</span>fstrings<span class="sc" style="color: #5E5E5E;">@</span>HEAD]</span>
<span id="cb7-44"></span>
<span id="cb7-45"><span class="co" style="color: #5E5E5E;"># RSPM ===============================</span></span>
<span id="cb7-46"><span class="sc" style="color: #5E5E5E;">-</span> BH               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">78.0</span><span class="dv" style="color: #AD0000;">-0</span>]</span>
<span id="cb7-47"><span class="sc" style="color: #5E5E5E;">-</span> Brobdingnag      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.2</span><span class="dv" style="color: #AD0000;">-9</span>]</span>
<span id="cb7-48"><span class="sc" style="color: #5E5E5E;">-</span> DT               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.26</span>]</span>
<span id="cb7-49"><span class="sc" style="color: #5E5E5E;">-</span> HDInterval       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">2.2</span>]</span>
<span id="cb7-50"><span class="sc" style="color: #5E5E5E;">-</span> MASS             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">7.3-58.1</span>]</span>
<span id="cb7-51"><span class="sc" style="color: #5E5E5E;">-</span> RcppEigen        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">3</span>.<span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">9.2</span>]</span>
<span id="cb7-52"><span class="sc" style="color: #5E5E5E;">-</span> RcppParallel     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">5</span>.<span class="fl" style="color: #AD0000;">1.5</span>]</span>
<span id="cb7-53"><span class="sc" style="color: #5E5E5E;">-</span> StanHeaders      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">21.0</span><span class="dv" style="color: #AD0000;">-7</span>]</span>
<span id="cb7-54"><span class="sc" style="color: #5E5E5E;">-</span> abind            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.4</span><span class="dv" style="color: #AD0000;">-5</span>]</span>
<span id="cb7-55"><span class="sc" style="color: #5E5E5E;">-</span> arrayhelpers     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-0</span>]</span>
<span id="cb7-56"><span class="sc" style="color: #5E5E5E;">-</span> backports        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-57"><span class="sc" style="color: #5E5E5E;">-</span> bayesplot        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">9.0</span>]</span>
<span id="cb7-58"><span class="sc" style="color: #5E5E5E;">-</span> bridgesampling   [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-2</span>]</span>
<span id="cb7-59"><span class="sc" style="color: #5E5E5E;">-</span> brms             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">18.0</span>]</span>
<span id="cb7-60"><span class="sc" style="color: #5E5E5E;">-</span> callr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">7.2</span>]</span>
<span id="cb7-61"><span class="sc" style="color: #5E5E5E;">-</span> checkmate        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb7-62"><span class="sc" style="color: #5E5E5E;">-</span> cli              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-63"><span class="sc" style="color: #5E5E5E;">-</span> coda             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.19</span><span class="dv" style="color: #AD0000;">-4</span>]</span>
<span id="cb7-64"><span class="sc" style="color: #5E5E5E;">-</span> colourpicker     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-65"><span class="sc" style="color: #5E5E5E;">-</span> commonmark       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.1</span>]</span>
<span id="cb7-66"><span class="sc" style="color: #5E5E5E;">-</span> cpp11            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.3</span>]</span>
<span id="cb7-67"><span class="sc" style="color: #5E5E5E;">-</span> crayon           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">5.2</span>]</span>
<span id="cb7-68"><span class="sc" style="color: #5E5E5E;">-</span> crosstalk        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-69"><span class="sc" style="color: #5E5E5E;">-</span> curl             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">4</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-70"><span class="sc" style="color: #5E5E5E;">-</span> desc             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-71"><span class="sc" style="color: #5E5E5E;">-</span> digest           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">6.30</span>]</span>
<span id="cb7-72"><span class="sc" style="color: #5E5E5E;">-</span> distributional   [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-73"><span class="sc" style="color: #5E5E5E;">-</span> dplyr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.10</span>]</span>
<span id="cb7-74"><span class="sc" style="color: #5E5E5E;">-</span> dygraphs         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.6</span>]</span>
<span id="cb7-75"><span class="sc" style="color: #5E5E5E;">-</span> fontawesome      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.0</span>]</span>
<span id="cb7-76"><span class="sc" style="color: #5E5E5E;">-</span> fs               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">5.2</span>]</span>
<span id="cb7-77"><span class="sc" style="color: #5E5E5E;">-</span> future           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">28.0</span>]</span>
<span id="cb7-78"><span class="sc" style="color: #5E5E5E;">-</span> ggdist           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-79"><span class="sc" style="color: #5E5E5E;">-</span> ggridges         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">5.4</span>]</span>
<span id="cb7-80"><span class="sc" style="color: #5E5E5E;">-</span> globals          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">16.1</span>]</span>
<span id="cb7-81"><span class="sc" style="color: #5E5E5E;">-</span> gridExtra        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">2.3</span>]</span>
<span id="cb7-82"><span class="sc" style="color: #5E5E5E;">-</span> gtable           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-83"><span class="sc" style="color: #5E5E5E;">-</span> gtools           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">9.3</span>]</span>
<span id="cb7-84"><span class="sc" style="color: #5E5E5E;">-</span> htmlwidgets      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">5.4</span>]</span>
<span id="cb7-85"><span class="sc" style="color: #5E5E5E;">-</span> httpuv           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">6.6</span>]</span>
<span id="cb7-86"><span class="sc" style="color: #5E5E5E;">-</span> igraph           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.5</span>]</span>
<span id="cb7-87"><span class="sc" style="color: #5E5E5E;">-</span> inline           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.19</span>]</span>
<span id="cb7-88"><span class="sc" style="color: #5E5E5E;">-</span> isoband          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">2.6</span>]</span>
<span id="cb7-89"><span class="sc" style="color: #5E5E5E;">-</span> jsonlite         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.2</span>]</span>
<span id="cb7-90"><span class="sc" style="color: #5E5E5E;">-</span> later            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.0</span>]</span>
<span id="cb7-91"><span class="sc" style="color: #5E5E5E;">-</span> lazyeval         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">2.2</span>]</span>
<span id="cb7-92"><span class="sc" style="color: #5E5E5E;">-</span> listenv          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">8.0</span>]</span>
<span id="cb7-93"><span class="sc" style="color: #5E5E5E;">-</span> loo              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">5.1</span>]</span>
<span id="cb7-94"><span class="sc" style="color: #5E5E5E;">-</span> markdown         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.2</span>]</span>
<span id="cb7-95"><span class="sc" style="color: #5E5E5E;">-</span> matrixStats      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">62.0</span>]</span>
<span id="cb7-96"><span class="sc" style="color: #5E5E5E;">-</span> miniUI           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-97"><span class="sc" style="color: #5E5E5E;">-</span> mvtnorm          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-98"><span class="sc" style="color: #5E5E5E;">-</span> nleqslv          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-99"><span class="sc" style="color: #5E5E5E;">-</span> nlme             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">3.1</span><span class="dv" style="color: #AD0000;">-160</span>]</span>
<span id="cb7-100"><span class="sc" style="color: #5E5E5E;">-</span> numDeriv         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">2016.8-1.1</span>]</span>
<span id="cb7-101"><span class="sc" style="color: #5E5E5E;">-</span> parallelly       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">32.1</span>]</span>
<span id="cb7-102"><span class="sc" style="color: #5E5E5E;">-</span> pillar           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.1</span>]</span>
<span id="cb7-103"><span class="sc" style="color: #5E5E5E;">-</span> pkgbuild         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-104"><span class="sc" style="color: #5E5E5E;">-</span> plumber          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-105"><span class="sc" style="color: #5E5E5E;">-</span> plyr             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.7</span>]</span>
<span id="cb7-106"><span class="sc" style="color: #5E5E5E;">-</span> posterior        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-107"><span class="sc" style="color: #5E5E5E;">-</span> promises         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.1</span>]</span>
<span id="cb7-108"><span class="sc" style="color: #5E5E5E;">-</span> purrr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.5</span>]</span>
<span id="cb7-109"><span class="sc" style="color: #5E5E5E;">-</span> renv             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">16.0</span>]</span>
<span id="cb7-110"><span class="sc" style="color: #5E5E5E;">-</span> reshape2         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.4</span>]</span>
<span id="cb7-111"><span class="sc" style="color: #5E5E5E;">-</span> rlang            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.6</span>]</span>
<span id="cb7-112"><span class="sc" style="color: #5E5E5E;">-</span> rstan            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">21.7</span>]</span>
<span id="cb7-113"><span class="sc" style="color: #5E5E5E;">-</span> rstantools       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-114"><span class="sc" style="color: #5E5E5E;">-</span> scales           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-115"><span class="sc" style="color: #5E5E5E;">-</span> shiny            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">7.2</span>]</span>
<span id="cb7-116"><span class="sc" style="color: #5E5E5E;">-</span> shinyjs          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb7-117"><span class="sc" style="color: #5E5E5E;">-</span> shinystan        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">6.0</span>]</span>
<span id="cb7-118"><span class="sc" style="color: #5E5E5E;">-</span> shinythemes      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-119"><span class="sc" style="color: #5E5E5E;">-</span> sodium           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-120"><span class="sc" style="color: #5E5E5E;">-</span> sourcetools      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">1.7</span>]</span>
<span id="cb7-121"><span class="sc" style="color: #5E5E5E;">-</span> stringr          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-122"><span class="sc" style="color: #5E5E5E;">-</span> svUnit           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.6</span>]</span>
<span id="cb7-123"><span class="sc" style="color: #5E5E5E;">-</span> swagger          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">33.1</span>]</span>
<span id="cb7-124"><span class="sc" style="color: #5E5E5E;">-</span> tensorA          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">36.2</span>]</span>
<span id="cb7-125"><span class="sc" style="color: #5E5E5E;">-</span> threejs          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-126"><span class="sc" style="color: #5E5E5E;">-</span> tidybayes        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">0.2</span>]</span>
<span id="cb7-127"><span class="sc" style="color: #5E5E5E;">-</span> tidyr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-128"><span class="sc" style="color: #5E5E5E;">-</span> tidyselect       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-129"><span class="sc" style="color: #5E5E5E;">-</span> vctrs            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-130"><span class="sc" style="color: #5E5E5E;">-</span> viridisLite      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-131"><span class="sc" style="color: #5E5E5E;">-</span> webutils         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-132"><span class="sc" style="color: #5E5E5E;">-</span> xfun             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.34</span>]</span>
<span id="cb7-133"><span class="sc" style="color: #5E5E5E;">-</span> xtable           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.8</span><span class="dv" style="color: #AD0000;">-4</span>]</span>
<span id="cb7-134"><span class="sc" style="color: #5E5E5E;">-</span> xts              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">12.2</span>]</span>
<span id="cb7-135"><span class="sc" style="color: #5E5E5E;">-</span> yaml             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">3.6</span>]</span>
<span id="cb7-136"><span class="sc" style="color: #5E5E5E;">-</span> zoo              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.8</span><span class="dv" style="color: #AD0000;">-11</span>]</span>
<span id="cb7-137"></span>
<span id="cb7-138">The version of R recorded <span class="cf" style="color: #003B4F;">in</span> the lockfile will be updated<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb7-139"><span class="sc" style="color: #5E5E5E;">-</span> R                [<span class="sc" style="color: #5E5E5E;">*</span>] <span class="ot" style="color: #003B4F;">-&gt;</span> [<span class="dv" style="color: #AD0000;">4</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-140"></span>
<span id="cb7-141">Do you want to proceed? [y<span class="sc" style="color: #5E5E5E;">/</span>N]<span class="sc" style="color: #5E5E5E;">:</span> y</span>
<span id="cb7-142"><span class="sc" style="color: #5E5E5E;">*</span> Lockfile written to <span class="st" style="color: #20794D;">'~/Rstudio_projects/r-api-minimal/renv.lock'</span>.</span></code></pre></div>
</div>
<p>Y ya sólo queda crear el Dockerfile usando como base r-hub/minimal</p>
<p><strong>Dockerfile</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Docker file para modelo brms</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="ex" style="color: null;">FROM</span> rhub/r-minimal:4.2.1</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;"># copio fichero de las librerías</span></span>
<span id="cb8-6"><span class="ex" style="color: null;">COPY</span> renv.lock renv.lock</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;"># uso -c para que se queden instaladas los compiladores de c y fortran</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-c</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"curl-dev linux-headers gfortran libcurl libxml2 libsodium-dev libsodium automake autoconf"</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;">#instalo renv</span></span>
<span id="cb8-13"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-c</span> renv</span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;"># uso renv para instlar la versión de las librerías que hay en renv.lock</span></span>
<span id="cb8-16"><span class="ex" style="color: null;">RUN</span> Rscript <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"renv::restore()"</span></span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;">## Copio el modelo y el fichero de la api</span></span>
<span id="cb8-19"><span class="ex" style="color: null;">COPY</span> brms_model.rds /opt/ml/brms_model.rds</span>
<span id="cb8-20"><span class="ex" style="color: null;">COPY</span> plumber.R /opt/ml/plumber.R</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;"># exponemos el puerto</span></span>
<span id="cb8-23"><span class="ex" style="color: null;">EXPOSE</span> 8081</span>
<span id="cb8-24"><span class="ex" style="color: null;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;">"R"</span>, <span class="st" style="color: #20794D;">"-e"</span>, <span class="st" style="color: #20794D;">"pr &lt;- plumber::plumb('/opt/ml/plumber.R'); pr</span><span class="va" style="color: #111111;">$run</span><span class="st" style="color: #20794D;">(host = '0.0.0.0', port = 8081)"</span>]</span></code></pre></div>
<p>y como antes construimos el docker image</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">docker</span> build <span class="at" style="color: #657422;">-t</span> mi_modelo_brms_rminimal_renv .</span></code></pre></div>
<p>El docker usando renv es sustancialmente más pesado, ocupa 1.29 Gb</p>
<p>Seguramente se puede optimizar más si no usara <code>brms</code>, puesto que importa shinystan, bayesplot y otras librerías que no son estrictamente necesarias para nuestro propósito. Habrá que esperar a que <a href="https://twitter.com/precariobecario">Virgilio</a> haga la función predict de INLA para darle una vuelta a esto</p>


</section>

 ]]></description>
  <category>api</category>
  <category>docker</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/30/api-y-docker-con-r-parte-2.html</guid>
  <pubDate>Sat, 29 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Aquí estoy de nuevo</title>
  <dc:creator>José Luis Cañadas Reche</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>Estoy cambiando el blog de blogdown a quarto Welcome!</p>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/thumbnail.jpg" class="img-fluid"></p>



 ]]></description>
  <category>news</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/index.html</guid>
  <pubDate>Wed, 26 Oct 2022 22:00:00 GMT</pubDate>
  <media:content url="https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sigo trasteando con julia</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/26/sigo-trasteando-con-julia/index.html</link>
  <description><![CDATA[ 




<p>Siguiendo con lo que contaba <a href="https://muestrear-no-es-pecado.netlify.app/2021/08/16/palabras-para-julia-parte-2-n/">aquí</a> me he construido un binario para predecir usando un modelo de xgboost con Julia. La ventaja es que tengo un tar.gz que puedo descomprimir en cualquier linux (por ejemplo un entorno de producción sin acceso a internet y que no tenga ni vaya a tener julia instalado, ni docker ni nada de nada), descomprimir y poder hacer un <code>miapp_para_predecir mi_modelo_entrenado.jls csv_to_predict.csv resultado.csv</code> y que funcione y vaya como un tiro.</p>
<p>Pongo aquí los ficheros relevantes.</p>
<p>Por ejemplo mi fichero para entrenar un modelo y salvarlo .</p>
<p>Fichero <code>train_ boston.jl</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Training model julia</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">using</span>  <span class="bu" style="color: null;">CSV</span>,<span class="bu" style="color: null;">CategoricalArrays</span>, <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">MLJ</span>, <span class="bu" style="color: null;">MLJXGBoostInterface</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">df1 <span class="op" style="color: #5E5E5E;">=</span> CSV.<span class="fu" style="color: #4758AB;">read</span>(<span class="st" style="color: #20794D;">"data/boston.csv"</span>, DataFrame)</span>
<span id="cb1-6"></span>
<span id="cb1-7">df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="op" style="color: #5E5E5E;">:</span>target] <span class="op" style="color: #5E5E5E;">.=</span> <span class="fu" style="color: #4758AB;">ifelse</span>.(df1[!, <span class="op" style="color: #5E5E5E;">:</span>medv_20]<span class="op" style="color: #5E5E5E;">.==</span> <span class="st" style="color: #20794D;">"NG20"</span>, <span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;">const</span> target <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CategoricalArray</span>(df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="op" style="color: #5E5E5E;">:</span>target])</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">const</span> X <span class="op" style="color: #5E5E5E;">=</span> df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="fu" style="color: #4758AB;">Not</span>([<span class="op" style="color: #5E5E5E;">:</span>medv_20, <span class="op" style="color: #5E5E5E;">:</span>target])]</span>
<span id="cb1-11"></span>
<span id="cb1-12">Tree <span class="op" style="color: #5E5E5E;">=</span> <span class="pp" style="color: #AD0000;">@load</span> XGBoostClassifier pkg<span class="op" style="color: #5E5E5E;">=</span>XGBoost</span>
<span id="cb1-13">tree_model <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">Tree</span>(objective<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"binary:logistic"</span>, max_depth <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">6</span>, num_round <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">800</span>)</span>
<span id="cb1-14">mach <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">machine</span>(tree_model, X, target)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="bu" style="color: null;">Threads</span>.<span class="fu" style="color: #4758AB;">nthreads</span>()</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;">evaluate</span>(tree_model, X, target, resampling<span class="op" style="color: #5E5E5E;">=</span><span class="fu" style="color: #4758AB;">CV</span>(shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>),measure<span class="op" style="color: #5E5E5E;">=</span>log_loss, verbosity<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">evaluate</span>(tree_model, X, target,</span>
<span id="cb1-19">                resampling<span class="op" style="color: #5E5E5E;">=</span><span class="fu" style="color: #4758AB;">CV</span>(shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>), measure<span class="op" style="color: #5E5E5E;">=</span>bac, operation<span class="op" style="color: #5E5E5E;">=</span>predict_mode, verbosity<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23">train, test <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">partition</span>(<span class="fu" style="color: #4758AB;">eachindex</span>(target), <span class="fl" style="color: #AD0000;">0.7</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>)</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="fu" style="color: #4758AB;">fit!</span>(mach, rows<span class="op" style="color: #5E5E5E;">=</span>train)</span>
<span id="cb1-26"></span>
<span id="cb1-27">yhat <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">predict</span>(mach, X[test,<span class="op" style="color: #5E5E5E;">:</span>])</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="fu" style="color: #4758AB;">evaluate</span>(tree_model, X[test,<span class="op" style="color: #5E5E5E;">:</span>], target[test], measure<span class="op" style="color: #5E5E5E;">=</span>auc, operation<span class="op" style="color: #5E5E5E;">=</span>predict_mode, verbosity<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-30"></span>
<span id="cb1-31">niveles <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">levels</span>.(yhat)[<span class="fl" style="color: #AD0000;">1</span>]</span>
<span id="cb1-32">niveles[<span class="fl" style="color: #AD0000;">1</span>]</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="fu" style="color: #4758AB;">log_loss</span>(yhat, target[test]) <span class="op" style="color: #5E5E5E;">|&gt;</span> mean</span>
<span id="cb1-35"></span>
<span id="cb1-36">res <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">pdf</span>(yhat, niveles)</span>
<span id="cb1-37">res_df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(res,<span class="op" style="color: #5E5E5E;">:</span>auto)</span>
<span id="cb1-38"></span>
<span id="cb1-39">MLJ.<span class="fu" style="color: #4758AB;">save</span>(<span class="st" style="color: #20794D;">"models/boston_xg.jls"</span>, mach)</span></code></pre></div>
<p>Y luego los ficheros que uso para construirme la app binaria .. Recordemos del <a href="https://muestrear-no-es-pecado.netlify.app/2021/08/16/palabras-para-julia-parte-2-n/">post que mencionaba</a> que lo que necesito es el código del programa principal (el main) y un fichero de precompilación que sirve para que al crear la app se compilen las funciones que voy a usar.</p>
<p>fichero <code>precomp.jl</code>,</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span>, <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">MLJ</span>, <span class="bu" style="color: null;">MLJBase</span>, <span class="bu" style="color: null;">MLJXGBoostInterface</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># uso rutas absolutas</span></span>
<span id="cb2-4">df1 <span class="op" style="color: #5E5E5E;">=</span> CSV.<span class="fu" style="color: #4758AB;">read</span>(<span class="st" style="color: #20794D;">"data/iris.csv"</span>, DataFrame)</span>
<span id="cb2-5">X <span class="op" style="color: #5E5E5E;">=</span> df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="fu" style="color: #4758AB;">Not</span>(<span class="op" style="color: #5E5E5E;">:</span>Species)]</span>
<span id="cb2-6"></span>
<span id="cb2-7">predict_only_mach <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">machine</span>(<span class="st" style="color: #20794D;">"models/mimodelo_xg_binario.jls"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9">ŷ <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">predict</span>(predict_only_mach, X) </span>
<span id="cb2-10"></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;">predict_mode</span>(predict_only_mach, X)</span>
<span id="cb2-13"></span>
<span id="cb2-14">niveles <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">levels</span>.(ŷ)[<span class="fl" style="color: #AD0000;">1</span>]</span>
<span id="cb2-15"></span>
<span id="cb2-16">res <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">pdf</span>(ŷ, niveles) <span class="co" style="color: #5E5E5E;"># con pdf nos da la probabilidad de cada nivel</span></span>
<span id="cb2-17">res_df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(res,<span class="op" style="color: #5E5E5E;">:</span>auto)</span>
<span id="cb2-18"><span class="fu" style="color: #4758AB;">rename!</span>(res_df, [<span class="st" style="color: #20794D;">"target_0"</span>, <span class="st" style="color: #20794D;">"target_1"</span>])</span>
<span id="cb2-19"></span>
<span id="cb2-20">CSV.<span class="fu" style="color: #4758AB;">write</span>(<span class="st" style="color: #20794D;">"data/predicciones.csv"</span>, res_df)</span></code></pre></div>
<p>fichero <code>xgboost_predict_binomial.jl</code> , aquí es dónde está el main</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="kw" style="color: #003B4F;">module</span> xgboost_predict_binomial</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span>, <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">MLJ</span>, <span class="bu" style="color: null;">MLJBase</span>, <span class="bu" style="color: null;">MLJXGBoostInterface</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">julia_main</span>()<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Cint</span></span>
<span id="cb3-6">    try</span>
<span id="cb3-7">        <span class="fu" style="color: #4758AB;">real_main</span>()</span>
<span id="cb3-8">    catch</span>
<span id="cb3-9">        <span class="bu" style="color: null;">Base</span>.<span class="fu" style="color: #4758AB;">invokelatest</span>(<span class="bu" style="color: null;">Base</span>.display_error, <span class="bu" style="color: null;">Base</span>.<span class="fu" style="color: #4758AB;">catch_stack</span>())</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">1</span></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">0</span></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;"># ARGS son los argumentos pasados por consola </span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">real_main</span>()</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;">if</span> <span class="fu" style="color: #4758AB;">length</span>(<span class="cn" style="color: #8f5902;">ARGS</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0</span></span>
<span id="cb3-19">        <span class="fu" style="color: #4758AB;">error</span>(<span class="st" style="color: #20794D;">"pass arguments"</span>)</span>
<span id="cb3-20">    <span class="cf" style="color: #003B4F;">end</span></span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;"># Read model</span></span>
<span id="cb3-23">    modelo <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">machine</span>(<span class="cn" style="color: #8f5902;">ARGS</span>[<span class="fl" style="color: #AD0000;">1</span>])</span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;"># read data. El fichero qeu pasemos tiene que tener solo las X.(con su nombre)</span></span>
<span id="cb3-25">    X <span class="op" style="color: #5E5E5E;">=</span> CSV.<span class="fu" style="color: #4758AB;">read</span>(<span class="cn" style="color: #8f5902;">ARGS</span>[<span class="fl" style="color: #AD0000;">2</span>], DataFrame, ntasks<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">Sys</span>.<span class="cn" style="color: #8f5902;">CPU_THREADS</span>)</span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;"># Predict    </span></span>
<span id="cb3-27">    ŷ <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">predict</span>(modelo, X)            <span class="co" style="color: #5E5E5E;"># predict</span></span>
<span id="cb3-28">    niveles <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">levels</span>.(ŷ)[<span class="fl" style="color: #AD0000;">1</span>]           <span class="co" style="color: #5E5E5E;"># get levels of target</span></span>
<span id="cb3-29">    res <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">pdf</span>(ŷ, niveles)             <span class="co" style="color: #5E5E5E;"># predict probabilities for each level</span></span>
<span id="cb3-30">    </span>
<span id="cb3-31">    res_df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(res,<span class="op" style="color: #5E5E5E;">:</span>auto)     <span class="co" style="color: #5E5E5E;"># convert to DataFrame</span></span>
<span id="cb3-32">    <span class="fu" style="color: #4758AB;">rename!</span>(res_df, [<span class="st" style="color: #20794D;">"target_0"</span>, <span class="st" style="color: #20794D;">"target_1"</span>])          <span class="co" style="color: #5E5E5E;"># Column rename</span></span>
<span id="cb3-33">    CSV.<span class="fu" style="color: #4758AB;">write</span>(<span class="cn" style="color: #8f5902;">ARGS</span>[<span class="fl" style="color: #AD0000;">3</span>], res_df)        <span class="co" style="color: #5E5E5E;"># Write in csv</span></span>
<span id="cb3-34"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-35"></span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="kw" style="color: #003B4F;">end</span> <span class="co" style="color: #5E5E5E;"># module</span></span></code></pre></div>
<p>y si todo está correcto y siguiendo las instrucciones del post anterior, se compilaría haciendo por ejemplo esto</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">PackageCompiler</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">create_app</span>(<span class="st" style="color: #20794D;">"../xgboost_predict_binomial"</span>, <span class="st" style="color: #20794D;">"../xg_binomial_inference"</span>,</span>
<span id="cb4-3"> precompile_execution_file<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"../xgboost_predict_binomial/src/precomp_file.jl"</span>, force<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>, filter_stdlibs <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">true</span>, cpu_target <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"x86_64"</span>)</span></code></pre></div>
<p>Y esto me crea una estructura de directorios dónde está mi app y todo lo necesario para ejecutar julia en cualqueir linux.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"></span>
<span id="cb5-2"><span class="ex" style="color: null;">╰─</span> $ ▶ tree <span class="at" style="color: #657422;">-L</span> 2 xg_binomial_inference</span>
<span id="cb5-3"><span class="ex" style="color: null;">xg_binomial_inference</span></span>
<span id="cb5-4"><span class="ex" style="color: null;">├──</span> bin</span>
<span id="cb5-5"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── julia</span>
<span id="cb5-6"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> └── xgboost_predict_binomial</span>
<span id="cb5-7"><span class="ex" style="color: null;">├──</span> lib</span>
<span id="cb5-8"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── julia</span>
<span id="cb5-9"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── libjulia.so <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> libjulia.so.1.8</span>
<span id="cb5-10"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── libjulia.so.1 <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> libjulia.so.1.8</span>
<span id="cb5-11"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> └── libjulia.so.1.8</span>
<span id="cb5-12"><span class="ex" style="color: null;">└──</span> share</span>
<span id="cb5-13">    <span class="ex" style="color: null;">└──</span> julia</span></code></pre></div>
<p>y poner por ejemplo en el <code>.bashrc</code> el siguiente alias.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="bu" style="color: null;">alias</span> motor_xgboost=/home/jose/Julia_projects/xgboost_model/xg_binomial_inference/bin/xgboost_predict_binomial</span></code></pre></div>
<p>y ya está listo.</p>
<p>Ahora tengo un dataset a predecir de 5 millones de filas</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"></span>
<span id="cb7-2"><span class="ex" style="color: null;">╰─</span> $ ▶ wc <span class="at" style="color: #657422;">-l</span> data/test.csv </span>
<span id="cb7-3"><span class="ex" style="color: null;">5060001</span> data/test.csv</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"></span>
<span id="cb8-2"> <span class="fu" style="color: #4758AB;">head</span> <span class="at" style="color: #657422;">-n4</span> data/test.csv </span>
<span id="cb8-3"><span class="ex" style="color: null;">crim,zn,indus,chas,nox,rm,age,dis,rad,tax,ptratio,lstat</span></span>
<span id="cb8-4"><span class="ex" style="color: null;">0.00632,18,2.31,0,0.538,6.575,65.2,4.09,1,296,15.3,4.98</span></span>
<span id="cb8-5"><span class="ex" style="color: null;">0.02731,0,7.07,0,0.469,6.421,78.9,4.9671,2,242,17.8,9.14</span></span>
<span id="cb8-6"><span class="ex" style="color: null;">0.02729,0,7.07,0,0.469,7.185,61.1,4.9671,2,242,17.8,4.03</span></span></code></pre></div>
<p>y bueno, tardo unos 11 segundos en obtener las predicciones y escribir el resultado</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">╰─</span> $ ▶ time motor_xgboost models/boston_xg.jls data/test.csv pred.csv</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="ex" style="color: null;">real</span>    0m11,091s</span>
<span id="cb9-4"><span class="ex" style="color: null;">user</span>    0m53,293s</span>
<span id="cb9-5"><span class="ex" style="color: null;">sys</span> 0m2,321s</span>
<span id="cb9-6"></span></code></pre></div>
<p>y comprobamos que lo ha hecho bien</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"></span>
<span id="cb10-2"><span class="ex" style="color: null;">╰─</span> $ ▶ wc <span class="at" style="color: #657422;">-l</span>  pred.csv </span>
<span id="cb10-3"><span class="ex" style="color: null;">5060001</span> pred.csv</span>
<span id="cb10-4"></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="ex" style="color: null;">╰─</span> $ ▶ head <span class="at" style="color: #657422;">-n</span> 5 pred.csv </span>
<span id="cb10-7"><span class="ex" style="color: null;">target_0,target_1</span></span>
<span id="cb10-8"><span class="ex" style="color: null;">0.9999237,7.63197e-5</span></span>
<span id="cb10-9"><span class="ex" style="color: null;">0.99120975,0.008790266</span></span>
<span id="cb10-10"><span class="ex" style="color: null;">0.99989164,0.00010834133</span></span>
<span id="cb10-11"><span class="ex" style="color: null;">0.99970543,0.00029458306</span></span></code></pre></div>
<p>Y nada, pues esto puede servir para subir modelos a producción en entornos poco amigables (sin python3, sin R, sin julia, sin spark, sin docker, sin internet). Es un poco <code>old style</code> que me diría mi arquenazi favorito Rubén, pero</p>
<p>Os dejo el tar.gz para que probéis, también os dejo el <code>Project.toml</code>y el <code>Manifest.toml</code> y el fichero con el que he entrenado los datos. para que uséis el mismo entorno de julia que he usado yo.</p>
<p><a href="https://drive.google.com/drive/folders/1jQW-QQNoABlMdUHhlwHvY9MQnZh1x_Yi?usp=sharing">enlace_drive</a></p>



 ]]></description>
  <category>julia</category>
  <category>produccion</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/26/sigo-trasteando-con-julia/index.html</guid>
  <pubDate>Tue, 25 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Api y docker con R. parte 1</title>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/09/api-y-docker-con-r-parte-1/index.html</link>
  <description><![CDATA[ 




<p>Todo el mundo anda haciendo apis para poner modelos en producción, y oye, está bien. Si además lo complementas con dockerizarlo para tener un entorno controlado y que te valga para ponerlo en cualquier sitio dónde esté docker instalado pues mejor.</p>
<p>Aquí voy a contar un ejemplo de como se puede hacer con R usando <code>plumber</code> y docker, en siguentes post contaré como hacerlo con <code>vetiver</code> que es una librería que está para R y Python que tiene algún extra, como versionado de modelos y demás.</p>
<p>Lo primero de todo es trabajar en un proyecto nuevo y usar <a href="https://rstudio.github.io/renv/articles/renv.html"><code>renv</code></a>. renv es para gestionar <em>entornos</em> de R, ojo que también funciona bien si tienes que mezclar R y python. Tiene cosas interesantes como descubrir las librerías que usas en tu proyecto y aún mejor, si estas librerías ya las tienes instaladas pues te crea enlaces simbólicos a dónde están y te permite ahorrar un montón de espacio, que al menos yo, no he conseguido ver cómo hacer eso con <code>conda</code>.</p>
<section id="objetivo" class="level2">
<h2 class="anchored" data-anchor-id="objetivo">Objetivo</h2>
<p>Mi objetivo es ver cómo pondría un modelo bayesiano ajustado con <a href="https://github.com/paul-buerkner/brms"><code>brms</code></a> para que me devuelva predicciones puntuales y las posterioris en un entorno de producción.</p>
</section>
<section id="entrenando-modelo" class="level2">
<h2 class="anchored" data-anchor-id="entrenando-modelo">Entrenando modelo</h2>
<p>Para eso voy a usar datos de un <a href="https://muestrear-no-es-pecado.netlify.app/2021/06/04/big-data-para-pobres-iii-bayesiano/">antiguo post</a>.</p>
<p>Una vez que estemos en ese nuevo proyecto, ajustamos y guardamos un modelo .</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6      ✔ purrr   0.3.5 
## ✔ tibble  3.1.8      ✔ dplyr   1.0.10
## ✔ tidyr   1.2.1      ✔ stringr 1.4.1 
## ✔ readr   2.1.3      ✔ forcats 0.5.2 
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(brms)</span></code></pre></div>
<pre><code>## Loading required package: Rcpp
## Loading 'brms' package (version 2.18.0). Useful instructions
## can be found by typing help('brms'). A more detailed introduction
## to the package is available through vignette('brms_overview').
## 
## Attaching package: 'brms'
## 
## The following object is masked from 'package:stats':
## 
##     ar</code></pre>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(cmdstanr)</span></code></pre></div>
<pre><code>## Warning: package 'cmdstanr' was built under R version 4.3.0</code></pre>
<pre><code>## This is cmdstanr version 0.5.2
## - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
## - Use set_cmdstan_path() to set the path to CmdStan
## - Use install_cmdstan() to install CmdStan</code></pre>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Using all cores. 12 in my machine, y que haga las cadenas en paralelo</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">mc.cores =</span> parallel<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">detectCores</span>())</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">set_cmdstan_path</span>(<span class="st" style="color: #20794D;">"~/cmdstan/"</span>)</span></code></pre></div>
<pre><code>## CmdStan path set to: /home/jose/cmdstan</code></pre>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data/train_local.csv"</span>))</span></code></pre></div>
<pre><code>## Rows: 662 Columns: 5
## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: ","
## chr (3): segmento, tipo, edad_cat
## dbl (2): valor_cliente, n
## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># guiña a librería antigua</span></span>
<span id="cb12-2">car<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">some</span>(train)</span></code></pre></div>
<pre><code>## # A tibble: 10 × 5
##    segmento tipo  valor_cliente edad_cat     n
##    &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;
##  1 Rec      SM                2 21- 40       4
##  2 Best     SM                1 41-50      475
##  3 Best     C                 4 &gt;60       2807
##  4 No_way   C                 1 41-50      356
##  5 No_way   B                 5 40-60      221
##  6 Rec      SF                2 &gt;60        152
##  7 Rec      B                 4 40-60      194
##  8 Best     C                 5 41-50     4934
##  9 No_way   B                 3 41-50     1064
## 10 No_way   SF                8 41-50       29</code></pre>
<p>Ajustamos un modelo bayesiano con efectos aleatorios y usando la columna <code>n</code> como pesos de las filas. (leer el post dónde usé estos datos para saber más)</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">train <span class="ot" style="color: #003B4F;">&lt;-</span> train <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">target1 =</span> <span class="fu" style="color: #4758AB;">as_factor</span>(<span class="fu" style="color: #4758AB;">ifelse</span>(segmento <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Best"</span>, <span class="st" style="color: #20794D;">"Best"</span>, <span class="st" style="color: #20794D;">"Other"</span>)))</span>
<span id="cb14-3"></span>
<span id="cb14-4"></span>
<span id="cb14-5">formula <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">brmsformula</span>(</span>
<span id="cb14-6">    target1<span class="sc" style="color: #5E5E5E;">|</span> <span class="fu" style="color: #4758AB;">resp_weights</span>(n)  <span class="sc" style="color: #5E5E5E;">~</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> edad_cat) <span class="sc" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> valor_cliente) <span class="sc" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> tipo)</span>
<span id="cb14-7">    )</span>
<span id="cb14-8"></span>
<span id="cb14-9">mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">brm</span>(</span>
<span id="cb14-10">    formula,</span>
<span id="cb14-11">     <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"bernoulli"</span>, <span class="at" style="color: #657422;">data =</span> train, </span>
<span id="cb14-12">    <span class="at" style="color: #657422;">iter =</span> <span class="dv" style="color: #AD0000;">4000</span>, <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">1000</span>, <span class="at" style="color: #657422;">cores =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">chains =</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb14-13">    <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb14-14">    <span class="at" style="color: #657422;">backend =</span> <span class="st" style="color: #20794D;">"cmdstanr"</span>, </span>
<span id="cb14-15">     <span class="at" style="color: #657422;">refresh =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># refresh 0 qu eno quiero que se me llene el post de los output de las cadenas mcm</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="fu" style="color: #4758AB;">saveRDS</span>(mod, here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>))</span></code></pre></div>
</section>
<section id="comprobamos-que-nuestro-modelo-funciona" class="level2">
<h2 class="anchored" data-anchor-id="comprobamos-que-nuestro-modelo-funciona">Comprobamos que nuestro modelo funciona</h2>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(tidybayes)</span></code></pre></div>
<pre><code>## 
## Attaching package: 'tidybayes'</code></pre>
<pre><code>## The following objects are masked from 'package:brms':
## 
##     dstudent_t, pstudent_t, qstudent_t, rstudent_t</code></pre>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">mod_reload <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>))</span>
<span id="cb18-2"> </span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb18-4"></span>
<span id="cb18-5">test <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">read_csv</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data/test_local.csv"</span>))</span></code></pre></div>
<pre><code>## Rows: 656 Columns: 5</code></pre>
<pre><code>## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: ","
## chr (3): segmento, tipo, edad_cat
## dbl (2): valor_cliente, n
## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># estimacion puntual</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">predict</span>(mod_reload, <span class="fu" style="color: #4758AB;">head</span>(test))</span></code></pre></div>
<pre><code>##        Estimate Est.Error Q2.5 Q97.5
## [1,] 0.23216667 0.4222324    0     1
## [2,] 0.13233333 0.3388669    0     1
## [3,] 0.16075000 0.3673155    0     1
## [4,] 0.13825000 0.3451766    0     1
## [5,] 0.12716667 0.3331735    0     1
## [6,] 0.07333333 0.2606937    0     1</code></pre>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># full posterior</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;"># para 6 filas guarda los valores obtenidos en las 3000 iteraciones de cada cadena</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;"># 3000 * 4 * 6 = 72000 valores </span></span>
<span id="cb23-4"></span>
<span id="cb23-5">posterior_pred <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">add_epred_draws</span>(<span class="fu" style="color: #4758AB;">head</span>(test), mod_reload) </span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;">head</span>(posterior_pred )</span></code></pre></div>
<pre><code>## # A tibble: 6 × 10
## # Groups:   segmento, tipo, valor_cliente, edad_cat, n, .row [1]
##   segmento tipo  valor_cliente edad_cat     n  .row .chain .itera…¹ .draw .epred
##   &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;  &lt;int&gt;    &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;
## 1 Rec      C                 0 21- 40     132     1     NA       NA     1  0.230
## 2 Rec      C                 0 21- 40     132     1     NA       NA     2  0.234
## 3 Rec      C                 0 21- 40     132     1     NA       NA     3  0.233
## 4 Rec      C                 0 21- 40     132     1     NA       NA     4  0.230
## 5 Rec      C                 0 21- 40     132     1     NA       NA     5  0.232
## 6 Rec      C                 0 21- 40     132     1     NA       NA     6  0.226
## # … with abbreviated variable name ¹​.iteration</code></pre>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">dim</span>(posterior_pred)</span></code></pre></div>
<pre><code>## [1] 72000    10</code></pre>
<p>Para la primer fila podemos tener la distribución a posteriori</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">posterior_pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">filter</span>(.row <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>.epred)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;">geom_density</span>() </span></code></pre></div>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/09/api-y-docker-con-r-parte-1/unnamed-chunk-4-1.png" width="672"></p>
<p>Pues listo, ya tenemos el modelo entrenado y guardado, ahora sólo queda escribir el código para la api y el Dockerfile..</p>
</section>
<section id="creando-el-plumber.r" class="level2">
<h2 class="anchored" data-anchor-id="creando-el-plumber.r">Creando el plumber.R</h2>
<p>Una cosa importante, si hemos usado <code>renv</code> es escribir el fichero con las dependencias que usamos. Eso se hace con <code>renv::snapshot()</code> y se crea un fichero dónde están descritas las dependencias versionadas de nuestro proyecto.</p>
<p>Pero quizá para el docker no necesitemos todas, en este caso, partiendo del fichero anterior nos creamos otro con sólo las dependencias necesarias. Yo lo he llamado <code>vetiver_renv.lock</code> porque empecé trasteando con vetiver y soy demasiado vago como para cambiar ahora el nombre. El contenido del fichero es</p>
<p><code>vetiver_renv.lock</code></p>
<pre><code>{
  "R": {
    "Version": "4.2.1",
    "Repositories": [
      {
        "Name": "binarios",
        "URL": "https://packagemanager.rstudio.com/all/latest"
      },
      {
        "Name": "ropenspain",
        "URL": "https://ropenspain.r-universe.dev"
      }
    ]
  },
  "Packages": {
    "plumber": {
      "Package": "plumber",
      "Version": "1.2.1",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "8b65a7a00ef8edc5ddc6fabf0aff1194",
      "Requirements": [
        "R6",
        "crayon",
        "ellipsis",
        "httpuv",
        "jsonlite",
        "lifecycle",
        "magrittr",
        "mime",
        "promises",
        "rlang",
        "sodium",
        "stringi",
        "swagger",
        "webutils"
      ]
    },
    "brms": {
      "Package": "brms",
      "Version": "2.18.0",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "afcb0d871e1759b68b29eb6affd37a10",
      "Requirements": [
        "Matrix",
        "Rcpp",
        "abind",
        "backports",
        "bayesplot",
        "bridgesampling",
        "coda",
        "future",
        "ggplot2",
        "glue",
        "loo",
        "matrixStats",
        "mgcv",
        "nleqslv",
        "nlme",
        "posterior",
        "rstan",
        "rstantools",
        "shinystan"
      ]
    },
    "tidybayes": {
      "Package": "tidybayes",
      "Version": "3.0.2",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "d501501261b724f35ec9f2b80f4421b5",
      "Requirements": [
        "arrayhelpers",
        "coda",
        "dplyr",
        "ggdist",
        "ggplot2",
        "magrittr",
        "posterior",
        "rlang",
        "tibble",
        "tidyr",
        "tidyselect",
        "vctrs",
        "withr"
      ]
    }
  }
}
</code></pre>
<p>Cómo veis también he añadido la librería tidybayes, porque me va a resultar útil para sacar la posteriori de las predicciones de los nuevos datos.</p>
<p>Creamos el fichero <code>plumber.R</code> que no es más que decir cómo se va a predecir y crear un par de endpoints que permiten tanto obtener estimaciones puntuales como la full posterior. Con la librería <code>plumber</code> se hace fácil sin más que usar decoradores.</p>
<p>Fichero <code>plumber.R</code></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">library</span>(brms)</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;">library</span>(plumber)</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;">library</span>(tidybayes)</span>
<span id="cb29-4"></span>
<span id="cb29-5">brms_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>)</span>
<span id="cb29-6"></span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;">#* @apiTitle brms predict Api</span></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;">#* @apiDescription Endpoints for working with brms model</span></span>
<span id="cb29-10"></span>
<span id="cb29-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- filter-logger</span></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;">#* Log some information about the incoming request</span></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;">#* @filter logger</span></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;">function</span>(req){</span>
<span id="cb29-15">    <span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">as.character</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>()), <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb29-16">        req<span class="sc" style="color: #5E5E5E;">$</span>REQUEST_METHOD, req<span class="sc" style="color: #5E5E5E;">$</span>PATH_INFO, <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb29-17">        req<span class="sc" style="color: #5E5E5E;">$</span>HTTP_USER_AGENT, <span class="st" style="color: #20794D;">"@"</span>, req<span class="sc" style="color: #5E5E5E;">$</span>REMOTE_ADDR, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb29-18">    <span class="fu" style="color: #4758AB;">forward</span>()</span>
<span id="cb29-19">}</span>
<span id="cb29-20"></span>
<span id="cb29-21"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- post-data</span></span>
<span id="cb29-22"><span class="co" style="color: #5E5E5E;">#* Submit data and get a prediction in return</span></span>
<span id="cb29-23"><span class="co" style="color: #5E5E5E;">#* @post /predict</span></span>
<span id="cb29-24"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb29-25">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb29-26">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb29-27">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb29-28">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb29-29">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb29-30">    }</span>
<span id="cb29-31">    </span>
<span id="cb29-32">    <span class="fu" style="color: #4758AB;">predict</span>(brms_model, data) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb29-33">        <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb29-34">}</span>
<span id="cb29-35"></span>
<span id="cb29-36"></span>
<span id="cb29-37"><span class="co" style="color: #5E5E5E;">#* @post /full_posterior</span></span>
<span id="cb29-38"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb29-39">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb29-40">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb29-41">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb29-42">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb29-43">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb29-44">    }</span>
<span id="cb29-45">    </span>
<span id="cb29-46">    <span class="fu" style="color: #4758AB;">add_epred_draws</span>(data, brms_model) </span>
<span id="cb29-47">        </span>
<span id="cb29-48">}</span></code></pre></div>
<p>No tiene mucho misterio, los endpoint se crean usando</p>
<pre><code>#* @post  /nombre_endpoing</code></pre>
<p>y creando una función que va a tomar los datos que le pasemos en formato json a la api, los pasa a data.frame y usa el modelo previamente cargado para obtener las estimaciones puntuales en un caso y la full posterior (con <code>add_epred_draws</code>) en el otro.</p>
</section>
<section id="creamos-el-docker" class="level2">
<h2 class="anchored" data-anchor-id="creamos-el-docker">Creamos el docker</h2>
<p>Iba a contar lo que es docker, pero mejor lo miráis en su <a href="https://www.docker.com/">web</a>. Sólo quedarnos con la idea que es como tener una máquina virtual que puedo usar en otro sitio, pero es mucho más ligera y puede usar cosas del sistema anfitrión e interactuar con él.</p>
<p>Para crear nuestra <em>imagen</em> docker tenemos que crear un fichero que se llame <code>Dockerfile</code> dónde vamos a ir diciéndole como cree nuestra máquina virtual.</p>
<p>Es importante que estén los ficheros anteriores, el modelo salvado , el plumber.R y el fichero .lock en las rutas correctas dónde los busca el Dockerfile, en mi caso, lo he puesto todo en el mismo sitio.</p>
<p>Contendido del Dockerfile</p>
<pre><code># Docker file para modelo brms

FROM rocker/r-ver:4.2.1
ENV RENV_CONFIG_REPOS_OVERRIDE https://packagemanager.rstudio.com/cran/latest

RUN apt-get update -qq &amp;&amp; apt-get install -y --no-install-recommends \
  default-jdk \
  libcurl4-openssl-dev \
  libicu-dev \
  libsodium-dev \
  libssl-dev \
  make \
  zlib1g-dev \
  libxml2-dev \
  libglpk-dev \
  &amp;&amp; apt-get clean


COPY vetiver_renv.lock renv.lock
RUN Rscript -e "install.packages('renv')"
RUN Rscript -e "renv::restore()"

## Copio el modelo y el fichero de la api
COPY brms_model.rds /opt/ml/brms_model.rds
COPY plumber.R /opt/ml/plumber.R

EXPOSE 8081
ENTRYPOINT ["R", "-e", "pr &lt;- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8081)"]

</code></pre>
<p>Importante que el puerto que se exponga con <code>EXPOSE</code> sea el mismo que usa el plumber, en este caso el 8081.</p>
<p>Ahora para construir la imagen docker y ejecutarla</p>
<pre><code>docker build -t mi_modelo_brms .
</code></pre>
<p>Y despues de un rato podemos ejecutarlo mapeando el puerto</p>
<pre><code>nohup docker container run --rm -p 8081:8081 mi_modelo_brms &amp; </code></pre>
</section>
<section id="funciona" class="level2">
<h2 class="anchored" data-anchor-id="funciona">¿Funciona?</h2>
<p>Podemos usar curl, python, php o cualquier otra cosa para mandar peticiones a la api y que nos devuelva predicciones, con R sería algo así.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">test <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">    <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">2</span>) </span></code></pre></div>
<pre><code>## # A tibble: 2 × 5
##   segmento tipo  valor_cliente edad_cat     n
##   &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;
## 1 Rec      C                 0 21- 40     132
## 2 Best     B                 0 41-50       19</code></pre>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">base_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"http://0.0.0.0:8081"</span></span>
<span id="cb36-2"></span>
<span id="cb36-3">api_res <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">POST</span>(<span class="at" style="color: #657422;">url =</span> <span class="fu" style="color: #4758AB;">paste0</span>(base_url, <span class="st" style="color: #20794D;">"/predict"</span>),</span>
<span id="cb36-4">                      <span class="at" style="color: #657422;">body =</span> <span class="fu" style="color: #4758AB;">head</span>(test),</span>
<span id="cb36-5">                      <span class="at" style="color: #657422;">encode =</span> <span class="st" style="color: #20794D;">"json"</span>)</span>
<span id="cb36-6">predicted_values <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(api_res, <span class="at" style="color: #657422;">as =</span> <span class="st" style="color: #20794D;">"text"</span>, <span class="at" style="color: #657422;">encoding =</span> <span class="st" style="color: #20794D;">"UTF-8"</span>)</span>
<span id="cb36-7"></span>
<span id="cb36-8">jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fromJSON</span>(predicted_values)</span></code></pre></div>
<pre><code>##   Estimate Est.Error Q2.5 Q97.5
## 1   0.2283    0.4198    0     1
## 2   0.1356    0.3424    0     1
## 3   0.1604    0.3670    0     1
## 4   0.1320    0.3385    0     1
## 5   0.1215    0.3267    0     1
## 6   0.0737    0.2612    0     1</code></pre>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">api_res2 <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">POST</span>(<span class="at" style="color: #657422;">url =</span> <span class="fu" style="color: #4758AB;">paste0</span>(base_url, <span class="st" style="color: #20794D;">"/full_posterior"</span>),</span>
<span id="cb38-2">                      <span class="at" style="color: #657422;">body =</span> <span class="fu" style="color: #4758AB;">head</span>(test,<span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb38-3">                      <span class="at" style="color: #657422;">encode =</span> <span class="st" style="color: #20794D;">"json"</span>)</span>
<span id="cb38-4">posterior_values <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(api_res2, <span class="at" style="color: #657422;">as =</span> <span class="st" style="color: #20794D;">"text"</span>, <span class="at" style="color: #657422;">encoding =</span> <span class="st" style="color: #20794D;">"UTF-8"</span>)</span>
<span id="cb38-5"></span>
<span id="cb38-6"></span>
<span id="cb38-7">jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fromJSON</span>(posterior_values)  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-8">  <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<pre><code>##     segmento tipo valor_cliente edad_cat   n .row .draw .epred
## 1        Rec    C             0   21- 40 132    1     1 0.2297
## 2        Rec    C             0   21- 40 132    1     2 0.2341
## 3        Rec    C             0   21- 40 132    1     3 0.2330
## 4        Rec    C             0   21- 40 132    1     4 0.2296
## 5        Rec    C             0   21- 40 132    1     5 0.2321
## 6        Rec    C             0   21- 40 132    1     6 0.2256
## 7        Rec    C             0   21- 40 132    1     7 0.2211
## 8        Rec    C             0   21- 40 132    1     8 0.2215
## 9        Rec    C             0   21- 40 132    1     9 0.2259
## 10       Rec    C             0   21- 40 132    1    10 0.2245
## 11       Rec    C             0   21- 40 132    1    11 0.2330
## 12       Rec    C             0   21- 40 132    1    12 0.2263
## 13       Rec    C             0   21- 40 132    1    13 0.2262
## 14       Rec    C             0   21- 40 132    1    14 0.2426
## 15       Rec    C             0   21- 40 132    1    15 0.2307
## 16       Rec    C             0   21- 40 132    1    16 0.2348
## 17       Rec    C             0   21- 40 132    1    17 0.2293
## 18       Rec    C             0   21- 40 132    1    18 0.2281
## 19       Rec    C             0   21- 40 132    1    19 0.2304
## 20       Rec    C             0   21- 40 132    1    20 0.2277
## 21       Rec    C             0   21- 40 132    1    21 0.2283
## 22       Rec    C             0   21- 40 132    1    22 0.2355
## 23       Rec    C             0   21- 40 132    1    23 0.2297
## 24       Rec    C             0   21- 40 132    1    24 0.2257
## 25       Rec    C             0   21- 40 132    1    25 0.2191
## 26       Rec    C             0   21- 40 132    1    26 0.2275
## 27       Rec    C             0   21- 40 132    1    27 0.2328
## 28       Rec    C             0   21- 40 132    1    28 0.2312
## 29       Rec    C             0   21- 40 132    1    29 0.2190
## 30       Rec    C             0   21- 40 132    1    30 0.2370
## 31       Rec    C             0   21- 40 132    1    31 0.2303
## 32       Rec    C             0   21- 40 132    1    32 0.2252
## 33       Rec    C             0   21- 40 132    1    33 0.2190
## 34       Rec    C             0   21- 40 132    1    34 0.2269
## 35       Rec    C             0   21- 40 132    1    35 0.2311
## 36       Rec    C             0   21- 40 132    1    36 0.2309
## 37       Rec    C             0   21- 40 132    1    37 0.2313
## 38       Rec    C             0   21- 40 132    1    38 0.2361
## 39       Rec    C             0   21- 40 132    1    39 0.2335
## 40       Rec    C             0   21- 40 132    1    40 0.2414
## 41       Rec    C             0   21- 40 132    1    41 0.2333
## 42       Rec    C             0   21- 40 132    1    42 0.2283
## 43       Rec    C             0   21- 40 132    1    43 0.2354
## 44       Rec    C             0   21- 40 132    1    44 0.2314
## 45       Rec    C             0   21- 40 132    1    45 0.2357
## 46       Rec    C             0   21- 40 132    1    46 0.2240
## 47       Rec    C             0   21- 40 132    1    47 0.2241
## 48       Rec    C             0   21- 40 132    1    48 0.2355
## 49       Rec    C             0   21- 40 132    1    49 0.2260
## 50       Rec    C             0   21- 40 132    1    50 0.2268
## 51       Rec    C             0   21- 40 132    1    51 0.2278
## 52       Rec    C             0   21- 40 132    1    52 0.2213
## 53       Rec    C             0   21- 40 132    1    53 0.2246
## 54       Rec    C             0   21- 40 132    1    54 0.2316
## 55       Rec    C             0   21- 40 132    1    55 0.2313
## 56       Rec    C             0   21- 40 132    1    56 0.2209
## 57       Rec    C             0   21- 40 132    1    57 0.2269
## 58       Rec    C             0   21- 40 132    1    58 0.2323
## 59       Rec    C             0   21- 40 132    1    59 0.2280
## 60       Rec    C             0   21- 40 132    1    60 0.2357
## 61       Rec    C             0   21- 40 132    1    61 0.2275
## 62       Rec    C             0   21- 40 132    1    62 0.2387
## 63       Rec    C             0   21- 40 132    1    63 0.2387
## 64       Rec    C             0   21- 40 132    1    64 0.2231
## 65       Rec    C             0   21- 40 132    1    65 0.2370
## 66       Rec    C             0   21- 40 132    1    66 0.2313
## 67       Rec    C             0   21- 40 132    1    67 0.2243
## 68       Rec    C             0   21- 40 132    1    68 0.2335
## 69       Rec    C             0   21- 40 132    1    69 0.2275
## 70       Rec    C             0   21- 40 132    1    70 0.2340
## 71       Rec    C             0   21- 40 132    1    71 0.2250
## 72       Rec    C             0   21- 40 132    1    72 0.2373
## 73       Rec    C             0   21- 40 132    1    73 0.2259
## 74       Rec    C             0   21- 40 132    1    74 0.2405
## 75       Rec    C             0   21- 40 132    1    75 0.2227
## 76       Rec    C             0   21- 40 132    1    76 0.2210
## 77       Rec    C             0   21- 40 132    1    77 0.2337
## 78       Rec    C             0   21- 40 132    1    78 0.2306
## 79       Rec    C             0   21- 40 132    1    79 0.2242
## 80       Rec    C             0   21- 40 132    1    80 0.2235
## 81       Rec    C             0   21- 40 132    1    81 0.2247
## 82       Rec    C             0   21- 40 132    1    82 0.2188
## 83       Rec    C             0   21- 40 132    1    83 0.2129
## 84       Rec    C             0   21- 40 132    1    84 0.2415
## 85       Rec    C             0   21- 40 132    1    85 0.2293
## 86       Rec    C             0   21- 40 132    1    86 0.2312
## 87       Rec    C             0   21- 40 132    1    87 0.2189
## 88       Rec    C             0   21- 40 132    1    88 0.2236
## 89       Rec    C             0   21- 40 132    1    89 0.2262
## 90       Rec    C             0   21- 40 132    1    90 0.2317
## 91       Rec    C             0   21- 40 132    1    91 0.2316
## 92       Rec    C             0   21- 40 132    1    92 0.2288
## 93       Rec    C             0   21- 40 132    1    93 0.2299
## 94       Rec    C             0   21- 40 132    1    94 0.2288
## 95       Rec    C             0   21- 40 132    1    95 0.2311
## 96       Rec    C             0   21- 40 132    1    96 0.2264
## 97       Rec    C             0   21- 40 132    1    97 0.2269
## 98       Rec    C             0   21- 40 132    1    98 0.2287
## 99       Rec    C             0   21- 40 132    1    99 0.2283
## 100      Rec    C             0   21- 40 132    1   100 0.2191</code></pre>
<p>Seguramente usar una api para obtener la posteriori que tiene tantos valores para cada dato no sea lo más eficiente, porque lo devuelve en formato json y luego hay que convertirlo a data.frame, pero funciona.</p>
</section>
<section id="salvar-docker-en-un-tar.gz" class="level2">
<h2 class="anchored" data-anchor-id="salvar-docker-en-un-tar.gz">Salvar docker en un tar.gz</h2>
<p>Si no tenemos un sitio estilo docker hub dónde registrar nuestros docker o por cualquier otra causa, podemos usar <code>docker save</code> para generar un fichero comprimido y <code>docker load</code> para importarlo.</p>
<p>Sería algo así como</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"></span>
<span id="cb40-2"><span class="ex" style="color: null;">docker</span> save mi_modelo_brms <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">gzip</span> <span class="op" style="color: #5E5E5E;">&gt;</span> mi_modelo_brms_docker.tar.gz</span></code></pre></div>
<p>Copiar ese tar.gz a dónde toque</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="ex" style="color: null;">docker</span> load <span class="op" style="color: #5E5E5E;">&lt;</span> mi_modelo_brms_docker.tar.gz</span></code></pre></div>
</section>
<section id="adelanto-con-vetiver" class="level2">
<h2 class="anchored" data-anchor-id="adelanto-con-vetiver">Adelanto con vetiver</h2>
<p>Con la librería vetiver se simplifica todo este proceso, puesto que crea por ti el plumber.R y el dockerfile y tiene movidas para guardar la monitorización del modelo y demás. Está tanto para R como para python. En R soporta los modelos que estén en <code>tidymodels</code> y en python soporta <code>scikit-learn</code>, <code>statmodels</code>, <code>xgboost</code> y creo que también <code>pytorch</code></p>


</section>

 ]]></description>
  <category>docker</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/09/api-y-docker-con-r-parte-1/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Leaflet example</title>
  <dc:creator>José Luis Cañadas Reche</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/leaflet_ejemplo/index.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(leaflet)</span>
<span id="cb1-2"></span>
<span id="cb1-3">m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">leaflet</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">addTiles</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># Add default OpenStreetMap map tiles</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">addMarkers</span>(<span class="at" style="color: #657422;">lng=</span><span class="fl" style="color: #AD0000;">174.768</span>, <span class="at" style="color: #657422;">lat=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">36.852</span>, <span class="at" style="color: #657422;">popup=</span><span class="st" style="color: #20794D;">"The birthplace of R"</span>)</span>
<span id="cb1-6">m  <span class="co" style="color: #5E5E5E;"># Print the map</span></span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-f67d92f9699acdf740d2" style="width:100%;height:464px;" class="leaflet html-widget"></div>
<script type="application/json" data-for="htmlwidget-f67d92f9699acdf740d2">{"x":{"options":{"crs":{"crsClass":"L.CRS.EPSG3857","code":null,"proj4def":null,"projectedBounds":null,"options":{}}},"calls":[{"method":"addTiles","args":["https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",null,null,{"minZoom":0,"maxZoom":18,"tileSize":256,"subdomains":"abc","errorTileUrl":"","tms":false,"noWrap":false,"zoomOffset":0,"zoomReverse":false,"opacity":1,"zIndex":1,"detectRetina":false,"attribution":"&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap<\/a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA<\/a>"}]},{"method":"addMarkers","args":[-36.852,174.768,null,null,null,{"interactive":true,"draggable":false,"keyboard":true,"title":"","alt":"","zIndexOffset":0,"opacity":1,"riseOnHover":false,"riseOffset":250},"The birthplace of R",null,null,null,null,{"interactive":false,"permanent":false,"direction":"auto","opacity":1,"offset":[0,0],"textsize":"10px","textOnly":false,"className":"","sticky":true},null]}],"limits":{"lat":[-36.852,-36.852],"lng":[174.768,174.768]}},"evals":[],"jsHooks":[]}</script>
</div>
</div>



 ]]></description>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/leaflet_ejemplo/index.html</guid>
  <pubDate>Wed, 02 Nov 2022 18:53:55 GMT</pubDate>
</item>
</channel>
</rss>
