<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Muestrear no es pecado</title>
<link>https://muestrear-no-es-pecado-rebranding.netlify.app/blog.html</link>
<atom:link href="https://muestrear-no-es-pecado-rebranding.netlify.app/blog.xml" rel="self" type="application/rss+xml"/>
<description>Estadística, ciencia de datos, big data, cosas varias</description>
<generator>quarto-1.2.258</generator>
<lastBuildDate>Sat, 29 Oct 2022 22:00:00 GMT</lastBuildDate>
<item>
  <title>Api y docker con R. parte 2</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/30/api-y-docker-con-r-parte-2.html</link>
  <description><![CDATA[ 



<p>En la entrada de <a href="https://muestrear-no-es-pecado.netlify.app/2022/10/12/api-y-docker-con-r-parte-1/">api y docker con R parte I</a> veíamos que es muy fácil construir una api y dockerizarla para tener un modelo bayesiano en producción. Pero hay un pequeño incoveniente, el docker que hemos creado se base en <a href="https://rocker-project.org/images/">rocker/verse</a> que se basan en ubuntu. Y ubuntu ocupa mucho. Pero gracias a gente como Gabor Csardi (autor entre otras librerías de <code>igraph</code>), tenemos <a href="https://github.com/r-hub/r-minimal">r-hub/minimal</a>, que permiten tener una imagen de docker con R basadas en alpine, de hecho una imagen de docker con R y dplyr son unos 50 mb.</p>
<p>Lo primero de todo es ver cuánto ocupa el docker creado en el primer post.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;">╰─</span> $ ▶ docker image ls mi_modelo_brms</span>
<span id="cb1-2"><span class="ex" style="color: null;">REPOSITORY</span>       TAG       IMAGE ID       CREATED       SIZE</span>
<span id="cb1-3"><span class="ex" style="color: null;">mi_modelo_brms</span>   latest    9e641ec2c150   3 weeks ago   3.42GB</span></code></pre></div>
<p>Pues son unos cuántos gigas, mayoritariamente al estar basado en ubuntu y al que los docker de rocker/verse instalan todo el software de R recomendado, los ficheros de ayuda, las capacidades gráficas, etc..</p>
<p>Pero con r-hub/minimal podemos dejar bastante limpio el tema. Leyendo el Readme del repo vemos que han configurado una utilidad a la que llaman <code>installr</code> que permite instalar librerías del sistema o de R, instalando los compiladores de C, fortran etc que haga falta y eliminarlos una vez están compiladas la librerías.</p>
<p>Sin más, cambiamos el Dockerfile del otro día por este otro .</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;"># Docker file para modelo brms</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="ex" style="color: null;">FROM</span> rhub/r-minimal:4.2.1</span>
<span id="cb2-5"></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-d</span> <span class="at" style="color: #657422;">-a</span> linux-headers ps</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-d</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"curl-dev linux-headers gfortran libcurl libxml2 libsodium-dev libsodium automake autoconf"</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-d</span> Matrix MASS mgcv future codetools brms plumber tidybayes</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;">## Copio el modelo y el fichero de la api</span></span>
<span id="cb2-14"><span class="ex" style="color: null;">COPY</span> brms_model.rds /opt/ml/brms_model.rds</span>
<span id="cb2-15"><span class="ex" style="color: null;">COPY</span> plumber.R /opt/ml/plumber.R</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;"># exponemos el puerto</span></span>
<span id="cb2-18"><span class="ex" style="color: null;">EXPOSE</span> 8081</span>
<span id="cb2-19"><span class="ex" style="color: null;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;">"R"</span>, <span class="st" style="color: #20794D;">"-e"</span>, <span class="st" style="color: #20794D;">"pr &lt;- plumber::plumb('/opt/ml/plumber.R'); pr</span><span class="va" style="color: #111111;">$run</span><span class="st" style="color: #20794D;">(host = '0.0.0.0', port = 8081)"</span>]</span></code></pre></div>
<p>Y haciendo <code>docker build -t mi_modelo_brms_rminimal .</code> pasado un rato puesto que ha de compilar las librerías tenemos nuestra api dockerizada con la misma funcionalidad que el otro día.</p>
<p>Y con un tamaño mucho más contenido</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1">  <span class="ex" style="color: null;">╰─</span> $ ▶ docker image ls</span>
<span id="cb3-2"><span class="ex" style="color: null;">REPOSITORY</span>                    TAG                    IMAGE ID       CREATED         SIZE</span>
<span id="cb3-3"><span class="ex" style="color: null;">mi_modelo_brms_rminimal</span>       latest                 8d791d2ebc74   2 hours ago     665MB</span></code></pre></div>
<p>que se va a unos 655 mb, de los cuales unos 300 MB se deben a <code>stan</code> y <code>rstan</code>. Pero vamos, no está mal, pasar de 3.4 Gb a 665MB.</p>
<section id="actualización-usando-renv" class="level2">
<h2 class="anchored" data-anchor-id="actualización-usando-renv">Actualización, usando renv</h2>
<p>Por temas de buenas prácticas es recomendable usar <code>renv</code> para crear el archivo <code>renv.lock</code> dónde se guarda qué versión de las librerías estamos usando, y además porque usa por defecto un repo con las librerías compiladas.</p>
<p>Lo primero que hago es crearme un nuevo proyecto dónde pongo el modelo entrenado que queremos usar <code>brms_model.rds</code> que entrené en el primer post y el fichero <code>plumber.R</code> y ningún fichero más.</p>
<p>Fichero <strong>plumber.R</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># This is a Plumber API. In RStudio 1.2 or newer you can run the API by</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># clicking the 'Run API' button above.</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># In RStudio 1.1 or older, see the Plumber documentation for details</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># on running the API.</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># Find out more about building APIs with Plumber here:</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">#    https://www.rplumber.io/</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"># save as bos_rf_score.R</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="fu" style="color: #4758AB;">library</span>(brms)</span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;">library</span>(plumber)</span>
<span id="cb4-16"><span class="fu" style="color: #4758AB;">library</span>(tidybayes)</span>
<span id="cb4-17"></span>
<span id="cb4-18">brms_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>)</span>
<span id="cb4-19"></span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;">#* @apiTitle brms predict Api</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;">#* @apiDescription Endpoints for working with brms model</span></span>
<span id="cb4-23"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- filter-logger</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;">#* Log some information about the incoming request</span></span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;">#* @filter logger</span></span>
<span id="cb4-26"><span class="cf" style="color: #003B4F;">function</span>(req){</span>
<span id="cb4-27">    <span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">as.character</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>()), <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb4-28">        req<span class="sc" style="color: #5E5E5E;">$</span>REQUEST_METHOD, req<span class="sc" style="color: #5E5E5E;">$</span>PATH_INFO, <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb4-29">        req<span class="sc" style="color: #5E5E5E;">$</span>HTTP_USER_AGENT, <span class="st" style="color: #20794D;">"@"</span>, req<span class="sc" style="color: #5E5E5E;">$</span>REMOTE_ADDR, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb4-30">    <span class="fu" style="color: #4758AB;">forward</span>()</span>
<span id="cb4-31">}</span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- post-data</span></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;">#* Submit data and get a prediction in return</span></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;">#* @post /predict</span></span>
<span id="cb4-36"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb4-37">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb4-38">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb4-39">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb4-40">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb4-41">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb4-42">    }</span>
<span id="cb4-43">    </span>
<span id="cb4-44">    <span class="fu" style="color: #4758AB;">predict</span>(brms_model, data) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-45">        <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb4-46">}</span>
<span id="cb4-47"></span>
<span id="cb4-48"></span>
<span id="cb4-49"><span class="co" style="color: #5E5E5E;">#* @post /full_posterior</span></span>
<span id="cb4-50"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb4-51">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb4-52">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb4-53">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb4-54">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb4-55">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb4-56">    }</span>
<span id="cb4-57">    </span>
<span id="cb4-58">    <span class="fu" style="color: #4758AB;">add_epred_draws</span>(data, brms_model) </span>
<span id="cb4-59">    </span>
<span id="cb4-60">}</span></code></pre></div>
</div>
<p>A continuación activo <code>renv</code> en el proyecto</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"> renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">activate</span>()</span>
<span id="cb5-2"><span class="sc" style="color: #5E5E5E;">*</span> Project <span class="st" style="color: #20794D;">'~/Rstudio_projects/r-api-minimal'</span> loaded. [renv <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">16.0</span>]</span></code></pre></div>
</div>
<p>Una vez que está activado y el fichero plumber.R está creado en el directorio uso <code>hydrate</code> para que encuentre qué librerías se usan en el proyecto</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="sc" style="color: #5E5E5E;">&gt;</span> renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hydrate</span>()</span>
<span id="cb6-2"><span class="sc" style="color: #5E5E5E;">*</span> Discovering package dependencies ... Done<span class="sc" style="color: #5E5E5E;">!</span></span>
<span id="cb6-3"><span class="er" style="color: #AD0000;">*</span> Copying packages into the cache ... Done<span class="sc" style="color: #5E5E5E;">!</span></span></code></pre></div>
</div>
<p>y ya podemos crear el fichero <code>renv::snapshot()</code>, donde pone todas las librerías que se van a instalar y si vienen de CRAN , de GitHub o de RSPM(rstudio package manager)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">renv<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">snapshot</span>()</span>
<span id="cb7-2">The following <span class="fu" style="color: #4758AB;">package</span>(s) will be updated <span class="cf" style="color: #003B4F;">in</span> the lockfile<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># CRAN ===============================</span></span>
<span id="cb7-5"><span class="sc" style="color: #5E5E5E;">-</span> Matrix           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.5</span><span class="dv" style="color: #AD0000;">-1</span>]</span>
<span id="cb7-6"><span class="sc" style="color: #5E5E5E;">-</span> R6               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">5.1</span>]</span>
<span id="cb7-7"><span class="sc" style="color: #5E5E5E;">-</span> RColorBrewer     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-8"><span class="sc" style="color: #5E5E5E;">-</span> Rcpp             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.9</span>]</span>
<span id="cb7-9"><span class="sc" style="color: #5E5E5E;">-</span> base64enc        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.1</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-10"><span class="sc" style="color: #5E5E5E;">-</span> bslib            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.0</span>]</span>
<span id="cb7-11"><span class="sc" style="color: #5E5E5E;">-</span> cachem           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.6</span>]</span>
<span id="cb7-12"><span class="sc" style="color: #5E5E5E;">-</span> codetools        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.2</span><span class="dv" style="color: #AD0000;">-18</span>]</span>
<span id="cb7-13"><span class="sc" style="color: #5E5E5E;">-</span> colorspace       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">2.0</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-14"><span class="sc" style="color: #5E5E5E;">-</span> ellipsis         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.2</span>]</span>
<span id="cb7-15"><span class="sc" style="color: #5E5E5E;">-</span> fansi            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-16"><span class="sc" style="color: #5E5E5E;">-</span> farver           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-17"><span class="sc" style="color: #5E5E5E;">-</span> fastmap          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb7-18"><span class="sc" style="color: #5E5E5E;">-</span> generics         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">1.3</span>]</span>
<span id="cb7-19"><span class="sc" style="color: #5E5E5E;">-</span> ggplot2          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">3.6</span>]</span>
<span id="cb7-20"><span class="sc" style="color: #5E5E5E;">-</span> htmltools        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">5.3</span>]</span>
<span id="cb7-21"><span class="sc" style="color: #5E5E5E;">-</span> jquerylib        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">1.4</span>]</span>
<span id="cb7-22"><span class="sc" style="color: #5E5E5E;">-</span> labeling         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-23"><span class="sc" style="color: #5E5E5E;">-</span> lattice          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.20</span><span class="dv" style="color: #AD0000;">-45</span>]</span>
<span id="cb7-24"><span class="sc" style="color: #5E5E5E;">-</span> lifecycle        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-25"><span class="sc" style="color: #5E5E5E;">-</span> magrittr         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-26"><span class="sc" style="color: #5E5E5E;">-</span> memoise          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.1</span>]</span>
<span id="cb7-27"><span class="sc" style="color: #5E5E5E;">-</span> mgcv             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.8</span><span class="dv" style="color: #AD0000;">-40</span>]</span>
<span id="cb7-28"><span class="sc" style="color: #5E5E5E;">-</span> mime             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.12</span>]</span>
<span id="cb7-29"><span class="sc" style="color: #5E5E5E;">-</span> munsell          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">5.0</span>]</span>
<span id="cb7-30"><span class="sc" style="color: #5E5E5E;">-</span> pkgconfig        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-31"><span class="sc" style="color: #5E5E5E;">-</span> prettyunits      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-32"><span class="sc" style="color: #5E5E5E;">-</span> processx         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">7.0</span>]</span>
<span id="cb7-33"><span class="sc" style="color: #5E5E5E;">-</span> ps               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">7.1</span>]</span>
<span id="cb7-34"><span class="sc" style="color: #5E5E5E;">-</span> rappdirs         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-35"><span class="sc" style="color: #5E5E5E;">-</span> rprojroot        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.3</span>]</span>
<span id="cb7-36"><span class="sc" style="color: #5E5E5E;">-</span> sass             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-37"><span class="sc" style="color: #5E5E5E;">-</span> stringi          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">7.8</span>]</span>
<span id="cb7-38"><span class="sc" style="color: #5E5E5E;">-</span> tibble           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">1.8</span>]</span>
<span id="cb7-39"><span class="sc" style="color: #5E5E5E;">-</span> utf8             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.2</span>]</span>
<span id="cb7-40"><span class="sc" style="color: #5E5E5E;">-</span> withr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">5.0</span>]</span>
<span id="cb7-41"></span>
<span id="cb7-42"><span class="co" style="color: #5E5E5E;"># GitHub =============================</span></span>
<span id="cb7-43"><span class="sc" style="color: #5E5E5E;">-</span> glue             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> jimhester<span class="sc" style="color: #5E5E5E;">/</span>fstrings<span class="sc" style="color: #5E5E5E;">@</span>HEAD]</span>
<span id="cb7-44"></span>
<span id="cb7-45"><span class="co" style="color: #5E5E5E;"># RSPM ===============================</span></span>
<span id="cb7-46"><span class="sc" style="color: #5E5E5E;">-</span> BH               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">78.0</span><span class="dv" style="color: #AD0000;">-0</span>]</span>
<span id="cb7-47"><span class="sc" style="color: #5E5E5E;">-</span> Brobdingnag      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.2</span><span class="dv" style="color: #AD0000;">-9</span>]</span>
<span id="cb7-48"><span class="sc" style="color: #5E5E5E;">-</span> DT               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.26</span>]</span>
<span id="cb7-49"><span class="sc" style="color: #5E5E5E;">-</span> HDInterval       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">2.2</span>]</span>
<span id="cb7-50"><span class="sc" style="color: #5E5E5E;">-</span> MASS             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">7.3-58.1</span>]</span>
<span id="cb7-51"><span class="sc" style="color: #5E5E5E;">-</span> RcppEigen        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">3</span>.<span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">9.2</span>]</span>
<span id="cb7-52"><span class="sc" style="color: #5E5E5E;">-</span> RcppParallel     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">5</span>.<span class="fl" style="color: #AD0000;">1.5</span>]</span>
<span id="cb7-53"><span class="sc" style="color: #5E5E5E;">-</span> StanHeaders      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">21.0</span><span class="dv" style="color: #AD0000;">-7</span>]</span>
<span id="cb7-54"><span class="sc" style="color: #5E5E5E;">-</span> abind            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.4</span><span class="dv" style="color: #AD0000;">-5</span>]</span>
<span id="cb7-55"><span class="sc" style="color: #5E5E5E;">-</span> arrayhelpers     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-0</span>]</span>
<span id="cb7-56"><span class="sc" style="color: #5E5E5E;">-</span> backports        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-57"><span class="sc" style="color: #5E5E5E;">-</span> bayesplot        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">9.0</span>]</span>
<span id="cb7-58"><span class="sc" style="color: #5E5E5E;">-</span> bridgesampling   [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-2</span>]</span>
<span id="cb7-59"><span class="sc" style="color: #5E5E5E;">-</span> brms             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">18.0</span>]</span>
<span id="cb7-60"><span class="sc" style="color: #5E5E5E;">-</span> callr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">7.2</span>]</span>
<span id="cb7-61"><span class="sc" style="color: #5E5E5E;">-</span> checkmate        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb7-62"><span class="sc" style="color: #5E5E5E;">-</span> cli              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-63"><span class="sc" style="color: #5E5E5E;">-</span> coda             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.19</span><span class="dv" style="color: #AD0000;">-4</span>]</span>
<span id="cb7-64"><span class="sc" style="color: #5E5E5E;">-</span> colourpicker     [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-65"><span class="sc" style="color: #5E5E5E;">-</span> commonmark       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.1</span>]</span>
<span id="cb7-66"><span class="sc" style="color: #5E5E5E;">-</span> cpp11            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.3</span>]</span>
<span id="cb7-67"><span class="sc" style="color: #5E5E5E;">-</span> crayon           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">5.2</span>]</span>
<span id="cb7-68"><span class="sc" style="color: #5E5E5E;">-</span> crosstalk        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-69"><span class="sc" style="color: #5E5E5E;">-</span> curl             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">4</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-70"><span class="sc" style="color: #5E5E5E;">-</span> desc             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-71"><span class="sc" style="color: #5E5E5E;">-</span> digest           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">6.30</span>]</span>
<span id="cb7-72"><span class="sc" style="color: #5E5E5E;">-</span> distributional   [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-73"><span class="sc" style="color: #5E5E5E;">-</span> dplyr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.10</span>]</span>
<span id="cb7-74"><span class="sc" style="color: #5E5E5E;">-</span> dygraphs         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.6</span>]</span>
<span id="cb7-75"><span class="sc" style="color: #5E5E5E;">-</span> fontawesome      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.0</span>]</span>
<span id="cb7-76"><span class="sc" style="color: #5E5E5E;">-</span> fs               [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">5.2</span>]</span>
<span id="cb7-77"><span class="sc" style="color: #5E5E5E;">-</span> future           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">28.0</span>]</span>
<span id="cb7-78"><span class="sc" style="color: #5E5E5E;">-</span> ggdist           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-79"><span class="sc" style="color: #5E5E5E;">-</span> ggridges         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">5.4</span>]</span>
<span id="cb7-80"><span class="sc" style="color: #5E5E5E;">-</span> globals          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">16.1</span>]</span>
<span id="cb7-81"><span class="sc" style="color: #5E5E5E;">-</span> gridExtra        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">2.3</span>]</span>
<span id="cb7-82"><span class="sc" style="color: #5E5E5E;">-</span> gtable           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-83"><span class="sc" style="color: #5E5E5E;">-</span> gtools           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">9.3</span>]</span>
<span id="cb7-84"><span class="sc" style="color: #5E5E5E;">-</span> htmlwidgets      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">5.4</span>]</span>
<span id="cb7-85"><span class="sc" style="color: #5E5E5E;">-</span> httpuv           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">6.6</span>]</span>
<span id="cb7-86"><span class="sc" style="color: #5E5E5E;">-</span> igraph           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.5</span>]</span>
<span id="cb7-87"><span class="sc" style="color: #5E5E5E;">-</span> inline           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.19</span>]</span>
<span id="cb7-88"><span class="sc" style="color: #5E5E5E;">-</span> isoband          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">2.6</span>]</span>
<span id="cb7-89"><span class="sc" style="color: #5E5E5E;">-</span> jsonlite         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.2</span>]</span>
<span id="cb7-90"><span class="sc" style="color: #5E5E5E;">-</span> later            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.0</span>]</span>
<span id="cb7-91"><span class="sc" style="color: #5E5E5E;">-</span> lazyeval         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">2.2</span>]</span>
<span id="cb7-92"><span class="sc" style="color: #5E5E5E;">-</span> listenv          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">8.0</span>]</span>
<span id="cb7-93"><span class="sc" style="color: #5E5E5E;">-</span> loo              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">5.1</span>]</span>
<span id="cb7-94"><span class="sc" style="color: #5E5E5E;">-</span> markdown         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.2</span>]</span>
<span id="cb7-95"><span class="sc" style="color: #5E5E5E;">-</span> matrixStats      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">62.0</span>]</span>
<span id="cb7-96"><span class="sc" style="color: #5E5E5E;">-</span> miniUI           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-97"><span class="sc" style="color: #5E5E5E;">-</span> mvtnorm          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span><span class="dv" style="color: #AD0000;">-3</span>]</span>
<span id="cb7-98"><span class="sc" style="color: #5E5E5E;">-</span> nleqslv          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-99"><span class="sc" style="color: #5E5E5E;">-</span> nlme             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">3.1</span><span class="dv" style="color: #AD0000;">-160</span>]</span>
<span id="cb7-100"><span class="sc" style="color: #5E5E5E;">-</span> numDeriv         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">2016.8-1.1</span>]</span>
<span id="cb7-101"><span class="sc" style="color: #5E5E5E;">-</span> parallelly       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">32.1</span>]</span>
<span id="cb7-102"><span class="sc" style="color: #5E5E5E;">-</span> pillar           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.1</span>]</span>
<span id="cb7-103"><span class="sc" style="color: #5E5E5E;">-</span> pkgbuild         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-104"><span class="sc" style="color: #5E5E5E;">-</span> plumber          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-105"><span class="sc" style="color: #5E5E5E;">-</span> plyr             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">8.7</span>]</span>
<span id="cb7-106"><span class="sc" style="color: #5E5E5E;">-</span> posterior        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">3.1</span>]</span>
<span id="cb7-107"><span class="sc" style="color: #5E5E5E;">-</span> promises         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.1</span>]</span>
<span id="cb7-108"><span class="sc" style="color: #5E5E5E;">-</span> purrr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.5</span>]</span>
<span id="cb7-109"><span class="sc" style="color: #5E5E5E;">-</span> renv             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">16.0</span>]</span>
<span id="cb7-110"><span class="sc" style="color: #5E5E5E;">-</span> reshape2         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.4</span>]</span>
<span id="cb7-111"><span class="sc" style="color: #5E5E5E;">-</span> rlang            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.6</span>]</span>
<span id="cb7-112"><span class="sc" style="color: #5E5E5E;">-</span> rstan            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">21.7</span>]</span>
<span id="cb7-113"><span class="sc" style="color: #5E5E5E;">-</span> rstantools       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-114"><span class="sc" style="color: #5E5E5E;">-</span> scales           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-115"><span class="sc" style="color: #5E5E5E;">-</span> shiny            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">7.2</span>]</span>
<span id="cb7-116"><span class="sc" style="color: #5E5E5E;">-</span> shinyjs          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">1.0</span>]</span>
<span id="cb7-117"><span class="sc" style="color: #5E5E5E;">-</span> shinystan        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">6.0</span>]</span>
<span id="cb7-118"><span class="sc" style="color: #5E5E5E;">-</span> shinythemes      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-119"><span class="sc" style="color: #5E5E5E;">-</span> sodium           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-120"><span class="sc" style="color: #5E5E5E;">-</span> sourcetools      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">1.7</span>]</span>
<span id="cb7-121"><span class="sc" style="color: #5E5E5E;">-</span> stringr          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-122"><span class="sc" style="color: #5E5E5E;">-</span> svUnit           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">0.6</span>]</span>
<span id="cb7-123"><span class="sc" style="color: #5E5E5E;">-</span> swagger          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">33.1</span>]</span>
<span id="cb7-124"><span class="sc" style="color: #5E5E5E;">-</span> tensorA          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">36.2</span>]</span>
<span id="cb7-125"><span class="sc" style="color: #5E5E5E;">-</span> threejs          [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">3.3</span>]</span>
<span id="cb7-126"><span class="sc" style="color: #5E5E5E;">-</span> tidybayes        [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">0.2</span>]</span>
<span id="cb7-127"><span class="sc" style="color: #5E5E5E;">-</span> tidyr            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-128"><span class="sc" style="color: #5E5E5E;">-</span> tidyselect       [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.0</span>]</span>
<span id="cb7-129"><span class="sc" style="color: #5E5E5E;">-</span> vctrs            [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.2</span>]</span>
<span id="cb7-130"><span class="sc" style="color: #5E5E5E;">-</span> viridisLite      [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">4.1</span>]</span>
<span id="cb7-131"><span class="sc" style="color: #5E5E5E;">-</span> webutils         [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.1</span>]</span>
<span id="cb7-132"><span class="sc" style="color: #5E5E5E;">-</span> xfun             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">0.34</span>]</span>
<span id="cb7-133"><span class="sc" style="color: #5E5E5E;">-</span> xtable           [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.8</span><span class="dv" style="color: #AD0000;">-4</span>]</span>
<span id="cb7-134"><span class="sc" style="color: #5E5E5E;">-</span> xts              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">0</span>.<span class="fl" style="color: #AD0000;">12.2</span>]</span>
<span id="cb7-135"><span class="sc" style="color: #5E5E5E;">-</span> yaml             [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">3.6</span>]</span>
<span id="cb7-136"><span class="sc" style="color: #5E5E5E;">-</span> zoo              [<span class="sc" style="color: #5E5E5E;">*</span> <span class="ot" style="color: #003B4F;">-&gt;</span> <span class="fl" style="color: #AD0000;">1.8</span><span class="dv" style="color: #AD0000;">-11</span>]</span>
<span id="cb7-137"></span>
<span id="cb7-138">The version of R recorded <span class="cf" style="color: #003B4F;">in</span> the lockfile will be updated<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb7-139"><span class="sc" style="color: #5E5E5E;">-</span> R                [<span class="sc" style="color: #5E5E5E;">*</span>] <span class="ot" style="color: #003B4F;">-&gt;</span> [<span class="dv" style="color: #AD0000;">4</span>.<span class="fl" style="color: #AD0000;">2.1</span>]</span>
<span id="cb7-140"></span>
<span id="cb7-141">Do you want to proceed? [y<span class="sc" style="color: #5E5E5E;">/</span>N]<span class="sc" style="color: #5E5E5E;">:</span> y</span>
<span id="cb7-142"><span class="sc" style="color: #5E5E5E;">*</span> Lockfile written to <span class="st" style="color: #20794D;">'~/Rstudio_projects/r-api-minimal/renv.lock'</span>.</span></code></pre></div>
</div>
<p>Y ya sólo queda crear el Dockerfile usando como base r-hub/minimal</p>
<p><strong>Dockerfile</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Docker file para modelo brms</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="ex" style="color: null;">FROM</span> rhub/r-minimal:4.2.1</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;"># copio fichero de las librerías</span></span>
<span id="cb8-6"><span class="ex" style="color: null;">COPY</span> renv.lock renv.lock</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;"># uso -c para que se queden instaladas los compiladores de c y fortran</span></span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-c</span> <span class="at" style="color: #657422;">-a</span> <span class="st" style="color: #20794D;">"curl-dev linux-headers gfortran libcurl libxml2 libsodium-dev libsodium automake autoconf"</span></span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;">#instalo renv</span></span>
<span id="cb8-13"><span class="ex" style="color: null;">RUN</span> installr <span class="at" style="color: #657422;">-c</span> renv</span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;"># uso renv para instlar la versión de las librerías que hay en renv.lock</span></span>
<span id="cb8-16"><span class="ex" style="color: null;">RUN</span> Rscript <span class="at" style="color: #657422;">-e</span> <span class="st" style="color: #20794D;">"renv::restore()"</span></span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;">## Copio el modelo y el fichero de la api</span></span>
<span id="cb8-19"><span class="ex" style="color: null;">COPY</span> brms_model.rds /opt/ml/brms_model.rds</span>
<span id="cb8-20"><span class="ex" style="color: null;">COPY</span> plumber.R /opt/ml/plumber.R</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;"># exponemos el puerto</span></span>
<span id="cb8-23"><span class="ex" style="color: null;">EXPOSE</span> 8081</span>
<span id="cb8-24"><span class="ex" style="color: null;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;">"R"</span>, <span class="st" style="color: #20794D;">"-e"</span>, <span class="st" style="color: #20794D;">"pr &lt;- plumber::plumb('/opt/ml/plumber.R'); pr</span><span class="va" style="color: #111111;">$run</span><span class="st" style="color: #20794D;">(host = '0.0.0.0', port = 8081)"</span>]</span></code></pre></div>
<p>y como antes construimos el docker image</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">docker</span> build <span class="at" style="color: #657422;">-t</span> mi_modelo_brms_rminimal_renv .</span></code></pre></div>
<p>El docker usando renv es sustancialmente más pesado, ocupa 1.29 Gb</p>
<p>Seguramente se puede optimizar más si no usara <code>brms</code>, puesto que importa shinystan, bayesplot y otras librerías que no son estrictamente necesarias para nuestro propósito. Habrá que esperar a que <a href="https://twitter.com/precariobecario">Virgilio</a> haga la función predict de INLA para darle una vuelta a esto</p>


</section>

 ]]></description>
  <category>api</category>
  <category>docker</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/30/api-y-docker-con-r-parte-2.html</guid>
  <pubDate>Sat, 29 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Leaflet example</title>
  <dc:creator>José Luis Cañadas Reche</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/leaflet_ejemplo/index.html</link>
  <description><![CDATA[ 



<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(leaflet)</span>
<span id="cb1-2"></span>
<span id="cb1-3">m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">leaflet</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">addTiles</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span>  <span class="co" style="color: #5E5E5E;"># Add default OpenStreetMap map tiles</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">addMarkers</span>(<span class="at" style="color: #657422;">lng=</span><span class="fl" style="color: #AD0000;">174.768</span>, <span class="at" style="color: #657422;">lat=</span><span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">36.852</span>, <span class="at" style="color: #657422;">popup=</span><span class="st" style="color: #20794D;">"The birthplace of R"</span>)</span>
<span id="cb1-6">m  <span class="co" style="color: #5E5E5E;"># Print the map</span></span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-fa2db32acb8c0b5b229d" style="width:100%;height:464px;" class="leaflet html-widget"></div>
<script type="application/json" data-for="htmlwidget-fa2db32acb8c0b5b229d">{"x":{"options":{"crs":{"crsClass":"L.CRS.EPSG3857","code":null,"proj4def":null,"projectedBounds":null,"options":{}}},"calls":[{"method":"addTiles","args":["https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",null,null,{"minZoom":0,"maxZoom":18,"tileSize":256,"subdomains":"abc","errorTileUrl":"","tms":false,"noWrap":false,"zoomOffset":0,"zoomReverse":false,"opacity":1,"zIndex":1,"detectRetina":false,"attribution":"&copy; <a href=\"https://openstreetmap.org\">OpenStreetMap<\/a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA<\/a>"}]},{"method":"addMarkers","args":[-36.852,174.768,null,null,null,{"interactive":true,"draggable":false,"keyboard":true,"title":"","alt":"","zIndexOffset":0,"opacity":1,"riseOnHover":false,"riseOffset":250},"The birthplace of R",null,null,null,null,{"interactive":false,"permanent":false,"direction":"auto","opacity":1,"offset":[0,0],"textsize":"10px","textOnly":false,"className":"","sticky":true},null]}],"limits":{"lat":[-36.852,-36.852],"lng":[174.768,174.768]}},"evals":[],"jsHooks":[]}</script>
</div>
</div>



 ]]></description>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/leaflet_ejemplo/index.html</guid>
  <pubDate>Fri, 28 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Aquí estoy de nuevo</title>
  <dc:creator>José Luis Cañadas Reche</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>Estoy cambiando el blog de blogdown a quarto Welcome!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="thumbnail.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/thumbnail.jpg" class="img-fluid figure-img"></a></p>
</figure>
</div>



 ]]></description>
  <category>news</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/index.html</guid>
  <pubDate>Wed, 26 Oct 2022 22:00:00 GMT</pubDate>
  <media:content url="https://muestrear-no-es-pecado-rebranding.netlify.app/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Sigo trasteando con julia</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/26/sigo-trasteando-con-julia/index.html</link>
  <description><![CDATA[ 




<p>Siguiendo con lo que contaba <a href="https://muestrear-no-es-pecado.netlify.app/2021/08/16/palabras-para-julia-parte-2-n/">aquí</a> me he construido un binario para predecir usando un modelo de xgboost con Julia. La ventaja es que tengo un tar.gz que puedo descomprimir en cualquier linux (por ejemplo un entorno de producción sin acceso a internet y que no tenga ni vaya a tener julia instalado, ni docker ni nada de nada), descomprimir y poder hacer un <code>miapp_para_predecir mi_modelo_entrenado.jls csv_to_predict.csv resultado.csv</code> y que funcione y vaya como un tiro.</p>
<p>Pongo aquí los ficheros relevantes.</p>
<p>Por ejemplo mi fichero para entrenar un modelo y salvarlo .</p>
<p>Fichero <code>train_ boston.jl</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Training model julia</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">using</span>  <span class="bu" style="color: null;">CSV</span>,<span class="bu" style="color: null;">CategoricalArrays</span>, <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">MLJ</span>, <span class="bu" style="color: null;">MLJXGBoostInterface</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">df1 <span class="op" style="color: #5E5E5E;">=</span> CSV.<span class="fu" style="color: #4758AB;">read</span>(<span class="st" style="color: #20794D;">"data/boston.csv"</span>, DataFrame)</span>
<span id="cb1-6"></span>
<span id="cb1-7">df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="op" style="color: #5E5E5E;">:</span>target] <span class="op" style="color: #5E5E5E;">.=</span> <span class="fu" style="color: #4758AB;">ifelse</span>.(df1[!, <span class="op" style="color: #5E5E5E;">:</span>medv_20]<span class="op" style="color: #5E5E5E;">.==</span> <span class="st" style="color: #20794D;">"NG20"</span>, <span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;">const</span> target <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">CategoricalArray</span>(df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="op" style="color: #5E5E5E;">:</span>target])</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;">const</span> X <span class="op" style="color: #5E5E5E;">=</span> df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="fu" style="color: #4758AB;">Not</span>([<span class="op" style="color: #5E5E5E;">:</span>medv_20, <span class="op" style="color: #5E5E5E;">:</span>target])]</span>
<span id="cb1-11"></span>
<span id="cb1-12">Tree <span class="op" style="color: #5E5E5E;">=</span> <span class="pp" style="color: #AD0000;">@load</span> XGBoostClassifier pkg<span class="op" style="color: #5E5E5E;">=</span>XGBoost</span>
<span id="cb1-13">tree_model <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">Tree</span>(objective<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"binary:logistic"</span>, max_depth <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">6</span>, num_round <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">800</span>)</span>
<span id="cb1-14">mach <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">machine</span>(tree_model, X, target)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="bu" style="color: null;">Threads</span>.<span class="fu" style="color: #4758AB;">nthreads</span>()</span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;">evaluate</span>(tree_model, X, target, resampling<span class="op" style="color: #5E5E5E;">=</span><span class="fu" style="color: #4758AB;">CV</span>(shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>),measure<span class="op" style="color: #5E5E5E;">=</span>log_loss, verbosity<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">evaluate</span>(tree_model, X, target,</span>
<span id="cb1-19">                resampling<span class="op" style="color: #5E5E5E;">=</span><span class="fu" style="color: #4758AB;">CV</span>(shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>), measure<span class="op" style="color: #5E5E5E;">=</span>bac, operation<span class="op" style="color: #5E5E5E;">=</span>predict_mode, verbosity<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23">train, test <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">partition</span>(<span class="fu" style="color: #4758AB;">eachindex</span>(target), <span class="fl" style="color: #AD0000;">0.7</span>, shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>)</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="fu" style="color: #4758AB;">fit!</span>(mach, rows<span class="op" style="color: #5E5E5E;">=</span>train)</span>
<span id="cb1-26"></span>
<span id="cb1-27">yhat <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">predict</span>(mach, X[test,<span class="op" style="color: #5E5E5E;">:</span>])</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="fu" style="color: #4758AB;">evaluate</span>(tree_model, X[test,<span class="op" style="color: #5E5E5E;">:</span>], target[test], measure<span class="op" style="color: #5E5E5E;">=</span>auc, operation<span class="op" style="color: #5E5E5E;">=</span>predict_mode, verbosity<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0</span>)</span>
<span id="cb1-30"></span>
<span id="cb1-31">niveles <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">levels</span>.(yhat)[<span class="fl" style="color: #AD0000;">1</span>]</span>
<span id="cb1-32">niveles[<span class="fl" style="color: #AD0000;">1</span>]</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="fu" style="color: #4758AB;">log_loss</span>(yhat, target[test]) <span class="op" style="color: #5E5E5E;">|&gt;</span> mean</span>
<span id="cb1-35"></span>
<span id="cb1-36">res <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">pdf</span>(yhat, niveles)</span>
<span id="cb1-37">res_df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(res,<span class="op" style="color: #5E5E5E;">:</span>auto)</span>
<span id="cb1-38"></span>
<span id="cb1-39">MLJ.<span class="fu" style="color: #4758AB;">save</span>(<span class="st" style="color: #20794D;">"models/boston_xg.jls"</span>, mach)</span></code></pre></div>
<p>Y luego los ficheros que uso para construirme la app binaria .. Recordemos del <a href="https://muestrear-no-es-pecado.netlify.app/2021/08/16/palabras-para-julia-parte-2-n/">post que mencionaba</a> que lo que necesito es el código del programa principal (el main) y un fichero de precompilación que sirve para que al crear la app se compilen las funciones que voy a usar.</p>
<p>fichero <code>precomp.jl</code>,</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span>, <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">MLJ</span>, <span class="bu" style="color: null;">MLJBase</span>, <span class="bu" style="color: null;">MLJXGBoostInterface</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># uso rutas absolutas</span></span>
<span id="cb2-4">df1 <span class="op" style="color: #5E5E5E;">=</span> CSV.<span class="fu" style="color: #4758AB;">read</span>(<span class="st" style="color: #20794D;">"data/iris.csv"</span>, DataFrame)</span>
<span id="cb2-5">X <span class="op" style="color: #5E5E5E;">=</span> df1[<span class="op" style="color: #5E5E5E;">:</span>, <span class="fu" style="color: #4758AB;">Not</span>(<span class="op" style="color: #5E5E5E;">:</span>Species)]</span>
<span id="cb2-6"></span>
<span id="cb2-7">predict_only_mach <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">machine</span>(<span class="st" style="color: #20794D;">"models/mimodelo_xg_binario.jls"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9">ŷ <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">predict</span>(predict_only_mach, X) </span>
<span id="cb2-10"></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;">predict_mode</span>(predict_only_mach, X)</span>
<span id="cb2-13"></span>
<span id="cb2-14">niveles <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">levels</span>.(ŷ)[<span class="fl" style="color: #AD0000;">1</span>]</span>
<span id="cb2-15"></span>
<span id="cb2-16">res <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">pdf</span>(ŷ, niveles) <span class="co" style="color: #5E5E5E;"># con pdf nos da la probabilidad de cada nivel</span></span>
<span id="cb2-17">res_df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(res,<span class="op" style="color: #5E5E5E;">:</span>auto)</span>
<span id="cb2-18"><span class="fu" style="color: #4758AB;">rename!</span>(res_df, [<span class="st" style="color: #20794D;">"target_0"</span>, <span class="st" style="color: #20794D;">"target_1"</span>])</span>
<span id="cb2-19"></span>
<span id="cb2-20">CSV.<span class="fu" style="color: #4758AB;">write</span>(<span class="st" style="color: #20794D;">"data/predicciones.csv"</span>, res_df)</span></code></pre></div>
<p>fichero <code>xgboost_predict_binomial.jl</code> , aquí es dónde está el main</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="kw" style="color: #003B4F;">module</span> xgboost_predict_binomial</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span>, <span class="bu" style="color: null;">DataFrames</span>, <span class="bu" style="color: null;">MLJ</span>, <span class="bu" style="color: null;">MLJBase</span>, <span class="bu" style="color: null;">MLJXGBoostInterface</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">julia_main</span>()<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Cint</span></span>
<span id="cb3-6">    try</span>
<span id="cb3-7">        <span class="fu" style="color: #4758AB;">real_main</span>()</span>
<span id="cb3-8">    catch</span>
<span id="cb3-9">        <span class="bu" style="color: null;">Base</span>.<span class="fu" style="color: #4758AB;">invokelatest</span>(<span class="bu" style="color: null;">Base</span>.display_error, <span class="bu" style="color: null;">Base</span>.<span class="fu" style="color: #4758AB;">catch_stack</span>())</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">1</span></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">0</span></span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;"># ARGS son los argumentos pasados por consola </span></span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">real_main</span>()</span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;">if</span> <span class="fu" style="color: #4758AB;">length</span>(<span class="cn" style="color: #8f5902;">ARGS</span>) <span class="op" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">0</span></span>
<span id="cb3-19">        <span class="fu" style="color: #4758AB;">error</span>(<span class="st" style="color: #20794D;">"pass arguments"</span>)</span>
<span id="cb3-20">    <span class="cf" style="color: #003B4F;">end</span></span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;"># Read model</span></span>
<span id="cb3-23">    modelo <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">machine</span>(<span class="cn" style="color: #8f5902;">ARGS</span>[<span class="fl" style="color: #AD0000;">1</span>])</span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;"># read data. El fichero qeu pasemos tiene que tener solo las X.(con su nombre)</span></span>
<span id="cb3-25">    X <span class="op" style="color: #5E5E5E;">=</span> CSV.<span class="fu" style="color: #4758AB;">read</span>(<span class="cn" style="color: #8f5902;">ARGS</span>[<span class="fl" style="color: #AD0000;">2</span>], DataFrame, ntasks<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">Sys</span>.<span class="cn" style="color: #8f5902;">CPU_THREADS</span>)</span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;"># Predict    </span></span>
<span id="cb3-27">    ŷ <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">predict</span>(modelo, X)            <span class="co" style="color: #5E5E5E;"># predict</span></span>
<span id="cb3-28">    niveles <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">levels</span>.(ŷ)[<span class="fl" style="color: #AD0000;">1</span>]           <span class="co" style="color: #5E5E5E;"># get levels of target</span></span>
<span id="cb3-29">    res <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">pdf</span>(ŷ, niveles)             <span class="co" style="color: #5E5E5E;"># predict probabilities for each level</span></span>
<span id="cb3-30">    </span>
<span id="cb3-31">    res_df <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(res,<span class="op" style="color: #5E5E5E;">:</span>auto)     <span class="co" style="color: #5E5E5E;"># convert to DataFrame</span></span>
<span id="cb3-32">    <span class="fu" style="color: #4758AB;">rename!</span>(res_df, [<span class="st" style="color: #20794D;">"target_0"</span>, <span class="st" style="color: #20794D;">"target_1"</span>])          <span class="co" style="color: #5E5E5E;"># Column rename</span></span>
<span id="cb3-33">    CSV.<span class="fu" style="color: #4758AB;">write</span>(<span class="cn" style="color: #8f5902;">ARGS</span>[<span class="fl" style="color: #AD0000;">3</span>], res_df)        <span class="co" style="color: #5E5E5E;"># Write in csv</span></span>
<span id="cb3-34"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-35"></span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="kw" style="color: #003B4F;">end</span> <span class="co" style="color: #5E5E5E;"># module</span></span></code></pre></div>
<p>y si todo está correcto y siguiendo las instrucciones del post anterior, se compilaría haciendo por ejemplo esto</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">PackageCompiler</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">create_app</span>(<span class="st" style="color: #20794D;">"../xgboost_predict_binomial"</span>, <span class="st" style="color: #20794D;">"../xg_binomial_inference"</span>,</span>
<span id="cb4-3"> precompile_execution_file<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"../xgboost_predict_binomial/src/precomp_file.jl"</span>, force<span class="op" style="color: #5E5E5E;">=</span><span class="cn" style="color: #8f5902;">true</span>, filter_stdlibs <span class="op" style="color: #5E5E5E;">=</span> <span class="cn" style="color: #8f5902;">true</span>, cpu_target <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"x86_64"</span>)</span></code></pre></div>
<p>Y esto me crea una estructura de directorios dónde está mi app y todo lo necesario para ejecutar julia en cualqueir linux.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"></span>
<span id="cb5-2"><span class="ex" style="color: null;">╰─</span> $ ▶ tree <span class="at" style="color: #657422;">-L</span> 2 xg_binomial_inference</span>
<span id="cb5-3"><span class="ex" style="color: null;">xg_binomial_inference</span></span>
<span id="cb5-4"><span class="ex" style="color: null;">├──</span> bin</span>
<span id="cb5-5"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── julia</span>
<span id="cb5-6"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> └── xgboost_predict_binomial</span>
<span id="cb5-7"><span class="ex" style="color: null;">├──</span> lib</span>
<span id="cb5-8"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── julia</span>
<span id="cb5-9"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── libjulia.so <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> libjulia.so.1.8</span>
<span id="cb5-10"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> ├── libjulia.so.1 <span class="at" style="color: #657422;">-</span><span class="op" style="color: #5E5E5E;">&gt;</span> libjulia.so.1.8</span>
<span id="cb5-11"><span class="ex" style="color: null;">│&nbsp;&nbsp;</span> └── libjulia.so.1.8</span>
<span id="cb5-12"><span class="ex" style="color: null;">└──</span> share</span>
<span id="cb5-13">    <span class="ex" style="color: null;">└──</span> julia</span></code></pre></div>
<p>y poner por ejemplo en el <code>.bashrc</code> el siguiente alias.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="bu" style="color: null;">alias</span> motor_xgboost=/home/jose/Julia_projects/xgboost_model/xg_binomial_inference/bin/xgboost_predict_binomial</span></code></pre></div>
<p>y ya está listo.</p>
<p>Ahora tengo un dataset a predecir de 5 millones de filas</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"></span>
<span id="cb7-2"><span class="ex" style="color: null;">╰─</span> $ ▶ wc <span class="at" style="color: #657422;">-l</span> data/test.csv </span>
<span id="cb7-3"><span class="ex" style="color: null;">5060001</span> data/test.csv</span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"></span>
<span id="cb8-2"> <span class="fu" style="color: #4758AB;">head</span> <span class="at" style="color: #657422;">-n4</span> data/test.csv </span>
<span id="cb8-3"><span class="ex" style="color: null;">crim,zn,indus,chas,nox,rm,age,dis,rad,tax,ptratio,lstat</span></span>
<span id="cb8-4"><span class="ex" style="color: null;">0.00632,18,2.31,0,0.538,6.575,65.2,4.09,1,296,15.3,4.98</span></span>
<span id="cb8-5"><span class="ex" style="color: null;">0.02731,0,7.07,0,0.469,6.421,78.9,4.9671,2,242,17.8,9.14</span></span>
<span id="cb8-6"><span class="ex" style="color: null;">0.02729,0,7.07,0,0.469,7.185,61.1,4.9671,2,242,17.8,4.03</span></span></code></pre></div>
<p>y bueno, tardo unos 11 segundos en obtener las predicciones y escribir el resultado</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;">╰─</span> $ ▶ time motor_xgboost models/boston_xg.jls data/test.csv pred.csv</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="ex" style="color: null;">real</span>    0m11,091s</span>
<span id="cb9-4"><span class="ex" style="color: null;">user</span>    0m53,293s</span>
<span id="cb9-5"><span class="ex" style="color: null;">sys</span> 0m2,321s</span>
<span id="cb9-6"></span></code></pre></div>
<p>y comprobamos que lo ha hecho bien</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"></span>
<span id="cb10-2"><span class="ex" style="color: null;">╰─</span> $ ▶ wc <span class="at" style="color: #657422;">-l</span>  pred.csv </span>
<span id="cb10-3"><span class="ex" style="color: null;">5060001</span> pred.csv</span>
<span id="cb10-4"></span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="ex" style="color: null;">╰─</span> $ ▶ head <span class="at" style="color: #657422;">-n</span> 5 pred.csv </span>
<span id="cb10-7"><span class="ex" style="color: null;">target_0,target_1</span></span>
<span id="cb10-8"><span class="ex" style="color: null;">0.9999237,7.63197e-5</span></span>
<span id="cb10-9"><span class="ex" style="color: null;">0.99120975,0.008790266</span></span>
<span id="cb10-10"><span class="ex" style="color: null;">0.99989164,0.00010834133</span></span>
<span id="cb10-11"><span class="ex" style="color: null;">0.99970543,0.00029458306</span></span></code></pre></div>
<p>Y nada, pues esto puede servir para subir modelos a producción en entornos poco amigables (sin python3, sin R, sin julia, sin spark, sin docker, sin internet). Es un poco <code>old style</code> que me diría mi arquenazi favorito Rubén, pero</p>
<p>Os dejo el tar.gz para que probéis, también os dejo el <code>Project.toml</code>y el <code>Manifest.toml</code> y el fichero con el que he entrenado los datos. para que uséis el mismo entorno de julia que he usado yo.</p>
<p><a href="https://drive.google.com/drive/folders/1jQW-QQNoABlMdUHhlwHvY9MQnZh1x_Yi?usp=sharing">enlace_drive</a></p>



 ]]></description>
  <category>julia</category>
  <category>produccion</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/26/sigo-trasteando-con-julia/index.html</guid>
  <pubDate>Tue, 25 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Api y docker con R. parte 1</title>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/12/api-y-docker-con-r-parte-1/index.html</link>
  <description><![CDATA[ 




<p>Todo el mundo anda haciendo apis para poner modelos en producción, y oye, está bien. Si además lo complementas con dockerizarlo para tener un entorno controlado y que te valga para ponerlo en cualquier sitio dónde esté docker instalado pues mejor.</p>
<p>Aquí voy a contar un ejemplo de como se puede hacer con R usando <code>plumber</code> y docker, en siguentes post contaré como hacerlo con <code>vetiver</code> que es una librería que está para R y Python que tiene algún extra, como versionado de modelos y demás.</p>
<p>Lo primero de todo es trabajar en un proyecto nuevo y usar <a href="https://rstudio.github.io/renv/articles/renv.html"><code>renv</code></a>. renv es para gestionar <em>entornos</em> de R, ojo que también funciona bien si tienes que mezclar R y python. Tiene cosas interesantes como descubrir las librerías que usas en tu proyecto y aún mejor, si estas librerías ya las tienes instaladas pues te crea enlaces simbólicos a dónde están y te permite ahorrar un montón de espacio, que al menos yo, no he conseguido ver cómo hacer eso con <code>conda</code>.</p>
<section id="objetivo" class="level2">
<h2 class="anchored" data-anchor-id="objetivo">Objetivo</h2>
<p>Mi objetivo es ver cómo pondría un modelo bayesiano ajustado con <a href="https://github.com/paul-buerkner/brms"><code>brms</code></a> para que me devuelva predicciones puntuales y las posterioris en un entorno de producción.</p>
</section>
<section id="entrenando-modelo" class="level2">
<h2 class="anchored" data-anchor-id="entrenando-modelo">Entrenando modelo</h2>
<p>Para eso voy a usar datos de un <a href="https://muestrear-no-es-pecado.netlify.app/2021/06/04/big-data-para-pobres-iii-bayesiano/">antiguo post</a>.</p>
<p>Una vez que estemos en ese nuevo proyecto, ajustamos y guardamos un modelo .</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6      ✔ purrr   0.3.5 
## ✔ tibble  3.1.8      ✔ dplyr   1.0.10
## ✔ tidyr   1.2.1      ✔ stringr 1.4.1 
## ✔ readr   2.1.3      ✔ forcats 0.5.2 
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(brms)</span></code></pre></div>
<pre><code>## Loading required package: Rcpp
## Loading 'brms' package (version 2.18.0). Useful instructions
## can be found by typing help('brms'). A more detailed introduction
## to the package is available through vignette('brms_overview').
## 
## Attaching package: 'brms'
## 
## The following object is masked from 'package:stats':
## 
##     ar</code></pre>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(cmdstanr)</span></code></pre></div>
<pre><code>## Warning: package 'cmdstanr' was built under R version 4.3.0</code></pre>
<pre><code>## This is cmdstanr version 0.5.2
## - CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
## - Use set_cmdstan_path() to set the path to CmdStan
## - Use install_cmdstan() to install CmdStan</code></pre>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Using all cores. 12 in my machine, y que haga las cadenas en paralelo</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">options</span>(<span class="at" style="color: #657422;">mc.cores =</span> parallel<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">detectCores</span>())</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">set_cmdstan_path</span>(<span class="st" style="color: #20794D;">"~/cmdstan/"</span>)</span></code></pre></div>
<pre><code>## CmdStan path set to: /home/jose/cmdstan</code></pre>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">train <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data/train_local.csv"</span>))</span></code></pre></div>
<pre><code>## Rows: 662 Columns: 5
## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: ","
## chr (3): segmento, tipo, edad_cat
## dbl (2): valor_cliente, n
## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># guiña a librería antigua</span></span>
<span id="cb12-2">car<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">some</span>(train)</span></code></pre></div>
<pre><code>## # A tibble: 10 × 5
##    segmento tipo  valor_cliente edad_cat     n
##    &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;
##  1 Rec      SM                2 21- 40       4
##  2 Best     SM                1 41-50      475
##  3 Best     C                 4 &gt;60       2807
##  4 No_way   C                 1 41-50      356
##  5 No_way   B                 5 40-60      221
##  6 Rec      SF                2 &gt;60        152
##  7 Rec      B                 4 40-60      194
##  8 Best     C                 5 41-50     4934
##  9 No_way   B                 3 41-50     1064
## 10 No_way   SF                8 41-50       29</code></pre>
<p>Ajustamos un modelo bayesiano con efectos aleatorios y usando la columna <code>n</code> como pesos de las filas. (leer el post dónde usé estos datos para saber más)</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">train <span class="ot" style="color: #003B4F;">&lt;-</span> train <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb14-2">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">target1 =</span> <span class="fu" style="color: #4758AB;">as_factor</span>(<span class="fu" style="color: #4758AB;">ifelse</span>(segmento <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Best"</span>, <span class="st" style="color: #20794D;">"Best"</span>, <span class="st" style="color: #20794D;">"Other"</span>)))</span>
<span id="cb14-3"></span>
<span id="cb14-4"></span>
<span id="cb14-5">formula <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">brmsformula</span>(</span>
<span id="cb14-6">    target1<span class="sc" style="color: #5E5E5E;">|</span> <span class="fu" style="color: #4758AB;">resp_weights</span>(n)  <span class="sc" style="color: #5E5E5E;">~</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> edad_cat) <span class="sc" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> valor_cliente) <span class="sc" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">|</span> tipo)</span>
<span id="cb14-7">    )</span>
<span id="cb14-8"></span>
<span id="cb14-9">mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">brm</span>(</span>
<span id="cb14-10">    formula,</span>
<span id="cb14-11">     <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"bernoulli"</span>, <span class="at" style="color: #657422;">data =</span> train, </span>
<span id="cb14-12">    <span class="at" style="color: #657422;">iter =</span> <span class="dv" style="color: #AD0000;">4000</span>, <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">1000</span>, <span class="at" style="color: #657422;">cores =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">chains =</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb14-13">    <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb14-14">    <span class="at" style="color: #657422;">backend =</span> <span class="st" style="color: #20794D;">"cmdstanr"</span>, </span>
<span id="cb14-15">     <span class="at" style="color: #657422;">refresh =</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># refresh 0 qu eno quiero que se me llene el post de los output de las cadenas mcm</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="fu" style="color: #4758AB;">saveRDS</span>(mod, here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>))</span></code></pre></div>
</section>
<section id="comprobamos-que-nuestro-modelo-funciona" class="level2">
<h2 class="anchored" data-anchor-id="comprobamos-que-nuestro-modelo-funciona">Comprobamos que nuestro modelo funciona</h2>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">library</span>(tidybayes)</span></code></pre></div>
<pre><code>## 
## Attaching package: 'tidybayes'</code></pre>
<pre><code>## The following objects are masked from 'package:brms':
## 
##     dstudent_t, pstudent_t, qstudent_t, rstudent_t</code></pre>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">mod_reload <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>))</span>
<span id="cb18-2"> </span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb18-4"></span>
<span id="cb18-5">test <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">read_csv</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data/test_local.csv"</span>))</span></code></pre></div>
<pre><code>## Rows: 656 Columns: 5</code></pre>
<pre><code>## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: ","
## chr (3): segmento, tipo, edad_cat
## dbl (2): valor_cliente, n
## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># estimacion puntual</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">predict</span>(mod_reload, <span class="fu" style="color: #4758AB;">head</span>(test))</span></code></pre></div>
<pre><code>##        Estimate Est.Error Q2.5 Q97.5
## [1,] 0.23216667 0.4222324    0     1
## [2,] 0.13233333 0.3388669    0     1
## [3,] 0.16075000 0.3673155    0     1
## [4,] 0.13825000 0.3451766    0     1
## [5,] 0.12716667 0.3331735    0     1
## [6,] 0.07333333 0.2606937    0     1</code></pre>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># full posterior</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;"># para 6 filas guarda los valores obtenidos en las 3000 iteraciones de cada cadena</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;"># 3000 * 4 * 6 = 72000 valores </span></span>
<span id="cb23-4"></span>
<span id="cb23-5">posterior_pred <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">add_epred_draws</span>(<span class="fu" style="color: #4758AB;">head</span>(test), mod_reload) </span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;">head</span>(posterior_pred )</span></code></pre></div>
<pre><code>## # A tibble: 6 × 10
## # Groups:   segmento, tipo, valor_cliente, edad_cat, n, .row [1]
##   segmento tipo  valor_cliente edad_cat     n  .row .chain .itera…¹ .draw .epred
##   &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;int&gt;  &lt;int&gt;    &lt;int&gt; &lt;int&gt;  &lt;dbl&gt;
## 1 Rec      C                 0 21- 40     132     1     NA       NA     1  0.230
## 2 Rec      C                 0 21- 40     132     1     NA       NA     2  0.234
## 3 Rec      C                 0 21- 40     132     1     NA       NA     3  0.233
## 4 Rec      C                 0 21- 40     132     1     NA       NA     4  0.230
## 5 Rec      C                 0 21- 40     132     1     NA       NA     5  0.232
## 6 Rec      C                 0 21- 40     132     1     NA       NA     6  0.226
## # … with abbreviated variable name ¹​.iteration</code></pre>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;">dim</span>(posterior_pred)</span></code></pre></div>
<pre><code>## [1] 72000    10</code></pre>
<p>Para la primer fila podemos tener la distribución a posteriori</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">posterior_pred <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;">filter</span>(.row <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>.epred)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;">geom_density</span>() </span></code></pre></div>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/12/api-y-docker-con-r-parte-1/unnamed-chunk-4-1.png" width="672"></p>
<p>Pues listo, ya tenemos el modelo entrenado y guardado, ahora sólo queda escribir el código para la api y el Dockerfile..</p>
</section>
<section id="creando-el-plumber.r" class="level2">
<h2 class="anchored" data-anchor-id="creando-el-plumber.r">Creando el plumber.R</h2>
<p>Una cosa importante, si hemos usado <code>renv</code> es escribir el fichero con las dependencias que usamos. Eso se hace con <code>renv::snapshot()</code> y se crea un fichero dónde están descritas las dependencias versionadas de nuestro proyecto.</p>
<p>Pero quizá para el docker no necesitemos todas, en este caso, partiendo del fichero anterior nos creamos otro con sólo las dependencias necesarias. Yo lo he llamado <code>vetiver_renv.lock</code> porque empecé trasteando con vetiver y soy demasiado vago como para cambiar ahora el nombre. El contenido del fichero es</p>
<p><code>vetiver_renv.lock</code></p>
<pre><code>{
  "R": {
    "Version": "4.2.1",
    "Repositories": [
      {
        "Name": "binarios",
        "URL": "https://packagemanager.rstudio.com/all/latest"
      },
      {
        "Name": "ropenspain",
        "URL": "https://ropenspain.r-universe.dev"
      }
    ]
  },
  "Packages": {
    "plumber": {
      "Package": "plumber",
      "Version": "1.2.1",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "8b65a7a00ef8edc5ddc6fabf0aff1194",
      "Requirements": [
        "R6",
        "crayon",
        "ellipsis",
        "httpuv",
        "jsonlite",
        "lifecycle",
        "magrittr",
        "mime",
        "promises",
        "rlang",
        "sodium",
        "stringi",
        "swagger",
        "webutils"
      ]
    },
    "brms": {
      "Package": "brms",
      "Version": "2.18.0",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "afcb0d871e1759b68b29eb6affd37a10",
      "Requirements": [
        "Matrix",
        "Rcpp",
        "abind",
        "backports",
        "bayesplot",
        "bridgesampling",
        "coda",
        "future",
        "ggplot2",
        "glue",
        "loo",
        "matrixStats",
        "mgcv",
        "nleqslv",
        "nlme",
        "posterior",
        "rstan",
        "rstantools",
        "shinystan"
      ]
    },
    "tidybayes": {
      "Package": "tidybayes",
      "Version": "3.0.2",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "d501501261b724f35ec9f2b80f4421b5",
      "Requirements": [
        "arrayhelpers",
        "coda",
        "dplyr",
        "ggdist",
        "ggplot2",
        "magrittr",
        "posterior",
        "rlang",
        "tibble",
        "tidyr",
        "tidyselect",
        "vctrs",
        "withr"
      ]
    }
  }
}
</code></pre>
<p>Cómo veis también he añadido la librería tidybayes, porque me va a resultar útil para sacar la posteriori de las predicciones de los nuevos datos.</p>
<p>Creamos el fichero <code>plumber.R</code> que no es más que decir cómo se va a predecir y crear un par de endpoints que permiten tanto obtener estimaciones puntuales como la full posterior. Con la librería <code>plumber</code> se hace fácil sin más que usar decoradores.</p>
<p>Fichero <code>plumber.R</code></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">library</span>(brms)</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;">library</span>(plumber)</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;">library</span>(tidybayes)</span>
<span id="cb29-4"></span>
<span id="cb29-5">brms_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"brms_model.rds"</span>)</span>
<span id="cb29-6"></span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;">#* @apiTitle brms predict Api</span></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;">#* @apiDescription Endpoints for working with brms model</span></span>
<span id="cb29-10"></span>
<span id="cb29-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- filter-logger</span></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;">#* Log some information about the incoming request</span></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;">#* @filter logger</span></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;">function</span>(req){</span>
<span id="cb29-15">    <span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">as.character</span>(<span class="fu" style="color: #4758AB;">Sys.time</span>()), <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb29-16">        req<span class="sc" style="color: #5E5E5E;">$</span>REQUEST_METHOD, req<span class="sc" style="color: #5E5E5E;">$</span>PATH_INFO, <span class="st" style="color: #20794D;">"-"</span>,</span>
<span id="cb29-17">        req<span class="sc" style="color: #5E5E5E;">$</span>HTTP_USER_AGENT, <span class="st" style="color: #20794D;">"@"</span>, req<span class="sc" style="color: #5E5E5E;">$</span>REMOTE_ADDR, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb29-18">    <span class="fu" style="color: #4758AB;">forward</span>()</span>
<span id="cb29-19">}</span>
<span id="cb29-20"></span>
<span id="cb29-21"><span class="do" style="color: #5E5E5E;
font-style: italic;">## ---- post-data</span></span>
<span id="cb29-22"><span class="co" style="color: #5E5E5E;">#* Submit data and get a prediction in return</span></span>
<span id="cb29-23"><span class="co" style="color: #5E5E5E;">#* @post /predict</span></span>
<span id="cb29-24"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb29-25">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb29-26">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb29-27">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb29-28">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb29-29">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb29-30">    }</span>
<span id="cb29-31">    </span>
<span id="cb29-32">    <span class="fu" style="color: #4758AB;">predict</span>(brms_model, data) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb29-33">        <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb29-34">}</span>
<span id="cb29-35"></span>
<span id="cb29-36"></span>
<span id="cb29-37"><span class="co" style="color: #5E5E5E;">#* @post /full_posterior</span></span>
<span id="cb29-38"><span class="cf" style="color: #003B4F;">function</span>(req, res) {</span>
<span id="cb29-39">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tryCatch</span>(jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">parse_json</span>(req<span class="sc" style="color: #5E5E5E;">$</span>postBody, <span class="at" style="color: #657422;">simplifyVector =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb29-40">                     <span class="at" style="color: #657422;">error =</span> <span class="cf" style="color: #003B4F;">function</span>(e) <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb29-41">    <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data)) {</span>
<span id="cb29-42">        res<span class="sc" style="color: #5E5E5E;">$</span>status <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">400</span></span>
<span id="cb29-43">        <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">error =</span> <span class="st" style="color: #20794D;">"No data submitted"</span>))</span>
<span id="cb29-44">    }</span>
<span id="cb29-45">    </span>
<span id="cb29-46">    <span class="fu" style="color: #4758AB;">add_epred_draws</span>(data, brms_model) </span>
<span id="cb29-47">        </span>
<span id="cb29-48">}</span></code></pre></div>
<p>No tiene mucho misterio, los endpoint se crean usando</p>
<pre><code>#* @post  /nombre_endpoing</code></pre>
<p>y creando una función que va a tomar los datos que le pasemos en formato json a la api, los pasa a data.frame y usa el modelo previamente cargado para obtener las estimaciones puntuales en un caso y la full posterior (con <code>add_epred_draws</code>) en el otro.</p>
</section>
<section id="creamos-el-docker" class="level2">
<h2 class="anchored" data-anchor-id="creamos-el-docker">Creamos el docker</h2>
<p>Iba a contar lo que es docker, pero mejor lo miráis en su <a href="https://www.docker.com/">web</a>. Sólo quedarnos con la idea que es como tener una máquina virtual que puedo usar en otro sitio, pero es mucho más ligera y puede usar cosas del sistema anfitrión e interactuar con él.</p>
<p>Para crear nuestra <em>imagen</em> docker tenemos que crear un fichero que se llame <code>Dockerfile</code> dónde vamos a ir diciéndole como cree nuestra máquina virtual.</p>
<p>Es importante que estén los ficheros anteriores, el modelo salvado , el plumber.R y el fichero .lock en las rutas correctas dónde los busca el Dockerfile, en mi caso, lo he puesto todo en el mismo sitio.</p>
<p>Contendido del Dockerfile</p>
<pre><code># Docker file para modelo brms

FROM rocker/r-ver:4.2.1
ENV RENV_CONFIG_REPOS_OVERRIDE https://packagemanager.rstudio.com/cran/latest

RUN apt-get update -qq &amp;&amp; apt-get install -y --no-install-recommends \
  default-jdk \
  libcurl4-openssl-dev \
  libicu-dev \
  libsodium-dev \
  libssl-dev \
  make \
  zlib1g-dev \
  libxml2-dev \
  libglpk-dev \
  &amp;&amp; apt-get clean


COPY vetiver_renv.lock renv.lock
RUN Rscript -e "install.packages('renv')"
RUN Rscript -e "renv::restore()"

## Copio el modelo y el fichero de la api
COPY brms_model.rds /opt/ml/brms_model.rds
COPY plumber.R /opt/ml/plumber.R

EXPOSE 8081
ENTRYPOINT ["R", "-e", "pr &lt;- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8081)"]

</code></pre>
<p>Importante que el puerto que se exponga con <code>EXPOSE</code> sea el mismo que usa el plumber, en este caso el 8081.</p>
<p>Ahora para construir la imagen docker y ejecutarla</p>
<pre><code>docker build -t mi_modelo_brms .
</code></pre>
<p>Y despues de un rato podemos ejecutarlo mapeando el puerto</p>
<pre><code>nohup docker container run --rm -p 8081:8081 mi_modelo_brms &amp; </code></pre>
</section>
<section id="funciona" class="level2">
<h2 class="anchored" data-anchor-id="funciona">¿Funciona?</h2>
<p>Podemos usar curl, python, php o cualquier otra cosa para mandar peticiones a la api y que nos devuelva predicciones, con R sería algo así.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">test <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb34-2">    <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">2</span>) </span></code></pre></div>
<pre><code>## # A tibble: 2 × 5
##   segmento tipo  valor_cliente edad_cat     n
##   &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;
## 1 Rec      C                 0 21- 40     132
## 2 Best     B                 0 41-50       19</code></pre>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">base_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"http://0.0.0.0:8081"</span></span>
<span id="cb36-2"></span>
<span id="cb36-3">api_res <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">POST</span>(<span class="at" style="color: #657422;">url =</span> <span class="fu" style="color: #4758AB;">paste0</span>(base_url, <span class="st" style="color: #20794D;">"/predict"</span>),</span>
<span id="cb36-4">                      <span class="at" style="color: #657422;">body =</span> <span class="fu" style="color: #4758AB;">head</span>(test),</span>
<span id="cb36-5">                      <span class="at" style="color: #657422;">encode =</span> <span class="st" style="color: #20794D;">"json"</span>)</span>
<span id="cb36-6">predicted_values <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(api_res, <span class="at" style="color: #657422;">as =</span> <span class="st" style="color: #20794D;">"text"</span>, <span class="at" style="color: #657422;">encoding =</span> <span class="st" style="color: #20794D;">"UTF-8"</span>)</span>
<span id="cb36-7"></span>
<span id="cb36-8">jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fromJSON</span>(predicted_values)</span></code></pre></div>
<pre><code>##   Estimate Est.Error Q2.5 Q97.5
## 1   0.2283    0.4198    0     1
## 2   0.1356    0.3424    0     1
## 3   0.1604    0.3670    0     1
## 4   0.1320    0.3385    0     1
## 5   0.1215    0.3267    0     1
## 6   0.0737    0.2612    0     1</code></pre>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">api_res2 <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">POST</span>(<span class="at" style="color: #657422;">url =</span> <span class="fu" style="color: #4758AB;">paste0</span>(base_url, <span class="st" style="color: #20794D;">"/full_posterior"</span>),</span>
<span id="cb38-2">                      <span class="at" style="color: #657422;">body =</span> <span class="fu" style="color: #4758AB;">head</span>(test,<span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb38-3">                      <span class="at" style="color: #657422;">encode =</span> <span class="st" style="color: #20794D;">"json"</span>)</span>
<span id="cb38-4">posterior_values <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(api_res2, <span class="at" style="color: #657422;">as =</span> <span class="st" style="color: #20794D;">"text"</span>, <span class="at" style="color: #657422;">encoding =</span> <span class="st" style="color: #20794D;">"UTF-8"</span>)</span>
<span id="cb38-5"></span>
<span id="cb38-6"></span>
<span id="cb38-7">jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fromJSON</span>(posterior_values)  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb38-8">  <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<pre><code>##     segmento tipo valor_cliente edad_cat   n .row .draw .epred
## 1        Rec    C             0   21- 40 132    1     1 0.2297
## 2        Rec    C             0   21- 40 132    1     2 0.2341
## 3        Rec    C             0   21- 40 132    1     3 0.2330
## 4        Rec    C             0   21- 40 132    1     4 0.2296
## 5        Rec    C             0   21- 40 132    1     5 0.2321
## 6        Rec    C             0   21- 40 132    1     6 0.2256
## 7        Rec    C             0   21- 40 132    1     7 0.2211
## 8        Rec    C             0   21- 40 132    1     8 0.2215
## 9        Rec    C             0   21- 40 132    1     9 0.2259
## 10       Rec    C             0   21- 40 132    1    10 0.2245
## 11       Rec    C             0   21- 40 132    1    11 0.2330
## 12       Rec    C             0   21- 40 132    1    12 0.2263
## 13       Rec    C             0   21- 40 132    1    13 0.2262
## 14       Rec    C             0   21- 40 132    1    14 0.2426
## 15       Rec    C             0   21- 40 132    1    15 0.2307
## 16       Rec    C             0   21- 40 132    1    16 0.2348
## 17       Rec    C             0   21- 40 132    1    17 0.2293
## 18       Rec    C             0   21- 40 132    1    18 0.2281
## 19       Rec    C             0   21- 40 132    1    19 0.2304
## 20       Rec    C             0   21- 40 132    1    20 0.2277
## 21       Rec    C             0   21- 40 132    1    21 0.2283
## 22       Rec    C             0   21- 40 132    1    22 0.2355
## 23       Rec    C             0   21- 40 132    1    23 0.2297
## 24       Rec    C             0   21- 40 132    1    24 0.2257
## 25       Rec    C             0   21- 40 132    1    25 0.2191
## 26       Rec    C             0   21- 40 132    1    26 0.2275
## 27       Rec    C             0   21- 40 132    1    27 0.2328
## 28       Rec    C             0   21- 40 132    1    28 0.2312
## 29       Rec    C             0   21- 40 132    1    29 0.2190
## 30       Rec    C             0   21- 40 132    1    30 0.2370
## 31       Rec    C             0   21- 40 132    1    31 0.2303
## 32       Rec    C             0   21- 40 132    1    32 0.2252
## 33       Rec    C             0   21- 40 132    1    33 0.2190
## 34       Rec    C             0   21- 40 132    1    34 0.2269
## 35       Rec    C             0   21- 40 132    1    35 0.2311
## 36       Rec    C             0   21- 40 132    1    36 0.2309
## 37       Rec    C             0   21- 40 132    1    37 0.2313
## 38       Rec    C             0   21- 40 132    1    38 0.2361
## 39       Rec    C             0   21- 40 132    1    39 0.2335
## 40       Rec    C             0   21- 40 132    1    40 0.2414
## 41       Rec    C             0   21- 40 132    1    41 0.2333
## 42       Rec    C             0   21- 40 132    1    42 0.2283
## 43       Rec    C             0   21- 40 132    1    43 0.2354
## 44       Rec    C             0   21- 40 132    1    44 0.2314
## 45       Rec    C             0   21- 40 132    1    45 0.2357
## 46       Rec    C             0   21- 40 132    1    46 0.2240
## 47       Rec    C             0   21- 40 132    1    47 0.2241
## 48       Rec    C             0   21- 40 132    1    48 0.2355
## 49       Rec    C             0   21- 40 132    1    49 0.2260
## 50       Rec    C             0   21- 40 132    1    50 0.2268
## 51       Rec    C             0   21- 40 132    1    51 0.2278
## 52       Rec    C             0   21- 40 132    1    52 0.2213
## 53       Rec    C             0   21- 40 132    1    53 0.2246
## 54       Rec    C             0   21- 40 132    1    54 0.2316
## 55       Rec    C             0   21- 40 132    1    55 0.2313
## 56       Rec    C             0   21- 40 132    1    56 0.2209
## 57       Rec    C             0   21- 40 132    1    57 0.2269
## 58       Rec    C             0   21- 40 132    1    58 0.2323
## 59       Rec    C             0   21- 40 132    1    59 0.2280
## 60       Rec    C             0   21- 40 132    1    60 0.2357
## 61       Rec    C             0   21- 40 132    1    61 0.2275
## 62       Rec    C             0   21- 40 132    1    62 0.2387
## 63       Rec    C             0   21- 40 132    1    63 0.2387
## 64       Rec    C             0   21- 40 132    1    64 0.2231
## 65       Rec    C             0   21- 40 132    1    65 0.2370
## 66       Rec    C             0   21- 40 132    1    66 0.2313
## 67       Rec    C             0   21- 40 132    1    67 0.2243
## 68       Rec    C             0   21- 40 132    1    68 0.2335
## 69       Rec    C             0   21- 40 132    1    69 0.2275
## 70       Rec    C             0   21- 40 132    1    70 0.2340
## 71       Rec    C             0   21- 40 132    1    71 0.2250
## 72       Rec    C             0   21- 40 132    1    72 0.2373
## 73       Rec    C             0   21- 40 132    1    73 0.2259
## 74       Rec    C             0   21- 40 132    1    74 0.2405
## 75       Rec    C             0   21- 40 132    1    75 0.2227
## 76       Rec    C             0   21- 40 132    1    76 0.2210
## 77       Rec    C             0   21- 40 132    1    77 0.2337
## 78       Rec    C             0   21- 40 132    1    78 0.2306
## 79       Rec    C             0   21- 40 132    1    79 0.2242
## 80       Rec    C             0   21- 40 132    1    80 0.2235
## 81       Rec    C             0   21- 40 132    1    81 0.2247
## 82       Rec    C             0   21- 40 132    1    82 0.2188
## 83       Rec    C             0   21- 40 132    1    83 0.2129
## 84       Rec    C             0   21- 40 132    1    84 0.2415
## 85       Rec    C             0   21- 40 132    1    85 0.2293
## 86       Rec    C             0   21- 40 132    1    86 0.2312
## 87       Rec    C             0   21- 40 132    1    87 0.2189
## 88       Rec    C             0   21- 40 132    1    88 0.2236
## 89       Rec    C             0   21- 40 132    1    89 0.2262
## 90       Rec    C             0   21- 40 132    1    90 0.2317
## 91       Rec    C             0   21- 40 132    1    91 0.2316
## 92       Rec    C             0   21- 40 132    1    92 0.2288
## 93       Rec    C             0   21- 40 132    1    93 0.2299
## 94       Rec    C             0   21- 40 132    1    94 0.2288
## 95       Rec    C             0   21- 40 132    1    95 0.2311
## 96       Rec    C             0   21- 40 132    1    96 0.2264
## 97       Rec    C             0   21- 40 132    1    97 0.2269
## 98       Rec    C             0   21- 40 132    1    98 0.2287
## 99       Rec    C             0   21- 40 132    1    99 0.2283
## 100      Rec    C             0   21- 40 132    1   100 0.2191</code></pre>
<p>Seguramente usar una api para obtener la posteriori que tiene tantos valores para cada dato no sea lo más eficiente, porque lo devuelve en formato json y luego hay que convertirlo a data.frame, pero funciona.</p>
</section>
<section id="salvar-docker-en-un-tar.gz" class="level2">
<h2 class="anchored" data-anchor-id="salvar-docker-en-un-tar.gz">Salvar docker en un tar.gz</h2>
<p>Si no tenemos un sitio estilo docker hub dónde registrar nuestros docker o por cualquier otra causa, podemos usar <code>docker save</code> para generar un fichero comprimido y <code>docker load</code> para importarlo.</p>
<p>Sería algo así como</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"></span>
<span id="cb40-2"><span class="ex" style="color: null;">docker</span> save mi_modelo_brms <span class="kw" style="color: #003B4F;">|</span> <span class="fu" style="color: #4758AB;">gzip</span> <span class="op" style="color: #5E5E5E;">&gt;</span> mi_modelo_brms_docker.tar.gz</span></code></pre></div>
<p>Copiar ese tar.gz a dónde toque</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="ex" style="color: null;">docker</span> load <span class="op" style="color: #5E5E5E;">&lt;</span> mi_modelo_brms_docker.tar.gz</span></code></pre></div>
</section>
<section id="adelanto-con-vetiver" class="level2">
<h2 class="anchored" data-anchor-id="adelanto-con-vetiver">Adelanto con vetiver</h2>
<p>Con la librería vetiver se simplifica todo este proceso, puesto que crea por ti el plumber.R y el dockerfile y tiene movidas para guardar la monitorización del modelo y demás. Está tanto para R como para python. En R soporta los modelos que estén en <code>tidymodels</code> y en python soporta <code>scikit-learn</code>, <code>statmodels</code>, <code>xgboost</code> y creo que también <code>pytorch</code></p>


</section>

 ]]></description>
  <category>docker</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/10/12/api-y-docker-con-r-parte-1/index.html</guid>
  <pubDate>Tue, 11 Oct 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Veeelooosidad</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/09/18/veloooosidad/index.html</link>
  <description><![CDATA[ 




<p>No, este post no va sobre la canción de <a href="https://www.youtube.com/watch?v=hEj1z_ihVX8">Medina Azahara</a> sino de comparar un par de librerías para lectura y procesamiento de datos. A saber, <a href="https://pola-rs.github.io/polars-book/user-guide/index.html">polars</a> escrita en Rust y con api en <strong>python</strong> versus <a href="https://vroom.r-lib.org/">vroom</a> en combinación con librerías como <a href="https://github.com/Rdatatable/data.table">data.table</a> o <a href="https://sebkrantz.github.io/collapse/">collapse</a> en R. Estas últimas usan por debajo C++, así que tanto por el lado de python como por el de R el principal mérito se debe a usar Rust y C++.</p>
<section id="datos-hardware-y-entornos" class="level2">
<h2 class="anchored" data-anchor-id="datos-hardware-y-entornos">Datos, hardware y entornos</h2>
<p>Para hacer la comparación vamos a usar un dataset de 100 millones de filas y 9 columnas, el mismo que se usa en <a href="https://github.com/h2oai/db-benchmark">h2o.ai db-benchmark</a>.</p>
<p>Lo voy a probar en mi pc, que es un <a href="https://slimbook.es/">slimbook</a> de justo antes de la pandemia, con 1gb de ssd, 32Gb de RAM y procesador Intel i7-9750H (12) @ 4.500GHz con 6 núcleos (12 hilos) y corriendo Linux Mint 20.</p>
<section id="r" class="level3">
<h3 class="anchored" data-anchor-id="r">R</h3>
<p>Para R voy a chequear vroom y data.table para leer los datos y data.table, tidytable y collapse para el procesamiento</p>
<p>R: Uso R version 4.2.1 (2022-06-23) – “Funny-Looking Kid” vroom: 1.5.7 data.table: 1.14.2 tidytable: 0.8.1.9 collapse: 1.8.8</p>
</section>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<p>Uso un entorno de conda con python 3.6.12 polars: ‘0.12.5’</p>
</section>
</section>
<section id="scripts" class="level2">
<h2 class="anchored" data-anchor-id="scripts">Scripts</h2>
<section id="r-1" class="level3">
<h3 class="anchored" data-anchor-id="r-1">R</h3>
<p>En R voy a usar microbenchmark para realizar varias ejecuciones</p>
<p>Fichero: tests.R</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(collapse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(tidytable)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(microbenchmark)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># Check lectu</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">setDTthreads</span>(0L)</span>
<span id="cb1-12"></span>
<span id="cb1-13">lectura <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">microbenchmark</span>(</span>
<span id="cb1-14">    <span class="at" style="color: #657422;">vroom  =</span> vroom<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"/home/jose/Rstudio_projects/db-benchmark/data/G1_1e8_1e1_5_1.csv"</span>, <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>), </span>
<span id="cb1-15">    <span class="at" style="color: #657422;">data.table =</span> data.table<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"/home/jose/Rstudio_projects/db-benchmark/data/G1_1e8_1e1_5_1.csv"</span>),</span>
<span id="cb1-16">    <span class="at" style="color: #657422;">times =</span> 3L</span>
<span id="cb1-17">)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="fu" style="color: #4758AB;">print</span>(lectura)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;"># group by sum</span></span>
<span id="cb1-22"></span>
<span id="cb1-23">x <span class="ot" style="color: #003B4F;">&lt;-</span> vroom<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"/home/jose/Rstudio_projects/db-benchmark/data/G1_1e8_1e1_5_1.csv"</span>, <span class="at" style="color: #657422;">show_col_types =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;"># x= sample_frac(x, size = 0.1)</span></span>
<span id="cb1-26">x_dt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">qDT</span>(x)</span>
<span id="cb1-27"></span>
<span id="cb1-28">group_by_performance <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">microbenchmark</span>(</span>
<span id="cb1-29">    <span class="at" style="color: #657422;">data.table =</span> x_dt[, <span class="fu" style="color: #4758AB;">lapply</span>(.SD, mean, <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>), <span class="at" style="color: #657422;">keyby =</span> id1, <span class="at" style="color: #657422;">.SDcols =</span> <span class="dv" style="color: #AD0000;">7</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>],</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;"># dplyr      = x %&gt;%</span></span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;">#     group_by(id1, id2) %&gt;%</span></span>
<span id="cb1-32">    <span class="co" style="color: #5E5E5E;">#     summarise(v1 = sum(v1, na.rm = TRUE)) %&gt;% </span></span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;">#     ungroup(),</span></span>
<span id="cb1-34">    <span class="at" style="color: #657422;">tidytable =</span> x_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-35">        <span class="fu" style="color: #4758AB;">summarize.</span>(<span class="at" style="color: #657422;">v1 =</span> <span class="fu" style="color: #4758AB;">sum</span>(v1),</span>
<span id="cb1-36">                   <span class="at" style="color: #657422;">v2 =</span> <span class="fu" style="color: #4758AB;">sum</span>(v2),</span>
<span id="cb1-37">                   <span class="at" style="color: #657422;">v3 =</span> <span class="fu" style="color: #4758AB;">sum</span>(v3),</span>
<span id="cb1-38">                   <span class="at" style="color: #657422;">.by =</span> <span class="fu" style="color: #4758AB;">c</span>(id1, id2)),</span>
<span id="cb1-39">    <span class="co" style="color: #5E5E5E;"># base_R = tapply(x$v1, list(x$id1, x$id2), sum, na.rm = TRUE),</span></span>
<span id="cb1-40"></span>
<span id="cb1-41">    <span class="at" style="color: #657422;">collapse=</span> x_dt <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-42">        <span class="fu" style="color: #4758AB;">fgroup_by</span>(id1, id2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-43">        <span class="fu" style="color: #4758AB;">fsummarise</span>(<span class="at" style="color: #657422;">v1 =</span> <span class="fu" style="color: #4758AB;">fsum</span>(v1),</span>
<span id="cb1-44">                   <span class="at" style="color: #657422;">v2 =</span> <span class="fu" style="color: #4758AB;">fsum</span>(v2),</span>
<span id="cb1-45">                   <span class="at" style="color: #657422;">v3 =</span> <span class="fu" style="color: #4758AB;">fsum</span>(v3)),</span>
<span id="cb1-46"></span>
<span id="cb1-47">    <span class="at" style="color: #657422;">collapse_pure =</span> {</span>
<span id="cb1-48">        g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">GRP</span>(x, <span class="sc" style="color: #5E5E5E;">~</span> id1 <span class="sc" style="color: #5E5E5E;">+</span>id2)</span>
<span id="cb1-49">        <span class="fu" style="color: #4758AB;">fsum</span>(x<span class="sc" style="color: #5E5E5E;">$</span>v1, g)</span>
<span id="cb1-50">        <span class="fu" style="color: #4758AB;">fsum</span>(x<span class="sc" style="color: #5E5E5E;">$</span>v2, g)</span>
<span id="cb1-51">    },</span>
<span id="cb1-52">    <span class="at" style="color: #657422;">times =</span> 5L</span>
<span id="cb1-53">)</span>
<span id="cb1-54"></span>
<span id="cb1-55"><span class="fu" style="color: #4758AB;">print</span>(group_by_performance)</span></code></pre></div>
</section>
<section id="python-1" class="level3">
<h3 class="anchored" data-anchor-id="python-1">Python</h3>
<p>Fichero: tests.py</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> polars <span class="im" style="color: #00769E;">as</span> pl</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb2-3"></span>
<span id="cb2-4">start <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb2-5">df <span class="op" style="color: #5E5E5E;">=</span> pl.read_csv(<span class="st" style="color: #20794D;">"/home/jose/Rstudio_projects/db-benchmark/data/G1_1e8_1e1_5_1.csv"</span>)</span>
<span id="cb2-6">end <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="bu" style="color: null;">print</span>(end <span class="op" style="color: #5E5E5E;">-</span>start)</span>
<span id="cb2-9"></span>
<span id="cb2-10">start <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb2-11"></span>
<span id="cb2-12">(</span>
<span id="cb2-13">    df</span>
<span id="cb2-14">.lazy()</span>
<span id="cb2-15">    .groupby([<span class="st" style="color: #20794D;">'id1'</span>,<span class="st" style="color: #20794D;">'id2'</span>])</span>
<span id="cb2-16">    .agg(</span>
<span id="cb2-17">        [</span>
<span id="cb2-18">            pl.col(<span class="st" style="color: #20794D;">"v1"</span>).<span class="bu" style="color: null;">sum</span>().alias(<span class="st" style="color: #20794D;">'v1_sum'</span>),</span>
<span id="cb2-19">            pl.col(<span class="st" style="color: #20794D;">"v2"</span>).<span class="bu" style="color: null;">sum</span>().alias(<span class="st" style="color: #20794D;">'v2_sum'</span>),</span>
<span id="cb2-20">            pl.col(<span class="st" style="color: #20794D;">"v3"</span>).<span class="bu" style="color: null;">sum</span>().alias(<span class="st" style="color: #20794D;">'v3_sum'</span>)</span>
<span id="cb2-21">        ]</span>
<span id="cb2-22">    )</span>
<span id="cb2-23">.collect()</span>
<span id="cb2-24">)</span>
<span id="cb2-25">end <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb2-26"><span class="bu" style="color: null;">print</span>(end <span class="op" style="color: #5E5E5E;">-</span> start)</span></code></pre></div>
</section>
</section>
<section id="resultados" class="level2">
<h2 class="anchored" data-anchor-id="resultados">Resultados</h2>
<p>Para comparar, ejecuto los scripts desde consola y teniendo cerrado navegadores, ides y demás.</p>
<section id="r-2" class="level3">
<h3 class="anchored" data-anchor-id="r-2">R</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">Rscript</span> tests.R</span></code></pre></div>
<p><strong>Lectura en R</strong></p>
<pre><code>Unit: seconds
       expr       min        lq      mean    median        uq       max neval
      vroom  7.783958  7.953598  8.185716  8.123239  8.386596  8.649953     3
 data.table 41.914928 42.809751 45.213309 43.704575 46.862499 50.020424     3
</code></pre>
<p>Group by y sum en R.</p>
<pre><code>Unit: seconds
          expr      min       lq     mean   median       uq       max neval cld
    data.table 1.469617 1.476545 1.550360 1.486647 1.633409  1.685581     5   a
     tidytable 1.182273 1.189111 1.291734 1.279313 1.314287  1.493686     5   a
      collapse 1.799175 1.813744 6.255215 1.891603 2.076616 23.694936     5   a
 collapse_pure 1.553002 1.555598 1.570758 1.566454 1.571605  1.607132     5   a
</code></pre>
<p>Por lo que más o menos, usar vroom para leer y tidytable, data.table o collapse para hacer el cálculo sale por unos 10 segundos o un poco menos.</p>
</section>
<section id="python-2" class="level3">
<h3 class="anchored" data-anchor-id="python-2">Python</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">python</span> tests.py </span></code></pre></div>
<pre><code>7.755492448806763
1.8228027820587158
</code></pre>
<p>Y vemos que con polars tenemos más o menos los mismos tiempos.</p>
</section>
</section>
<section id="conclusiones" class="level2">
<h2 class="anchored" data-anchor-id="conclusiones">Conclusiones</h2>
<p>Tanto en R como en Python tenemos librerías muy rápidas que , si tenemos suficiente RAM podemos trabajar con conjunto de datos bastante tochos y hacer cosas en tiempos más que razonables.</p>
<p>Polars es una librería muy nueva y muy bien hecha, ojalá hagan api para R. No obstante, data.table lleva tiempo en R y su desempeño es consistente en múltiples situaciones. Mi consejo es echarle un ojo al <a href="https://github.com/fastverse/fastverse">fastverse</a>.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>python</category>
  <category>C++</category>
  <category>Rust</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/09/18/veloooosidad/index.html</guid>
  <pubDate>Sat, 17 Sep 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Indios y jefes, IO al servicio del mal.</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/index.html</link>
  <description><![CDATA[ 




<section id="introducción" class="level2">
<h2 class="anchored" data-anchor-id="introducción">Introducción</h2>
<p>Voy a poner un ejemplo de como utilizar solvers para investigación operativa dentro de R.</p>
<p>Tenemos la siguiente información: * Listado de códigos postales de España con la longitud y latitud del centroide del polígono. * Listado de códigos postales de la ubicación de las sedes de una empresa. * En la empresa hay jefes e indios, no es necesario que haya un jefe por sede.</p>
<p>Se quiere, para cada provincia de España</p>
<ul>
<li>Asignar cada código postal de esa provincia a un empleado de la empres (jefe o indio).</li>
<li>Un mismo código postal no puede estar asignado a más de un empleado.</li>
<li>En la medida de lo posible asignar a los empleados los códigos postales más cercanos al lugar de su sede.</li>
<li>A igualdad de distancia entre un código postal y una sede, se debería asignar ese código postal a un indio.</li>
<li>Ningún indio debe tener asignados menos códigos postales que ningún jefe.</li>
<li>Los jefes como <strong>máximo</strong> han de tener 7 códigos postales asignados.</li>
<li>Los indios como <strong>mínimo</strong> han de tener 3 códigos postales asignados.</li>
<li>No puede haber ningún empleado que esté “desasignado”.</li>
</ul>
<p>Dados estos requisitos debería plantear como es la definición del problema, pero no tengo ganas de ponerme a escribir fórmulas en latex, así que en vez de eso voy a utilizar unos datos simulados y directamente al código..</p>
</section>
<section id="carga-de-datos-y-crear-datos-ficticios." class="level2">
<h2 class="anchored" data-anchor-id="carga-de-datos-y-crear-datos-ficticios.">Carga de datos y crear datos ficticios.</h2>
<section id="carga-códigos-postales" class="level3">
<h3 class="anchored" data-anchor-id="carga-códigos-postales">Carga códigos postales</h3>
<p>Casualmente, tengo por mi pc un shapefile algo antiguo (de cuando está capa estaba en cartociudad) con la capa de códigos postales de España, la cual si se quiere actualizada vale un dinerillo. <a href="https://www.market.correos.es/es/product/capa-cartografica-de-codigos-postales">correos</a>, 6000 Euros la versión sin actualizaciones.. Bueno, si hacienda y correos somos todos me gustaría al menos poder utilizar esto actualizado sin que me cueste 6k.</p>
<p>Vamos a cargar la capa, obtener los centroides, pasar la geometría a longitud y latitud</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span></code></pre></div>
<pre><code>## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──
## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4
## ✔ tibble  3.1.8     ✔ dplyr   1.0.9
## ✔ tidyr   1.2.0     ✔ stringr 1.4.0
## ✔ readr   2.1.2     ✔ forcats 0.5.1
## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()</code></pre>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(sf)</span></code></pre></div>
<pre><code>## Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE</code></pre>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cod_postales_raw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data/cp_boundaries.rds"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>cp_num, <span class="sc" style="color: #5E5E5E;">-</span>cp_2_num)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">head</span>(cod_postales_raw)</span></code></pre></div>
<pre><code>## Simple feature collection with 6 features and 3 fields
## Geometry type: MULTIPOLYGON
## Dimension:     XY
## Bounding box:  xmin: -1536953 ymin: 3373964 xmax: -41802.13 ymax: 5247186
## Projected CRS: WGS 84 / Pseudo-Mercator
##      cp cp_2   area_m2                       geometry
## 1 35560   35 187875455 MULTIPOLYGON (((-1518970 33...
## 2 27330   27   6659413 MULTIPOLYGON (((-821864.3 5...
## 3 46680   46  69190773 MULTIPOLYGON (((-51610.46 4...
## 4 49706   49  90229134 MULTIPOLYGON (((-641488.4 5...
## 5 21120   21  20068648 MULTIPOLYGON (((-776955.2 4...
## 6 16623   16 132859998 MULTIPOLYGON (((-256256.7 4...</code></pre>
<p>Pintamos algunos códigos</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">st_geometry</span>(cod_postales_raw[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>, ]))</span></code></pre></div>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-3-1.png" width="672"></p>
<p>Para obtener los centroides, usamos la función <code>st_centroid</code> y pasamos la capa de polígonos a una de puntos</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">cod_postales_raw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st_centroid</span>(cod_postales_raw)</span></code></pre></div>
<pre><code>## Warning in st_centroid.sf(cod_postales_raw): st_centroid assumes attributes are
## constant over geometries of x</code></pre>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">head</span>(cod_postales_raw)</span></code></pre></div>
<pre><code>## Simple feature collection with 6 features and 3 fields
## Geometry type: POINT
## Dimension:     XY
## Bounding box:  xmin: -1525406 ymin: 3382025 xmax: -47782.92 ymax: 5245455
## Projected CRS: WGS 84 / Pseudo-Mercator
##      cp cp_2   area_m2                  geometry
## 1 35560   35 187875455  POINT (-1525406 3382025)
## 2 27330   27   6659413 POINT (-823274.9 5245455)
## 3 46680   46  69190773 POINT (-47782.92 4752325)
## 4 49706   49  90229134 POINT (-637415.5 5057096)
## 5 21120   21  20068648 POINT (-778872.1 4479315)
## 6 16623   16 132859998 POINT (-262034.3 4818194)</code></pre>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">st_geometry</span>(cod_postales_raw[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>, ]), <span class="at" style="color: #657422;">cex =</span> <span class="fl" style="color: #AD0000;">0.2</span>)</span></code></pre></div>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-4-1.png" width="672"></p>
<p>Ahora extraemos de la geometría la longitud y latitud. Para eso hay que transformar la geometría.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">cod_postales_raw <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">st_transform</span>(<span class="st" style="color: #20794D;">"+proj=longlat +ellps=WGS84 +datum=WGS84"</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4">cod_postales <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb13-6">    <span class="at" style="color: #657422;">centroide_longitud =</span> <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">map</span>(geometry, <span class="dv" style="color: #AD0000;">1</span>)),</span>
<span id="cb13-7">    <span class="at" style="color: #657422;">centroide_latitud =</span> <span class="fu" style="color: #4758AB;">unlist</span>(<span class="fu" style="color: #4758AB;">map</span>(geometry, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb13-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">st_drop_geometry</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># quitamos la geometría y nos quedamos solo con la longitud y latitud</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">rename</span>(</span>
<span id="cb13-11">    <span class="at" style="color: #657422;">cod_postal =</span> cp,</span>
<span id="cb13-12">    <span class="at" style="color: #657422;">cod_prov =</span> cp_2</span>
<span id="cb13-13">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-14">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(centroide_longitud)) <span class="co" style="color: #5E5E5E;"># tenía un polígono con NAS</span></span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="fu" style="color: #4758AB;">head</span>(cod_postales)</span></code></pre></div>
<pre><code>##   cod_postal cod_prov   area_m2 centroide_longitud centroide_latitud
## 1      35560       35 187875455        -13.7029565          29.05011
## 2      27330       27   6659413         -7.3956047          42.56144
## 3      46680       46  69190773         -0.4292412          39.21368
## 4      49706       49  90229134         -5.7260007          41.30272
## 5      21120       21  20068648         -6.9967272          37.28791
## 6      16623       16 132859998         -2.3538946          39.67063</code></pre>
<p>Por otro lado me interesa añadir el literal de provincia, tengo una tabla extraída del INE con la correspondencia entre cod_prov y el literal</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">provincia <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(here<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">here</span>(<span class="st" style="color: #20794D;">"data/codprov.csv"</span>))</span></code></pre></div>
<pre><code>## Rows: 52 Columns: 2
## ── Column specification ────────────────────────────────────────────────────────
## Delimiter: ","
## chr (2): CODIGO, LITERAL
## 
## ℹ Use `spec()` to retrieve the full column specification for this data.
## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.</code></pre>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">head</span>(provincia)</span></code></pre></div>
<pre><code>## # A tibble: 6 × 2
##   CODIGO LITERAL         
##   &lt;chr&gt;  &lt;chr&gt;           
## 1 02     Albacete        
## 2 03     Alicante/Alacant
## 3 04     Almería         
## 4 01     Araba/Álava     
## 5 33     Asturias        
## 6 05     Ávila</code></pre>
<p>Normalizo a mayúsculas y sin tildes y se lo pego a los códigos postales</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">provincia <span class="ot" style="color: #003B4F;">&lt;-</span> provincia <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">provincia =</span> <span class="fu" style="color: #4758AB;">toupper</span>(stringi<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">stri_trans_general</span>(LITERAL, <span class="st" style="color: #20794D;">"Latin-ASCII"</span>)))</span>
<span id="cb19-3"></span>
<span id="cb19-4">cod_postales <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;">left_join</span>(provincia <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb19-6">    <span class="fu" style="color: #4758AB;">select</span>(</span>
<span id="cb19-7">      CODIGO,</span>
<span id="cb19-8">      provincia</span>
<span id="cb19-9">    ),</span>
<span id="cb19-10">  <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"cod_prov"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"CODIGO"</span>)</span>
<span id="cb19-11">  )</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="fu" style="color: #4758AB;">dim</span>(cod_postales)</span></code></pre></div>
<pre><code>## [1] 10808     6</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">head</span>(cod_postales <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;">select</span>(provincia, cod_prov, <span class="fu" style="color: #4758AB;">everything</span>()))</span></code></pre></div>
<pre><code>##           provincia cod_prov cod_postal   area_m2 centroide_longitud
## 1       PALMAS, LAS       35      35560 187875455        -13.7029565
## 2              LUGO       27      27330   6659413         -7.3956047
## 3 VALENCIA/VALENCIA       46      46680  69190773         -0.4292412
## 4            ZAMORA       49      49706  90229134         -5.7260007
## 5            HUELVA       21      21120  20068648         -6.9967272
## 6            CUENCA       16      16623 132859998         -2.3538946
##   centroide_latitud
## 1          29.05011
## 2          42.56144
## 3          39.21368
## 4          41.30272
## 5          37.28791
## 6          39.67063</code></pre>
</section>
<section id="datos-ficticios-de-las-sedes-de-las-empresas" class="level3">
<h3 class="anchored" data-anchor-id="datos-ficticios-de-las-sedes-de-las-empresas">Datos ficticios de las sedes de las empresas</h3>
<p>Lo que voy a hacer es seleccionar aleatoriamente un número de códigos postales en cada provincia, que serán las sedes de la empresa. En cada provincia pongo al menos a un empleado de tipo = “jefe”. Luego, reparto de forma aleatoria entre los códigos postales que han sido elegidos como sedes otros 120 jefes y 480 indios.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">155</span>)</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="do" style="color: #5E5E5E;
font-style: italic;">## En cada provincia nos quedamos con  un 6% de códigos postales</span></span>
<span id="cb23-4"></span>
<span id="cb23-5">sedes_alea <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-6">  <span class="fu" style="color: #4758AB;">group_by</span>(provincia) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-7">  <span class="fu" style="color: #4758AB;">slice_sample</span>(<span class="at" style="color: #657422;">prop =</span> <span class="fl" style="color: #AD0000;">0.06</span>)</span>
<span id="cb23-8"></span>
<span id="cb23-9"></span>
<span id="cb23-10"></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;"># en cada provincia al menos un jefe y resto de empleados de forma aleatoria, en las diferentes sedes elegidas</span></span>
<span id="cb23-12"></span>
<span id="cb23-13">personal <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb23-14">  sedes_alea <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-15">    <span class="fu" style="color: #4758AB;">select</span>(provincia, cod_postal) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-16">    <span class="fu" style="color: #4758AB;">group_by</span>(provincia) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-17">    <span class="fu" style="color: #4758AB;">slice_sample</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-18">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-19">    <span class="fu" style="color: #4758AB;">select</span>(cod_postal) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb23-20">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tipo =</span> <span class="st" style="color: #20794D;">"jefe"</span>),</span>
<span id="cb23-21">  <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb23-22">    <span class="at" style="color: #657422;">tipo =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"jefe"</span>, <span class="dv" style="color: #AD0000;">120</span>), <span class="fu" style="color: #4758AB;">rep</span>(<span class="st" style="color: #20794D;">"indio"</span>, <span class="dv" style="color: #AD0000;">360</span>)),</span>
<span id="cb23-23">    <span class="at" style="color: #657422;">cod_postal =</span> <span class="fu" style="color: #4758AB;">sample</span>(sedes_alea<span class="sc" style="color: #5E5E5E;">$</span>cod_postal, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">480</span>, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb23-24">  )</span>
<span id="cb23-25">)</span></code></pre></div>
<p>Creamos data set sedes</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">sedes <span class="ot" style="color: #003B4F;">&lt;-</span> personal <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;">left_join</span>(sedes_alea)</span></code></pre></div>
<pre><code>## Joining, by = "cod_postal"</code></pre>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">dim</span>(sedes)</span></code></pre></div>
<pre><code>## [1] 530   7</code></pre>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;">sample_n</span>(sedes, <span class="dv" style="color: #AD0000;">7</span>)</span></code></pre></div>
<pre><code>## # A tibble: 7 × 7
##   cod_postal tipo  cod_prov    area_m2 centroide_longitud centroide_la…¹ provi…²
##   &lt;fct&gt;      &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;              &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;  
## 1 37660      indio 37        36448279.              -5.99           40.5 SALAMA…
## 2 41770      jefe  41       183345907.              -5.55           37.0 SEVILLA
## 3 08011      jefe  08          968836.               2.16           41.4 BARCEL…
## 4 34479      indio 34        49891663.              -4.42           42.4 PALENC…
## 5 34859      indio 34       118812672.              -4.59           42.8 PALENC…
## 6 09348      indio 09       249695400.              -3.61           42.0 BURGOS 
## 7 29750      indio 29        14389642.              -4.04           36.8 MALAGA 
## # … with abbreviated variable names ¹​centroide_latitud, ²​provincia</code></pre>
</section>
</section>
<section id="io-al-servicio-del-mal-en-granada" class="level2">
<h2 class="anchored" data-anchor-id="io-al-servicio-del-mal-en-granada">IO al servicio del mal en GRANADA</h2>
<p>Como ejemplo, vamos a ver como sería para Granada</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">cod_postales_granada <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;">filter</span>(provincia <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"GRANADA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">row_number</span>())</span>
<span id="cb30-4"></span>
<span id="cb30-5">sedes_granada <span class="ot" style="color: #003B4F;">&lt;-</span> sedes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-6">  <span class="fu" style="color: #4758AB;">filter</span>(provincia <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"GRANADA"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-7">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(tipo)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb30-8">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id_sede =</span> <span class="fu" style="color: #4758AB;">row_number</span>())</span>
<span id="cb30-9"></span>
<span id="cb30-10">sedes_granada</span></code></pre></div>
<pre><code>## # A tibble: 11 × 8
##    cod_postal tipo  cod_prov    area_m2 centroide_long…¹ centr…² provi…³ id_sede
##    &lt;fct&gt;      &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;            &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt;
##  1 18328      jefe  18        58574459.            -3.87    37.2 GRANADA       1
##  2 18006      jefe  18         3245912.            -3.61    37.2 GRANADA       2
##  3 18516      jefe  18       146541813.            -3.24    37.2 GRANADA       3
##  4 18516      jefe  18       146541813.            -3.24    37.2 GRANADA       4
##  5 18197      indio 18        10003524.            -3.61    37.2 GRANADA       5
##  6 18516      indio 18       146541813.            -3.24    37.2 GRANADA       6
##  7 18414      indio 18        40411565.            -3.34    36.9 GRANADA       7
##  8 18197      indio 18        10003524.            -3.61    37.2 GRANADA       8
##  9 18369      indio 18        17670871.            -4.01    37.2 GRANADA       9
## 10 18611      indio 18        33542783.            -3.60    36.8 GRANADA      10
## 11 18514      indio 18       110524485.            -3.08    37.2 GRANADA      11
## # … with abbreviated variable names ¹​centroide_longitud, ²​centroide_latitud,
## #   ³​provincia</code></pre>
<p>Es importante haber ordenado por tipo , porque vamos a utilizar el mismo índice <code>j</code> para empleados jefe y empleados indios.</p>
<p>Ahora definimos: * <code>m</code> como el número de empleados en las sedes de Granada * <code>n</code> como el número de códigos postales a asignar en Granada * <code>n_sedes</code> como el número de sedes * <code>njefes</code> como el número de jefes * <code>n_indios</code> como el número de indios</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">nrow</span>(sedes_granada)</span>
<span id="cb32-2">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">nrow</span>(cod_postales_granada)</span>
<span id="cb32-3">n_sedes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">unique</span>(sedes_granada<span class="sc" style="color: #5E5E5E;">$</span>cod_postal))</span>
<span id="cb32-4"></span>
<span id="cb32-5">njefes <span class="ot" style="color: #003B4F;">&lt;-</span> sedes_granada <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-6">  <span class="fu" style="color: #4758AB;">filter</span>(tipo <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"jefe"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-7">  <span class="fu" style="color: #4758AB;">count</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb32-8">  <span class="fu" style="color: #4758AB;">pull</span>(n)</span>
<span id="cb32-9"></span>
<span id="cb32-10">n_indios <span class="ot" style="color: #003B4F;">&lt;-</span> m <span class="sc" style="color: #5E5E5E;">-</span> njefes</span></code></pre></div>
<p>Necesitamos definir una función de distancia entre los códigos postales a asignar y las sedes. Para eso usamos la distancia Haversine que está implementada en la librería <code>geosphere</code>. Y aquí ya introducimos uno de los requerimientos. Básicamente aumentamos la distancia un 10% si el empleado es un jefe, de forma que sea peor asignarle ese código postal al jefe en términos de minimizar el total de distancias.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">transportcost_granada <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(i, j) {</span>
<span id="cb33-2">  cliente <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales_granada[i, ]</span>
<span id="cb33-3">  comercial <span class="ot" style="color: #003B4F;">&lt;-</span> sedes_granada[j, ]</span>
<span id="cb33-4">  distancia <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb33-5">    geosphere<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">distHaversine</span>(</span>
<span id="cb33-6">      <span class="fu" style="color: #4758AB;">c</span>(cliente<span class="sc" style="color: #5E5E5E;">$</span>centroide_longitud, cliente<span class="sc" style="color: #5E5E5E;">$</span>centroide_latitud),</span>
<span id="cb33-7">      <span class="fu" style="color: #4758AB;">c</span>(comercial<span class="sc" style="color: #5E5E5E;">$</span>centroide_longitud, comercial<span class="sc" style="color: #5E5E5E;">$</span>centroide_latitud)</span>
<span id="cb33-8">    )</span>
<span id="cb33-9"></span>
<span id="cb33-10">  <span class="cf" style="color: #003B4F;">if</span> (comercial[, <span class="st" style="color: #20794D;">"tipo"</span>] <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"jefe"</span>) {</span>
<span id="cb33-11">    distancia <span class="ot" style="color: #003B4F;">&lt;-</span> distancia <span class="sc" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.1</span></span>
<span id="cb33-12">  }</span>
<span id="cb33-13"></span>
<span id="cb33-14">  <span class="fu" style="color: #4758AB;">return</span>(distancia <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1000</span>) <span class="co" style="color: #5E5E5E;"># devolvemos la disancia en km</span></span>
<span id="cb33-15">}</span>
<span id="cb33-16"></span>
<span id="cb33-17"><span class="co" style="color: #5E5E5E;"># distancia entre sede 1 y empleado 3</span></span>
<span id="cb33-18"><span class="fu" style="color: #4758AB;">transportcost_granada</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<pre><code>## [1] 51.54738</code></pre>
<p>Pintamos los códigos postales y las sedes. Los granadinos reconoceremos la forma de la provincia.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">p <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;">ggplot</span>(</span>
<span id="cb35-3">    cod_postales_granada,</span>
<span id="cb35-4">    <span class="fu" style="color: #4758AB;">aes</span>(centroide_longitud, centroide_latitud)</span>
<span id="cb35-5">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb35-6">  <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">rel</span>(<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb35-7">  <span class="fu" style="color: #4758AB;">geom_point</span>(</span>
<span id="cb35-8">    <span class="at" style="color: #657422;">data =</span> sedes_granada,</span>
<span id="cb35-9">    <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">rel</span>(<span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb35-10">    <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkorange"</span></span>
<span id="cb35-11">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb35-12">  <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb35-13">    <span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb35-14">    <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb35-15">    <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb35-16">    <span class="at" style="color: #657422;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()</span>
<span id="cb35-17">  )</span>
<span id="cb35-18">p <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="st" style="color: #20794D;">"Sin asignar"</span>)</span></code></pre></div>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-13-1.png" width="672"></p>
</section>
<section id="optimización" class="level2">
<h2 class="anchored" data-anchor-id="optimización">Optimización</h2>
<p>Para optimizar el problema vamos a usar la librería <code>ompr</code> que permite plantear el problema de optimización lineal entera de forma sencilla, y se conecta a la librería <code>ROI</code> que es la que al final llama al solver. Como solver vamos a utilizar <code>glpk</code> que es software libre y lo suficientemente bueno para este ejemplo.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">library</span>(ompr)</span>
<span id="cb36-2"><span class="fu" style="color: #4758AB;">library</span>(ompr.roi)</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;">library</span>(ROI.plugin.glpk)</span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;">library</span>(patchwork) <span class="co" style="color: #5E5E5E;"># pa unir los ggplots resultantes</span></span></code></pre></div>
<p>Definimos el modelo</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">mip_model_granada <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">MIPModel</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-2">  <span class="co" style="color: #5E5E5E;"># variable indicadora que indica si una tienda i se asigna a comercial j</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;">add_variable</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"binary"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-4">  <span class="co" style="color: #5E5E5E;"># Minimizar el objetivo de distancia</span></span>
<span id="cb37-5">  <span class="fu" style="color: #4758AB;">set_objective</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(<span class="fu" style="color: #4758AB;">transportcost_granada</span>(i, j) <span class="sc" style="color: #5E5E5E;">*</span> x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m), <span class="st" style="color: #20794D;">"min"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-6">  <span class="co" style="color: #5E5E5E;"># cada tienda (código postal) solo debe ir a un comerciial. el comercial puede atender varios</span></span>
<span id="cb37-7">  <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-8">  <span class="co" style="color: #5E5E5E;"># todo el mundo tiene que atender al minimo a una tienda</span></span>
<span id="cb37-9">  <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-10">  <span class="co" style="color: #5E5E5E;">#   Los jefes curran menos, como máximo 7 tiendas</span></span>
<span id="cb37-11">  <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>njefes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-12">  <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb37-13">  <span class="co" style="color: #5E5E5E;"># # Los indios al menos atienden a 3 tiendas</span></span>
<span id="cb37-14">  <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">j =</span> (njefes <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-15">  <span class="co" style="color: #5E5E5E;"># para no sobrecargar mucho a los indios, les pongo un máximo que sea 1.5 veces el núemro de tiendas entre total currantes (jefes + indios)</span></span>
<span id="cb37-16">  <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fl" style="color: #AD0000;">1.5</span> <span class="sc" style="color: #5E5E5E;">*</span> n <span class="sc" style="color: #5E5E5E;">/</span> m), <span class="at" style="color: #657422;">j =</span> (njefes <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb37-17">  <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">sum_over</span>(x[i, k], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n), <span class="at" style="color: #657422;">j =</span> (njefes <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span>m, <span class="at" style="color: #657422;">k =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>njefes)</span></code></pre></div>
<p>Algunas aclaraciones de la sintaxis anterior.</p>
<ul>
<li><p>Nuestra variable auxilizar es <code>\(X_{i,j}\)</code> dónde la i son los códigos postales y la j cada empleado.</p></li>
<li><p>Se trata de minimizar la suma total de distancias cuando se asigna un código postal a un empleado, para todos los códigos postales y todos los empleados.</p></li>
<li><p>La restricción <code>add_constraint(sum_over(x[i, j], j = 1:m) == 1  , i = 1:n)</code> si nos fijamos en el sum_over significa sumar en j (empleados) para cada código postal (i) y que esa suma valga 1. Es decir, para cada código postal (i) sólo se permite que sea asignado a un empleado</p></li>
<li><p><code>add_constraint(sum_over(x[i, j], i = 1:n) &gt;= 1  , j = 1:m)</code> Que para cada empleado (j) la suma de todos los códigos postales que se le asignen sea mayor o igual que 1. Vamos que no se quede ninguno ocioso.</p></li>
<li><p><code>add_constraint(sum_over( x[i,j], i = 1:n)  &lt;= 7, j = 1:njefes)</code> por eso ordeanmos por tipo para que el índice 1:njefes corresponda a los empleados jefes, esta restricción asegura que a un jefe no se le asignen más de 7 códigos postales.</p></li>
<li><p><code>add_constraint(sum_over( x[i,j], i = 1:n)  &gt;=  3 , j = (njefes +1):m)</code> Mínimo 3 códigos postales para los indios.</p></li>
<li><p><code>add_constraint(sum_over( x[i,j], i = 1:n)  &lt;=  round(1.5 * n/m) , j = (njefes +1):m)</code> Esta restricción intenta equilibrar el número de asignaciones para los indios, de forma que como mucho a un empleado tenga 1.5 veces la media de códigos postales por empleado.</p></li>
<li><p><code>add_constraint(sum_over( x[i,j], i = 1:n)  &gt;=  sum_over( x[i,k], i = 1:n) , j = (njefes +1):m, k = 1:njefes)</code> En esta restricción es dónde aseguramos que ningún empleado tenga menos asignaciones que ningún jefe, por eso se ha usado el índice k.</p></li>
</ul>
<p>Pues el problema tiene 2200 variables (todas binarias) y 257 restricciones.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">mip_model_granada</span></code></pre></div>
<pre><code>## Mixed integer linear optimization problem
## Variables:
##   Continuous: 0 
##   Integer: 0 
##   Binary: 2200 
## Model sense: minimize 
## Constraints: 257</code></pre>
<p>Resolvemos con glpk</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">result_granada <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">solve_model</span>(mip_model_granada, <span class="fu" style="color: #4758AB;">with_ROI</span>(<span class="at" style="color: #657422;">solver =</span> <span class="st" style="color: #20794D;">"glpk"</span>, <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span></code></pre></div>
<pre><code>## &lt;SOLVER MSG&gt;  ----
## GLPK Simplex Optimizer, v4.65
## 257 rows, 2200 columns, 19200 non-zeros
##       0: obj =   0.000000000e+00 inf =   2.320e+02 (218)
##     397: obj =   9.427540716e+03 inf =   5.627e-13 (0) 1
## *   870: obj =   3.723682515e+03 inf =   0.000e+00 (0) 2
## OPTIMAL LP SOLUTION FOUND
## GLPK Integer Optimizer, v4.65
## 257 rows, 2200 columns, 19200 non-zeros
## 2200 integer variables, all of which are binary
## Integer optimization begins...
## Long-step dual simplex will be used
## +   870: mip =     not found yet &gt;=              -inf        (1; 0)
## +   870: &gt;&gt;&gt;&gt;&gt;   3.723682515e+03 &gt;=   3.723682515e+03   0.0% (1; 0)
## +   870: mip =   3.723682515e+03 &gt;=     tree is empty   0.0% (0; 1)
## INTEGER OPTIMAL SOLUTION FOUND
## &lt;!SOLVER MSG&gt; ----</code></pre>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">result_granada</span></code></pre></div>
<pre><code>## Status: success
## Objective value: 3723.683</code></pre>
<p>Y ahora procedemos a ver las asignaciones. Para eso utilizamos la función <code>get_solution</code> que nos va a devolver la solución obtenida para nuestra variable <code>\(X_{i,j}\)</code></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">matching <span class="ot" style="color: #003B4F;">&lt;-</span> result_granada <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;">get_solution</span>(x[i, j]) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;">select</span>(i, j, value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb44-4">  <span class="fu" style="color: #4758AB;">filter</span>(value <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># nons quedamos con las asignaciones</span></span>
<span id="cb44-5"></span>
<span id="cb44-6">matching</span></code></pre></div>
<pre><code>##       i  j value
## 1    16  1     1
## 2    27  1     1
## 3    55  1     1
## 4    68  1     1
## 5   119  1     1
## 6   157  1     1
## 7   173  1     1
## 8    13  2     1
## 9    37  2     1
## 10   96  2     1
## 11  113  2     1
## 12  161  2     1
## 13  169  2     1
## 14  178  2     1
## 15  141  3     1
## 16   34  4     1
## 17    1  5     1
## 18    8  5     1
## 19   23  5     1
## 20   30  5     1
## 21   32  5     1
## 22   71  5     1
## 23   98  5     1
## 24  102  5     1
## 25  108  5     1
## 26  112  5     1
## 27  117  5     1
## 28  120  5     1
## 29  122  5     1
## 30  124  5     1
## 31  130  5     1
## 32  132  5     1
## 33  134  5     1
## 34  137  5     1
## 35  138  5     1
## 36  140  5     1
## 37  149  5     1
## 38  170  5     1
## 39  182  5     1
## 40  191  5     1
## 41  192  5     1
## 42  194  5     1
## 43  198  5     1
## 44   10  6     1
## 45   15  6     1
## 46   20  6     1
## 47   65  6     1
## 48   69  6     1
## 49   82  6     1
## 50   83  6     1
## 51   86  6     1
## 52   87  6     1
## 53   92  6     1
## 54   93  6     1
## 55  116  6     1
## 56  128  6     1
## 57  133  6     1
## 58  135  6     1
## 59  144  6     1
## 60  151  6     1
## 61  153  6     1
## 62  163  6     1
## 63  168  6     1
## 64  174  6     1
## 65  177  6     1
## 66  190  6     1
## 67  199  6     1
## 68    2  7     1
## 69    5  7     1
## 70    6  7     1
## 71    7  7     1
## 72   11  7     1
## 73   12  7     1
## 74   17  7     1
## 75   24  7     1
## 76   26  7     1
## 77   28  7     1
## 78   31  7     1
## 79   44  7     1
## 80   48  7     1
## 81   53  7     1
## 82   56  7     1
## 83   72  7     1
## 84   77  7     1
## 85   91  7     1
## 86  104  7     1
## 87  105  7     1
## 88  131  7     1
## 89  147  7     1
## 90  156  7     1
## 91  166  7     1
## 92  171  7     1
## 93  187  7     1
## 94  193  7     1
## 95   14  8     1
## 96   39  8     1
## 97   40  8     1
## 98   47  8     1
## 99   54  8     1
## 100  59  8     1
## 101  60  8     1
## 102  62  8     1
## 103  70  8     1
## 104  73  8     1
## 105  75  8     1
## 106  78  8     1
## 107  79  8     1
## 108  84  8     1
## 109  85  8     1
## 110  90  8     1
## 111  97  8     1
## 112  99  8     1
## 113 101  8     1
## 114 109  8     1
## 115 110  8     1
## 116 118  8     1
## 117 126  8     1
## 118 167  8     1
## 119 185  8     1
## 120 189  8     1
## 121 195  8     1
## 122   9  9     1
## 123  25  9     1
## 124  29  9     1
## 125  33  9     1
## 126  35  9     1
## 127  46  9     1
## 128  50  9     1
## 129  51  9     1
## 130  57  9     1
## 131  63  9     1
## 132  67  9     1
## 133  74  9     1
## 134  80  9     1
## 135  88  9     1
## 136 103  9     1
## 137 107  9     1
## 138 111  9     1
## 139 114  9     1
## 140 115  9     1
## 141 125  9     1
## 142 136  9     1
## 143 162  9     1
## 144 172  9     1
## 145 175  9     1
## 146 179  9     1
## 147 180  9     1
## 148 196  9     1
## 149   3 10     1
## 150   4 10     1
## 151  22 10     1
## 152  36 10     1
## 153  38 10     1
## 154  45 10     1
## 155  49 10     1
## 156  61 10     1
## 157  64 10     1
## 158  76 10     1
## 159  89 10     1
## 160 106 10     1
## 161 127 10     1
## 162 129 10     1
## 163 139 10     1
## 164 143 10     1
## 165 148 10     1
## 166 152 10     1
## 167 154 10     1
## 168 155 10     1
## 169 159 10     1
## 170 176 10     1
## 171 181 10     1
## 172 183 10     1
## 173 186 10     1
## 174  18 11     1
## 175  19 11     1
## 176  21 11     1
## 177  41 11     1
## 178  42 11     1
## 179  43 11     1
## 180  52 11     1
## 181  58 11     1
## 182  66 11     1
## 183  81 11     1
## 184  94 11     1
## 185  95 11     1
## 186 100 11     1
## 187 121 11     1
## 188 123 11     1
## 189 142 11     1
## 190 145 11     1
## 191 146 11     1
## 192 150 11     1
## 193 158 11     1
## 194 160 11     1
## 195 164 11     1
## 196 165 11     1
## 197 184 11     1
## 198 188 11     1
## 199 197 11     1
## 200 200 11     1</code></pre>
<p>Ahora vemos cuántas asignaciones tiene cada empleado y pintamos los resultados</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">asignaciones <span class="ot" style="color: #003B4F;">&lt;-</span> matching <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb46-2">  <span class="fu" style="color: #4758AB;">group_by</span>(j) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb46-3">  <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">asignaciones =</span> <span class="fu" style="color: #4758AB;">sum</span>(value)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb46-4">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(asignaciones)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb46-5">  <span class="fu" style="color: #4758AB;">left_join</span>(sedes_granada, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"j"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id_sede"</span>))</span>
<span id="cb46-6"></span>
<span id="cb46-7">asignaciones</span></code></pre></div>
<pre><code>## # A tibble: 11 × 9
##        j asignaciones cod_postal tipo  cod_prov  area_m2 centr…¹ centr…² provi…³
##    &lt;int&gt;        &lt;dbl&gt; &lt;fct&gt;      &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  
##  1     5           27 18197      indio 18         1.00e7   -3.61    37.2 GRANADA
##  2     7           27 18414      indio 18         4.04e7   -3.34    36.9 GRANADA
##  3     8           27 18197      indio 18         1.00e7   -3.61    37.2 GRANADA
##  4     9           27 18369      indio 18         1.77e7   -4.01    37.2 GRANADA
##  5    11           27 18514      indio 18         1.11e8   -3.08    37.2 GRANADA
##  6    10           25 18611      indio 18         3.35e7   -3.60    36.8 GRANADA
##  7     6           24 18516      indio 18         1.47e8   -3.24    37.2 GRANADA
##  8     1            7 18328      jefe  18         5.86e7   -3.87    37.2 GRANADA
##  9     2            7 18006      jefe  18         3.25e6   -3.61    37.2 GRANADA
## 10     3            1 18516      jefe  18         1.47e8   -3.24    37.2 GRANADA
## 11     4            1 18516      jefe  18         1.47e8   -3.24    37.2 GRANADA
## # … with abbreviated variable names ¹​centroide_longitud, ²​centroide_latitud,
## #   ³​provincia</code></pre>
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">plot_assignment <span class="ot" style="color: #003B4F;">&lt;-</span> matching <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">inner_join</span>(cod_postales_granada, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"i"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;">inner_join</span>(sedes_granada, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"j"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id_sede"</span>), <span class="at" style="color: #657422;">suffix =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"_clientes"</span>, <span class="st" style="color: #20794D;">"_comerciales"</span>))</span>
<span id="cb48-4"></span>
<span id="cb48-5"></span>
<span id="cb48-6"></span>
<span id="cb48-7"></span>
<span id="cb48-8"></span>
<span id="cb48-9">p_jefes <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-10">  <span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb48-11">    <span class="at" style="color: #657422;">data =</span> plot_assignment <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb48-12">      <span class="fu" style="color: #4758AB;">filter</span>(tipo <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"jefe"</span>),</span>
<span id="cb48-13">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb48-14">      <span class="at" style="color: #657422;">x =</span> centroide_longitud_comerciales,</span>
<span id="cb48-15">      <span class="at" style="color: #657422;">y =</span> centroide_latitud_comerciales,</span>
<span id="cb48-16">      <span class="at" style="color: #657422;">xend =</span> centroide_longitud_clientes,</span>
<span id="cb48-17">      <span class="at" style="color: #657422;">yend =</span> centroide_latitud_clientes</span>
<span id="cb48-18">    )</span>
<span id="cb48-19">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-20">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Asignaciones para los jefes"</span>))</span>
<span id="cb48-21"></span>
<span id="cb48-22"></span>
<span id="cb48-23">p_indios <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-24">  <span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb48-25">    <span class="at" style="color: #657422;">data =</span> plot_assignment <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb48-26">      <span class="fu" style="color: #4758AB;">filter</span>(tipo <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"indio"</span>),</span>
<span id="cb48-27">    <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb48-28">      <span class="at" style="color: #657422;">x =</span> centroide_longitud_comerciales,</span>
<span id="cb48-29">      <span class="at" style="color: #657422;">y =</span> centroide_latitud_comerciales,</span>
<span id="cb48-30">      <span class="at" style="color: #657422;">xend =</span> centroide_longitud_clientes,</span>
<span id="cb48-31">      <span class="at" style="color: #657422;">yend =</span> centroide_latitud_clientes</span>
<span id="cb48-32">    )</span>
<span id="cb48-33">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-34">  <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Asignaciones para los indios"</span>))</span>
<span id="cb48-35"></span>
<span id="cb48-36"></span>
<span id="cb48-37">p_or <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-38">  <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb48-39">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"sin asignar"</span>,</span>
<span id="cb48-40">    <span class="at" style="color: #657422;">subtitle =</span> <span class="st" style="color: #20794D;">"Granada"</span></span>
<span id="cb48-41">  )</span>
<span id="cb48-42">p_final <span class="ot" style="color: #003B4F;">&lt;-</span> p_or <span class="sc" style="color: #5E5E5E;">/</span> p_jefes <span class="sc" style="color: #5E5E5E;">/</span> p_indios</span>
<span id="cb48-43"></span>
<span id="cb48-44">p_final</span></code></pre></div>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-21-1.png" width="384"></p>
</section>
<section id="io-al-servicio-del-mal-eligiendo-provincia" class="level2">
<h2 class="anchored" data-anchor-id="io-al-servicio-del-mal-eligiendo-provincia">IO al servicio del mal eligiendo provincia</h2>
<p>Creo función (francamente mejorable y modularizable) para poder elegir provincia o provincias</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">get_asignaciones_x_provincia <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">cod_postales =</span> cod_postales, <span class="at" style="color: #657422;">sedes =</span> sedes,</span>
<span id="cb49-2">                                         <span class="at" style="color: #657422;">provincia_sel =</span> <span class="st" style="color: #20794D;">"MADRID"</span>, <span class="at" style="color: #657422;">plot =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, ...) {</span>
<span id="cb49-3">  cod_postales_filt <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-4">    <span class="fu" style="color: #4758AB;">filter</span>(provincia <span class="sc" style="color: #5E5E5E;">%in%</span> provincia_sel) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-5">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id =</span> <span class="fu" style="color: #4758AB;">row_number</span>())</span>
<span id="cb49-6"></span>
<span id="cb49-7">  sedes_filt <span class="ot" style="color: #003B4F;">&lt;-</span> sedes <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-8">    <span class="fu" style="color: #4758AB;">filter</span>(provincia <span class="sc" style="color: #5E5E5E;">%in%</span> provincia_sel) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-9">    <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(tipo)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-10">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">id_sede =</span> <span class="fu" style="color: #4758AB;">row_number</span>())</span>
<span id="cb49-11"></span>
<span id="cb49-12">  m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">nrow</span>(sedes_filt)</span>
<span id="cb49-13">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">nrow</span>(cod_postales_filt)</span>
<span id="cb49-14">  n_sedes <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(<span class="fu" style="color: #4758AB;">unique</span>(sedes_filt<span class="sc" style="color: #5E5E5E;">$</span>cod_postal))</span>
<span id="cb49-15"></span>
<span id="cb49-16">  njefes <span class="ot" style="color: #003B4F;">&lt;-</span> sedes_filt <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-17">    <span class="fu" style="color: #4758AB;">filter</span>(tipo <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"jefe"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-18">    <span class="fu" style="color: #4758AB;">count</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-19">    <span class="fu" style="color: #4758AB;">pull</span>(n)</span>
<span id="cb49-20"></span>
<span id="cb49-21">  n_indios <span class="ot" style="color: #003B4F;">&lt;-</span> m <span class="sc" style="color: #5E5E5E;">-</span> njefes</span>
<span id="cb49-22"></span>
<span id="cb49-23">  transportcost <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(i, j) {</span>
<span id="cb49-24">    cliente <span class="ot" style="color: #003B4F;">&lt;-</span> cod_postales_filt[i, ]</span>
<span id="cb49-25">    comercial <span class="ot" style="color: #003B4F;">&lt;-</span> sedes_filt[j, ]</span>
<span id="cb49-26">    distancia <span class="ot" style="color: #003B4F;">&lt;-</span> geosphere<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">distHaversine</span>(</span>
<span id="cb49-27">      <span class="fu" style="color: #4758AB;">c</span>(cliente<span class="sc" style="color: #5E5E5E;">$</span>centroide_longitud, cliente<span class="sc" style="color: #5E5E5E;">$</span>centroide_latitud),</span>
<span id="cb49-28">      <span class="fu" style="color: #4758AB;">c</span>(comercial<span class="sc" style="color: #5E5E5E;">$</span>centroide_longitud, comercial<span class="sc" style="color: #5E5E5E;">$</span>centroide_latitud)</span>
<span id="cb49-29">    )</span>
<span id="cb49-30"></span>
<span id="cb49-31">    <span class="cf" style="color: #003B4F;">if</span> (comercial[, <span class="st" style="color: #20794D;">"tipo"</span>] <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"jefe"</span>) distancia <span class="ot" style="color: #003B4F;">&lt;-</span> distancia <span class="sc" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.1</span></span>
<span id="cb49-32"></span>
<span id="cb49-33">    <span class="fu" style="color: #4758AB;">return</span>(distancia <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb49-34">  }</span>
<span id="cb49-35"></span>
<span id="cb49-36"></span>
<span id="cb49-37">  p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ggplot</span>(cod_postales_filt, <span class="fu" style="color: #4758AB;">aes</span>(centroide_longitud, centroide_latitud)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-38">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">rel</span>(<span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">shape =</span> <span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-39">    <span class="fu" style="color: #4758AB;">geom_point</span>(<span class="at" style="color: #657422;">data =</span> sedes_filt, <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">rel</span>(<span class="dv" style="color: #AD0000;">3</span>), <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"darkorange"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-40">    <span class="co" style="color: #5E5E5E;"># scale_x_continuous(limits = c(0, grid_size+1)) +</span></span>
<span id="cb49-41">    <span class="co" style="color: #5E5E5E;"># scale_y_continuous(limits = c(0, grid_size+1)) +</span></span>
<span id="cb49-42">    <span class="fu" style="color: #4758AB;">theme</span>(</span>
<span id="cb49-43">      <span class="at" style="color: #657422;">axis.title =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb49-44">      <span class="at" style="color: #657422;">axis.ticks =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(),</span>
<span id="cb49-45">      <span class="at" style="color: #657422;">axis.text =</span> <span class="fu" style="color: #4758AB;">element_blank</span>(), <span class="at" style="color: #657422;">panel.grid =</span> <span class="fu" style="color: #4758AB;">element_blank</span>()</span>
<span id="cb49-46">    )</span>
<span id="cb49-47"></span>
<span id="cb49-48">  mip_model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">MIPModel</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-49">    <span class="co" style="color: #5E5E5E;"># variable indicadora que indica si una tienda i se asigna a comercial j</span></span>
<span id="cb49-50">    <span class="fu" style="color: #4758AB;">add_variable</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"binary"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-51">    <span class="co" style="color: #5E5E5E;"># Minimizar el objetivo de distancia</span></span>
<span id="cb49-52">    <span class="fu" style="color: #4758AB;">set_objective</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(<span class="fu" style="color: #4758AB;">transportcost</span>(i, j) <span class="sc" style="color: #5E5E5E;">*</span> x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m), <span class="st" style="color: #20794D;">"min"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-53">    <span class="co" style="color: #5E5E5E;"># cada tienda (código postal) solo debe ir a un comerciial. el comercial puede atender varios</span></span>
<span id="cb49-54">    <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-55">    <span class="co" style="color: #5E5E5E;"># todo el mundo tiene que atender al minimo a una tienda</span></span>
<span id="cb49-56">    <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-57">    <span class="co" style="color: #5E5E5E;"># %&gt;%</span></span>
<span id="cb49-58"></span>
<span id="cb49-59">    <span class="co" style="color: #5E5E5E;">#   Los jefes curran menos, como máximo 7 tiendas</span></span>
<span id="cb49-60">    <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">7</span>, <span class="at" style="color: #657422;">j =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>njefes) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-61">    <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb49-62">    <span class="co" style="color: #5E5E5E;"># # Los indios al menos atienden a 3 tiendas</span></span>
<span id="cb49-63">    <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">j =</span> (njefes <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-64">    <span class="co" style="color: #5E5E5E;"># para no sobrecargar mucho a los indios, les pongo un máximo que sea 1.5 veces el núemro de tiendas entre total currantes (jefes + indios)</span></span>
<span id="cb49-65">    <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="fu" style="color: #4758AB;">round</span>(<span class="fl" style="color: #AD0000;">1.5</span> <span class="sc" style="color: #5E5E5E;">*</span> n <span class="sc" style="color: #5E5E5E;">/</span> m), <span class="at" style="color: #657422;">j =</span> (njefes <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span>m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-66">    <span class="fu" style="color: #4758AB;">add_constraint</span>(<span class="fu" style="color: #4758AB;">sum_over</span>(x[i, j], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n) <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">sum_over</span>(x[i, k], <span class="at" style="color: #657422;">i =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n), <span class="at" style="color: #657422;">j =</span> (njefes <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">:</span>m, <span class="at" style="color: #657422;">k =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>njefes)</span>
<span id="cb49-67"></span>
<span id="cb49-68"></span>
<span id="cb49-69">  result2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">solve_model</span>(mip_model, <span class="fu" style="color: #4758AB;">with_ROI</span>(<span class="at" style="color: #657422;">solver =</span> <span class="st" style="color: #20794D;">"glpk"</span>, <span class="at" style="color: #657422;">verbose =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb49-70"></span>
<span id="cb49-71"></span>
<span id="cb49-72">  matching <span class="ot" style="color: #003B4F;">&lt;-</span> result2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-73">    <span class="fu" style="color: #4758AB;">get_solution</span>(x[i, j]) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-74">    <span class="fu" style="color: #4758AB;">select</span>(i, j, value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-75">    <span class="fu" style="color: #4758AB;">filter</span>(value <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb49-76"></span>
<span id="cb49-77"></span>
<span id="cb49-78"></span>
<span id="cb49-79">  asignaciones <span class="ot" style="color: #003B4F;">&lt;-</span> matching <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-80">    <span class="fu" style="color: #4758AB;">group_by</span>(j) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-81">    <span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">asignaciones =</span> <span class="fu" style="color: #4758AB;">sum</span>(value)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-82">    <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(asignaciones)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-83">    <span class="fu" style="color: #4758AB;">left_join</span>(sedes_filt, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"j"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id_sede"</span>))</span>
<span id="cb49-84"></span>
<span id="cb49-85"></span>
<span id="cb49-86">  plot_assignment <span class="ot" style="color: #003B4F;">&lt;-</span> matching <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-87">    <span class="fu" style="color: #4758AB;">inner_join</span>(cod_postales_filt, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"i"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-88">    <span class="fu" style="color: #4758AB;">inner_join</span>(sedes_filt, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"j"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id_sede"</span>), <span class="at" style="color: #657422;">suffix =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"_clientes"</span>, <span class="st" style="color: #20794D;">"_comerciales"</span>))</span>
<span id="cb49-89"></span>
<span id="cb49-90"></span>
<span id="cb49-91"></span>
<span id="cb49-92">  p_jefes <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-93">    <span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb49-94">      <span class="at" style="color: #657422;">data =</span> plot_assignment <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-95">        <span class="fu" style="color: #4758AB;">filter</span>(tipo <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"jefe"</span>),</span>
<span id="cb49-96">      <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb49-97">        <span class="at" style="color: #657422;">x =</span> centroide_longitud_comerciales,</span>
<span id="cb49-98">        <span class="at" style="color: #657422;">y =</span> centroide_latitud_comerciales,</span>
<span id="cb49-99">        <span class="at" style="color: #657422;">xend =</span> centroide_longitud_clientes,</span>
<span id="cb49-100">        <span class="at" style="color: #657422;">yend =</span> centroide_latitud_clientes</span>
<span id="cb49-101">      )</span>
<span id="cb49-102">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-103">    <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Asignaciones para los jefes"</span>))</span>
<span id="cb49-104"></span>
<span id="cb49-105"></span>
<span id="cb49-106">  p_indios <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-107">    <span class="fu" style="color: #4758AB;">geom_segment</span>(</span>
<span id="cb49-108">      <span class="at" style="color: #657422;">data =</span> plot_assignment <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb49-109">        <span class="fu" style="color: #4758AB;">filter</span>(tipo <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"indio"</span>),</span>
<span id="cb49-110">      <span class="fu" style="color: #4758AB;">aes</span>(</span>
<span id="cb49-111">        <span class="at" style="color: #657422;">x =</span> centroide_longitud_comerciales,</span>
<span id="cb49-112">        <span class="at" style="color: #657422;">y =</span> centroide_latitud_comerciales,</span>
<span id="cb49-113">        <span class="at" style="color: #657422;">xend =</span> centroide_longitud_clientes,</span>
<span id="cb49-114">        <span class="at" style="color: #657422;">yend =</span> centroide_latitud_clientes</span>
<span id="cb49-115">      )</span>
<span id="cb49-116">    ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-117">    <span class="fu" style="color: #4758AB;">ggtitle</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Asignaciones para los indios"</span>))</span>
<span id="cb49-118"></span>
<span id="cb49-119">  subtitulo <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reduce</span>(provincia_sel, <span class="cf" style="color: #003B4F;">function</span>(x, y) <span class="fu" style="color: #4758AB;">paste</span>(x, y, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"-"</span>))</span>
<span id="cb49-120">  p_or <span class="ot" style="color: #003B4F;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb49-121">    <span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb49-122">      <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"sin asignar"</span>,</span>
<span id="cb49-123">      <span class="at" style="color: #657422;">subtitle =</span> subtitulo</span>
<span id="cb49-124">    )</span>
<span id="cb49-125">  p_final <span class="ot" style="color: #003B4F;">&lt;-</span> p_or <span class="sc" style="color: #5E5E5E;">/</span> p_jefes <span class="sc" style="color: #5E5E5E;">/</span> p_indios</span>
<span id="cb49-126"></span>
<span id="cb49-127">  <span class="cf" style="color: #003B4F;">if</span> (plot) <span class="fu" style="color: #4758AB;">print</span>(p_final)</span>
<span id="cb49-128"></span>
<span id="cb49-129">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb49-130">    <span class="at" style="color: #657422;">comerciales =</span> sedes_filt,</span>
<span id="cb49-131">    <span class="at" style="color: #657422;">cod_postales =</span> cod_postales_filt,</span>
<span id="cb49-132">    <span class="at" style="color: #657422;">matching =</span> matching, <span class="at" style="color: #657422;">tot_asignaciones =</span> asignaciones, <span class="at" style="color: #657422;">plot_final =</span> p_final</span>
<span id="cb49-133">  ))</span>
<span id="cb49-134">}</span></code></pre></div>
<p>Y veamos algunos ejemplos.</p>
<section id="madrid" class="level3">
<h3 class="anchored" data-anchor-id="madrid">MADRID</h3>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">madrid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_asignaciones_x_provincia</span>(cod_postales, sedes, <span class="at" style="color: #657422;">provincia_sel =</span> <span class="st" style="color: #20794D;">"MADRID"</span>)</span></code></pre></div>
<pre><code>## &lt;SOLVER MSG&gt;  ----
## GLPK Simplex Optimizer, v4.65
## 385 rows, 4425 columns, 45725 non-zeros
##       0: obj =   0.000000000e+00 inf =   3.400e+02 (320)
##     498: obj =   1.415569938e+04 inf =   5.690e-14 (0) 1
## Perturbing LP to avoid stalling [939]...
## Removing LP perturbation [1341]...
## *  1341: obj =   5.881701905e+03 inf =   0.000e+00 (0) 4
## OPTIMAL LP SOLUTION FOUND
## GLPK Integer Optimizer, v4.65
## 385 rows, 4425 columns, 45725 non-zeros
## 4425 integer variables, all of which are binary
## Integer optimization begins...
## Long-step dual simplex will be used
## +  1341: mip =     not found yet &gt;=              -inf        (1; 0)
## +  1341: &gt;&gt;&gt;&gt;&gt;   5.881701905e+03 &gt;=   5.881701905e+03   0.0% (1; 0)
## +  1341: mip =   5.881701905e+03 &gt;=     tree is empty   0.0% (0; 1)
## INTEGER OPTIMAL SOLUTION FOUND
## &lt;!SOLVER MSG&gt; ----</code></pre>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-23-1.png" width="384"></p>
<p>Podemos ver cuántos códigos postales le han tocado a cada empleado.</p>
<p>Se ve que se cumplen las restricciones. Seguramente para ser más equitativo habría que tocar algo a mano, para que a los empleados indios de la misma sede se repartan mejor los códigos postales. pero como primera aproximación no está mal</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">madrid<span class="sc" style="color: #5E5E5E;">$</span>tot_asignaciones <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb52-2">  <span class="fu" style="color: #4758AB;">arrange</span>(cod_postal)</span></code></pre></div>
<pre><code>## # A tibble: 15 × 9
##        j asignaciones cod_postal tipo  cod_prov  area_m2 centr…¹ centr…² provi…³
##    &lt;int&gt;        &lt;dbl&gt; &lt;fct&gt;      &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;  
##  1     2            7 28011      jefe  28         3.03e7   -3.75    40.4 MADRID 
##  2     1            7 28015      jefe  28         2.59e6   -3.71    40.4 MADRID 
##  3     5            7 28015      jefe  28         2.59e6   -3.71    40.4 MADRID 
##  4    12           30 28035      indio 28         2.20e7   -3.74    40.5 MADRID 
##  5    14           30 28213      indio 28         8.52e7   -4.19    40.4 MADRID 
##  6     9           30 28521      indio 28         3.53e7   -3.50    40.3 MADRID 
##  7     7           30 28668      indio 28         3.65e6   -3.84    40.4 MADRID 
##  8    13           30 28755      indio 28         1.23e8   -3.60    41.1 MADRID 
##  9     6           25 28755      indio 28         1.23e8   -3.60    41.1 MADRID 
## 10     8           17 28755      indio 28         1.23e8   -3.60    41.1 MADRID 
## 11    11            8 28755      indio 28         1.23e8   -3.60    41.1 MADRID 
## 12     4            7 28817      jefe  28         6.04e7   -3.26    40.5 MADRID 
## 13    15           30 28901      indio 28         1.62e6   -3.73    40.3 MADRID 
## 14    10           30 28931      indio 28         8.78e5   -3.86    40.3 MADRID 
## 15     3            7 28931      jefe  28         8.78e5   -3.86    40.3 MADRID 
## # … with abbreviated variable names ¹​centroide_longitud, ²​centroide_latitud,
## #   ³​provincia</code></pre>
<p>Podemos ver el detalle, por ejemplo qué códigos postales le toca al empleado j=4</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">madrid_asignaciones <span class="ot" style="color: #003B4F;">&lt;-</span>  madrid<span class="sc" style="color: #5E5E5E;">$</span>tot_asignaciones  <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;">left_join</span>(madrid<span class="sc" style="color: #5E5E5E;">$</span>matching, <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">"j"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb54-3">  <span class="fu" style="color: #4758AB;">left_join</span>(madrid<span class="sc" style="color: #5E5E5E;">$</span>cod_postales, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"i"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"id"</span>), <span class="at" style="color: #657422;">suffix =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">""</span>,<span class="st" style="color: #20794D;">"_tienda"</span>)) </span>
<span id="cb54-4"></span>
<span id="cb54-5">madrid_asignaciones <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb54-6">  <span class="fu" style="color: #4758AB;">filter</span>(j<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">4</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb54-7">  <span class="fu" style="color: #4758AB;">select</span>(tipo ,j, i, cod_postal, cod_postal_tienda)</span></code></pre></div>
<pre><code>## # A tibble: 7 × 5
##   tipo      j     i cod_postal cod_postal_tienda
##   &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt;      &lt;fct&gt;            
## 1 jefe      4    61 28817      28810            
## 2 jefe      4    71 28817      28812            
## 3 jefe      4    89 28817      28818            
## 4 jefe      4   121 28817      28515            
## 5 jefe      4   155 28817      28804            
## 6 jefe      4   172 28817      28817            
## 7 jefe      4   219 28817      28811</code></pre>
</section>
<section id="barcelona" class="level3">
<h3 class="anchored" data-anchor-id="barcelona">Barcelona</h3>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">barcelona <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_asignaciones_x_provincia</span>(cod_postales, sedes, <span class="at" style="color: #657422;">provincia_sel =</span><span class="st" style="color: #20794D;">"BARCELONA"</span>)</span></code></pre></div>
<pre><code>## &lt;SOLVER MSG&gt;  ----
## GLPK Simplex Optimizer, v4.65
## 471 rows, 5715 columns, 59055 non-zeros
##       0: obj =   0.000000000e+00 inf =   4.260e+02 (406)
##     600: obj =   1.389502410e+04 inf =   9.258e-13 (0) 1
## Perturbing LP to avoid stalling [1077]...
## Removing LP perturbation [1716]...
## *  1716: obj =   7.841913058e+03 inf =   0.000e+00 (0) 5
## OPTIMAL LP SOLUTION FOUND
## GLPK Integer Optimizer, v4.65
## 471 rows, 5715 columns, 59055 non-zeros
## 5715 integer variables, all of which are binary
## Integer optimization begins...
## Long-step dual simplex will be used
## +  1716: mip =     not found yet &gt;=              -inf        (1; 0)
## +  1716: &gt;&gt;&gt;&gt;&gt;   7.841913058e+03 &gt;=   7.841913058e+03   0.0% (1; 0)
## +  1716: mip =   7.841913058e+03 &gt;=     tree is empty   0.0% (0; 1)
## INTEGER OPTIMAL SOLUTION FOUND
## &lt;!SOLVER MSG&gt; ----</code></pre>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-26-1.png" width="384"></p>
</section>
<section id="sevilla" class="level3">
<h3 class="anchored" data-anchor-id="sevilla">Sevilla</h3>
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">sevilla <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_asignaciones_x_provincia</span>(cod_postales, sedes, <span class="at" style="color: #657422;">provincia_sel =</span> <span class="st" style="color: #20794D;">"SEVILLA"</span>)</span></code></pre></div>
<pre><code>## &lt;SOLVER MSG&gt;  ----
## GLPK Simplex Optimizer, v4.65
## 182 rows, 1064 columns, 7448 non-zeros
##       0: obj =   0.000000000e+00 inf =   1.710e+02 (163)
##     243: obj =   8.653234667e+03 inf =   5.145e-13 (0)
## *   572: obj =   3.623165871e+03 inf =   0.000e+00 (0) 1
## OPTIMAL LP SOLUTION FOUND
## GLPK Integer Optimizer, v4.65
## 182 rows, 1064 columns, 7448 non-zeros
## 1064 integer variables, all of which are binary
## Integer optimization begins...
## Long-step dual simplex will be used
## +   572: mip =     not found yet &gt;=              -inf        (1; 0)
## +   572: &gt;&gt;&gt;&gt;&gt;   3.623165871e+03 &gt;=   3.623165871e+03   0.0% (1; 0)
## +   572: mip =   3.623165871e+03 &gt;=     tree is empty   0.0% (0; 1)
## INTEGER OPTIMAL SOLUTION FOUND
## &lt;!SOLVER MSG&gt; ----</code></pre>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-27-1.png" width="384"></p>
</section>
<section id="granada-y-málaga-juntas" class="level3">
<h3 class="anchored" data-anchor-id="granada-y-málaga-juntas">Granada y Málaga juntas</h3>
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">granada_malaga <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_asignaciones_x_provincia</span>(cod_postales, sedes, <span class="at" style="color: #657422;">provincia_sel =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"GRANADA"</span>,<span class="st" style="color: #20794D;">"MALAGA"</span>))</span></code></pre></div>
<pre><code>## &lt;SOLVER MSG&gt;  ----
## GLPK Simplex Optimizer, v4.65
## 488 rows, 7160 columns, 80550 non-zeros
##       0: obj =   0.000000000e+00 inf =   4.230e+02 (393)
##     515: obj =   2.754380624e+04 inf =   4.807e-13 (0) 1
## Perturbing LP to avoid stalling [1388]...
## Removing LP perturbation [1688]...
## *  1688: obj =   7.728634950e+03 inf =   0.000e+00 (0) 5
## OPTIMAL LP SOLUTION FOUND
## GLPK Integer Optimizer, v4.65
## 488 rows, 7160 columns, 80550 non-zeros
## 7160 integer variables, all of which are binary
## Integer optimization begins...
## Long-step dual simplex will be used
## +  1688: mip =     not found yet &gt;=              -inf        (1; 0)
## +  1688: &gt;&gt;&gt;&gt;&gt;   7.728634950e+03 &gt;=   7.728634950e+03   0.0% (1; 0)
## +  1688: mip =   7.728634950e+03 &gt;=     tree is empty   0.0% (0; 1)
## INTEGER OPTIMAL SOLUTION FOUND
## &lt;!SOLVER MSG&gt; ----</code></pre>
<p><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/unnamed-chunk-28-1.png" width="384"></p>
<p>Y hasta aquí ha llegado el uso de la IO para el mal. Feliz verano !!</p>


</section>
</section>

 ]]></description>
  <category>estadística</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/08/01/indios-y-jefes-io-al-servicio-del-mal/index.html</guid>
  <pubDate>Sun, 31 Jul 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Palabras para Julia (Parte 4 /n). Predicción con Turing</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/07/01/palabras-para-julia-parte-4-n/index.html</link>
  <description><![CDATA[ 




<p>En <a href="https://muestrear-no-es-pecado.netlify.app/2022/03/20/palabras-para-julia-parte-3-n/">Palabras para Julia parte 3</a> hablaba de modelos bayesianos con <a href="https://turing.ml/stable/">Turing.jl</a>, y me quedé con una espinita clavada, que era la de poder predecir de forma relativamente fácil con Turing, o incluso guardar de alguna forma la “posterior samples” y poder usar mi modelo en otra sesión de Julia.</p>
<p>Empiezo una serie de entradas cuyo objetivo es ver si puedo llegar a la lógica para poner “en producción” un modelo bayesiando con Turing, pero llegando incluso a crear un binario en linux que me permita predecir con un modelo y desplegarlo incluso en entornos dónde no está instalado Julia. La verdad, que no sé si lo conseguiré, pero al menos aprendo algo por el camino.</p>
<p>Si, ya sé que existen los dockers y todo eso, pero no está de más saber que existen alternativas que quizá sean mejores. Ya en el pasado he tratado temas de cómo productivizar modelos de h2o sobre spark <a href="https://muestrear-no-es-pecado.netlify.app/2019/03/12/productivizando-modelos-binarios-con-h20/">aquí</a> o con Julia <a href="https://muestrear-no-es-pecado.netlify.app/2021/08/16/palabras-para-julia-parte-2-n/">aquí</a>. El objetivo final será llegar a tener un binario en linux que tome como argumento la ruta dónde se haya guardado las posterior samples de un modelo bayesiano y la ruta con especificación de dicho modelo en texto (para que Turing sepa como usar esas posterior samples) y que nos genere la posterior predictive para nuevos datos.</p>
<p>Así que vamos al lío. Empezamos por ver como entrenamos un modelo bayesiano con Turing y como se puede guardar y utilizar posteriormente.</p>
<section id="entrenamiento-con-julia" class="level2">
<h2 class="anchored" data-anchor-id="entrenamiento-con-julia">Entrenamiento con Julia</h2>
<p>Vamos a hacer un ejemplo sencillo, entrenando una regresión lineal múltiple de forma bayesiana. El dataset forma parte del material del libro Introduction to Statistical Learning. <a href="https://www.statlearning.com/s/Advertising.csv">Advertising</a></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb1-1"></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">LinearAlgebra</span>, <span class="bu" style="color: null;">Plots</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Turing</span></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">ReverseDiff</span>, <span class="bu" style="color: null;">Memoization </span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">DataFrames</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span></span>
<span id="cb1-7"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Random</span></span>
<span id="cb1-8"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">StatsPlots</span></span>
<span id="cb1-9"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Distributions</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">StatsBase</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;">import</span> <span class="bu" style="color: null;">Logging</span></span>
<span id="cb1-15"><span class="bu" style="color: null;">Logging</span>.<span class="fu" style="color: #4758AB;">disable_logging</span>(<span class="bu" style="color: null;">Logging</span>.Warn)</span>
<span id="cb1-16"></span>
<span id="cb1-17">mm <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(CSV.<span class="fu" style="color: #4758AB;">File</span>(<span class="st" style="color: #20794D;">"data/Advertising.csv"</span>))</span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;">describe</span>(mm)</span>
<span id="cb1-19"></span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"></span>
<span id="cb2-2"><span class="ex" style="color: null;">200×5</span> DataFrame</span>
<span id="cb2-3"> <span class="ex" style="color: null;">Row</span> │ Column1  TV       radio    newspaper  sales   </span>
<span id="cb2-4">     <span class="ex" style="color: null;">│</span> Int64    Float64  Float64  Float64    Float64 </span>
<span id="cb2-5"><span class="ex" style="color: null;">─────┼───────────────────────────────────────────────</span></span>
<span id="cb2-6">   <span class="ex" style="color: null;">1</span> │       1    230.1     37.8       69.2     22.1</span>
<span id="cb2-7">   <span class="ex" style="color: null;">2</span> │       2     44.5     39.3       45.1     10.4</span>
<span id="cb2-8">   <span class="ex" style="color: null;">3</span> │       3     17.2     45.9       69.3      9.3</span>
<span id="cb2-9">  <span class="ex" style="color: null;">⋮</span>  │    ⋮        ⋮        ⋮         ⋮         ⋮</span>
<span id="cb2-10"> <span class="ex" style="color: null;">198</span> │     198    177.0      9.3        6.4     12.8</span>
<span id="cb2-11"> <span class="ex" style="color: null;">199</span> │     199    283.6     42.0       66.2     25.5</span>
<span id="cb2-12"> <span class="ex" style="color: null;">200</span> │     200    232.1      8.6        8.7     13.4</span>
<span id="cb2-13">                                     <span class="ex" style="color: null;">194</span> rows omitted</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> describe<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">mm</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb2-16"><span class="ex" style="color: null;">5×7</span> DataFrame</span>
<span id="cb2-17"> <span class="ex" style="color: null;">Row</span> │ variable   mean      min   median   max    nmissing  eltype   </span>
<span id="cb2-18">     <span class="ex" style="color: null;">│</span> Symbol     Float64   Real  Float64  Real   Int64     DataType </span>
<span id="cb2-19"><span class="ex" style="color: null;">─────┼───────────────────────────────────────────────────────────────</span></span>
<span id="cb2-20">   <span class="ex" style="color: null;">1</span> │ Column1    100.5      1     100.5   200           0  Int64</span>
<span id="cb2-21">   <span class="ex" style="color: null;">2</span> │ TV         147.043    0.7   149.75  296.4         0  Float64</span>
<span id="cb2-22">   <span class="ex" style="color: null;">3</span> │ radio       23.264    0.0    22.9    49.6         0  Float64</span>
<span id="cb2-23">   <span class="ex" style="color: null;">4</span> │ newspaper   30.554    0.3    25.75  114.0         0  Float64</span>
<span id="cb2-24">   <span class="ex" style="color: null;">5</span> │ sales       14.0225   1.6    12.9    27.0         0  Float64</span></code></pre></div>
<p>Especificamos el modelo, y aquí tengo que comentar un par de cosas. Una que julia gracias a que implementa eficazmente el <a href="https://en.wikipedia.org/wiki/Multiple_dispatch">Multiple dispatch</a>, podemos tener una misma función que devuelva cosas diferentes dependiendo de que le pasemos, así una función puede tener diferentes métodos. El otro aspecto es el uso del condition en Turing (alias <code>|</code>) se puede especificar el modelo sin pasar como argumento la variable dependiente y usarla solo para obtener la posterior, lo cual nos va a permitir hacer algo como <code>predict( modelo(Xs), cadena_mcmc)</code>, y no tener que pasar la <code>y</code> como un valor perdido.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;">@model</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">mm_model_sin_sales</span>(TV<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Real</span>, radio<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Real</span>, newspaper<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Real</span>)</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;"># Prior coeficientes</span></span>
<span id="cb3-4">    a <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-5">    tv_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-6">    radio_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-7">    newspaper_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-8">    σ₁ <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Gamma</span>(<span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb3-9">    </span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;"># antes </span></span>
<span id="cb3-11">    mu <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">+</span> tv_coef <span class="op" style="color: #5E5E5E;">*</span> TV <span class="op" style="color: #5E5E5E;">+</span> radio_coef <span class="op" style="color: #5E5E5E;">*</span> radio <span class="op" style="color: #5E5E5E;">+</span> newspaper_coef <span class="op" style="color: #5E5E5E;">*</span> newspaper </span>
<span id="cb3-12">    sales <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(mu, σ₁)</span>
<span id="cb3-13"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="pp" style="color: #AD0000;">@model</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">mm_model_sin_sales</span>(TV<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">AbstractVector{&lt;:Real}</span>,</span>
<span id="cb3-16">    </span>
<span id="cb3-17">    radio<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">AbstractVector{&lt;:Real}</span>,</span>
<span id="cb3-18">    newspaper<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">AbstractVector{&lt;:Real}</span>)</span>
<span id="cb3-19">    <span class="co" style="color: #5E5E5E;"># Prior coeficientes</span></span>
<span id="cb3-20">    a <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-21">    tv_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-22">    radio_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-23">    newspaper_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb3-24">    σ₁ <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Gamma</span>(<span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb3-25">           </span>
<span id="cb3-26">    mu <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">.+</span> tv_coef <span class="op" style="color: #5E5E5E;">.*</span> TV <span class="op" style="color: #5E5E5E;">.+</span> radio_coef <span class="op" style="color: #5E5E5E;">.*</span> radio <span class="op" style="color: #5E5E5E;">.+</span> newspaper_coef <span class="op" style="color: #5E5E5E;">.*</span> newspaper </span>
<span id="cb3-27">    sales <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">MvNormal</span>(mu, σ₁<span class="op" style="color: #5E5E5E;">^</span><span class="fl" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> I)</span>
<span id="cb3-28"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb3-29"></span></code></pre></div>
<p>Ahora tenemos el mismo modelo, que me a servir tanto para pasarle como argumentos escalares como vectores, nótese que la función Normal tomo como argumento la desviación típica, mientrar que MvNormal toma una matriz de varianzas/covarianzas. Se aconseja el uso de MvNormal en Turing pues mejora el tiempo de cálculo de la posteriori.</p>
<p>Obtenemos la posteriori de los parámetros, pasándole como datos el dataset de Advertising. Es importante que la columna de la variable dependiente se pase como <code>NamedTuple</code>, esto se puede hacer en julia usando <code>(; vector_y)</code> .</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb4-1"></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># utilizamos 4 cadenas con n_samples = 2000  para cada una</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># usamos | para pasarle los datos de Y que no habiamos pasado en la especificacion del modelo</span></span>
<span id="cb4-5"></span>
<span id="cb4-6">chain <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="fu" style="color: #4758AB;">mm_model_sin_sales</span>(mm.TV, mm.radio, mm.newspaper) <span class="op" style="color: #5E5E5E;">|</span> (; mm.sales),</span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;">NUTS</span>(<span class="fl" style="color: #AD0000;">0.65</span>),<span class="fu" style="color: #4758AB;">MCMCThreads</span>(),</span>
<span id="cb4-8">    <span class="fl" style="color: #AD0000;">2_000</span>, <span class="fl" style="color: #AD0000;">4</span>)</span>
<span id="cb4-9">    </span></code></pre></div>
<p>Y en unos 18 segundos tenemos nuestra MCMC Chain.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">Chains</span> MCMC chain <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2000×17×4</span> Array{Float64, 3}<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="ex" style="color: null;">Iterations</span>        = 1001:1:3000</span>
<span id="cb5-4"><span class="ex" style="color: null;">Number</span> of chains  = 4</span>
<span id="cb5-5"><span class="ex" style="color: null;">Samples</span> per chain = 2000</span>
<span id="cb5-6"><span class="ex" style="color: null;">Wall</span> duration     = 18.06 seconds</span>
<span id="cb5-7"><span class="ex" style="color: null;">Compute</span> duration  = 71.54 seconds</span>
<span id="cb5-8"><span class="ex" style="color: null;">parameters</span>        = a, tv_coef, radio_coef, newspaper_coef, σ₁</span>
<span id="cb5-9"><span class="ex" style="color: null;">internals</span>         = lp, n_steps, is_accept, acceptance_rate, log_density, hamiltonian_energy, hamiltonian_energy_error, max_hamiltonian_energy_error, tree_depth, numerical_error, step_size, nom_step_size</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="ex" style="color: null;">Summary</span> Statistics</span>
<span id="cb5-12">      <span class="ex" style="color: null;">parameters</span>      mean       std   naive_se      mcse         ess      rhat   ess_per_sec </span>
<span id="cb5-13">          <span class="ex" style="color: null;">Symbol</span>   Float64   Float64    Float64   Float64     Float64   Float64       Float64 </span>
<span id="cb5-14"></span>
<span id="cb5-15">               <span class="ex" style="color: null;">a</span>    2.0952    0.2712     0.0030    0.0038   5123.1176    0.9999       71.6139</span>
<span id="cb5-16">         <span class="ex" style="color: null;">tv_coef</span>    0.0481    0.0013     0.0000    0.0000   7529.0954    0.9998      105.2461</span>
<span id="cb5-17">      <span class="ex" style="color: null;">radio_coef</span>    0.1983    0.0087     0.0001    0.0001   5230.9995    1.0000       73.1220</span>
<span id="cb5-18">  <span class="ex" style="color: null;">newspaper_coef</span>    0.0040    0.0059     0.0001    0.0001   6203.9490    1.0002       86.7224</span>
<span id="cb5-19">              <span class="ex" style="color: null;">σ₁</span>    1.7205    0.0874     0.0010    0.0011   5441.9631    1.0000       76.0709</span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="ex" style="color: null;">Quantiles</span></span>
<span id="cb5-22">      <span class="ex" style="color: null;">parameters</span>      2.5%     25.0%     50.0%     75.0%     97.5% </span>
<span id="cb5-23">          <span class="ex" style="color: null;">Symbol</span>   Float64   Float64   Float64   Float64   Float64 </span>
<span id="cb5-24"></span>
<span id="cb5-25">               <span class="ex" style="color: null;">a</span>    1.5635    1.9104    2.0982    2.2788    2.6182</span>
<span id="cb5-26">         <span class="ex" style="color: null;">tv_coef</span>    0.0455    0.0472    0.0481    0.0489    0.0508</span>
<span id="cb5-27">      <span class="ex" style="color: null;">radio_coef</span>    0.1814    0.1923    0.1983    0.2042    0.2155</span>
<span id="cb5-28">  <span class="ex" style="color: null;">newspaper_coef</span>   <span class="at" style="color: #657422;">-0.0077</span>    0.0001    0.0040    0.0078    0.0157</span>
<span id="cb5-29">              <span class="ex" style="color: null;">σ₁</span>    1.5585    1.6607    1.7169    1.7781    1.8997</span></code></pre></div>
<p>Vale, estupendo,en <code>chain</code> tenemos las 8000 samples para cada uno de los 5 parámetros , y también las de temas del ajuste interno por HMC, de ahí lo de (2000×17×4 Array{Float64, 3}).<br>
Pero ¿cómo podemos predecir para nuevos datos?</p>
<p>Pues podemos pasarle simplemente 3 escalares correspondientes a las variables TV, radio y newspaper.</p>
<p>Es necesario pasarle a la función predict la llamada al modelo con los nuevos datos <code>mm_model_sin_sales(tv_valor, radio_valor,newspaper_valor)</code> y las posterioris (la cadena MCMC) de los parámetros.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"></span>
<span id="cb6-2"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> predict<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">mm_model_sin_sales</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2,</span> 5, 7<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> chain<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb6-3"><span class="ex" style="color: null;">Chains</span> MCMC chain <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2000×1×4</span> Array{Float64, 3}<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="ex" style="color: null;">Iterations</span>        = 1:1:2000</span>
<span id="cb6-6"><span class="ex" style="color: null;">Number</span> of chains  = 4</span>
<span id="cb6-7"><span class="ex" style="color: null;">Samples</span> per chain = 2000</span>
<span id="cb6-8"><span class="ex" style="color: null;">parameters</span>        = sales</span>
<span id="cb6-9"><span class="ex" style="color: null;">internals</span>         = </span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="ex" style="color: null;">Summary</span> Statistics</span>
<span id="cb6-12">  <span class="ex" style="color: null;">parameters</span>      mean       std   naive_se      mcse         ess      rhat </span>
<span id="cb6-13">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64    Float64   Float64     Float64   Float64 </span>
<span id="cb6-14"></span>
<span id="cb6-15">       <span class="ex" style="color: null;">sales</span>    3.2203    1.7435     0.0195    0.0176   8053.9924    1.0000</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="ex" style="color: null;">Quantiles</span></span>
<span id="cb6-18">  <span class="ex" style="color: null;">parameters</span>      2.5%     25.0%     50.0%     75.0%     97.5% </span>
<span id="cb6-19">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64   Float64   Float64   Float64 </span>
<span id="cb6-20"></span>
<span id="cb6-21">       <span class="ex" style="color: null;">sales</span>   <span class="at" style="color: #657422;">-0.1863</span>    2.0441    3.2553    4.4030    6.6547</span></code></pre></div>
<p>También podemos pasarle más valores</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"></span>
<span id="cb7-2"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> mm_last = last<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">mm,</span> 3<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb7-3"><span class="ex" style="color: null;">3×5</span> DataFrame</span>
<span id="cb7-4"> <span class="ex" style="color: null;">Row</span> │ Column1  TV       radio    newspaper  sales   </span>
<span id="cb7-5">     <span class="ex" style="color: null;">│</span> Int64    Float64  Float64  Float64    Float64 </span>
<span id="cb7-6"><span class="ex" style="color: null;">─────┼───────────────────────────────────────────────</span></span>
<span id="cb7-7">   <span class="ex" style="color: null;">1</span> │     198    177.0      9.3        6.4     12.8</span>
<span id="cb7-8">   <span class="ex" style="color: null;">2</span> │     199    283.6     42.0       66.2     25.5</span>
<span id="cb7-9">   <span class="ex" style="color: null;">3</span> │     200    232.1      8.6        8.7     13.4</span>
<span id="cb7-10"></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> predicciones = predict<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">mm_model_sin_sales</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">mm_last.TV,</span> mm_last.radio, mm_last.newspaper<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> chain<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb7-13"><span class="ex" style="color: null;">Chains</span> MCMC chain <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2000×3×4</span> Array{Float64, 3}<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="ex" style="color: null;">Iterations</span>        = 1:1:2000</span>
<span id="cb7-16"><span class="ex" style="color: null;">Number</span> of chains  = 4</span>
<span id="cb7-17"><span class="ex" style="color: null;">Samples</span> per chain = 2000</span>
<span id="cb7-18"><span class="ex" style="color: null;">parameters</span>        = sales[1], sales[2], sales[3]</span>
<span id="cb7-19"><span class="ex" style="color: null;">internals</span>         = </span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="ex" style="color: null;">Summary</span> Statistics</span>
<span id="cb7-22">  <span class="ex" style="color: null;">parameters</span>      mean       std   naive_se      mcse         ess      rhat </span>
<span id="cb7-23">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64    Float64   Float64     Float64   Float64 </span>
<span id="cb7-24"></span>
<span id="cb7-25">    <span class="va" style="color: #111111;">sales</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span>   <span class="ex" style="color: null;">12.5192</span>    1.7427     0.0195    0.0170   8270.6268    1.0000</span>
<span id="cb7-26">    <span class="va" style="color: #111111;">sales</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]</span>   <span class="ex" style="color: null;">24.3266</span>    1.7560     0.0196    0.0222   7720.4172    1.0001</span>
<span id="cb7-27">    <span class="va" style="color: #111111;">sales</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">]</span>   <span class="ex" style="color: null;">14.9901</span>    1.7327     0.0194    0.0188   8039.4940    0.9999</span>
<span id="cb7-28"></span>
<span id="cb7-29"><span class="ex" style="color: null;">Quantiles</span></span>
<span id="cb7-30">  <span class="ex" style="color: null;">parameters</span>      2.5%     25.0%     50.0%     75.0%     97.5% </span>
<span id="cb7-31">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64   Float64   Float64   Float64 </span>
<span id="cb7-32"></span>
<span id="cb7-33">    <span class="va" style="color: #111111;">sales</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">]</span>    <span class="ex" style="color: null;">9.0888</span>   11.3344   12.5241   13.6990   15.9571</span>
<span id="cb7-34">    <span class="va" style="color: #111111;">sales</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">]</span>   <span class="ex" style="color: null;">20.8369</span>   23.1519   24.3414   25.4967   27.7429</span>
<span id="cb7-35">    <span class="va" style="color: #111111;">sales</span><span class="op" style="color: #5E5E5E;">[</span><span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">]</span>   <span class="ex" style="color: null;">11.6549</span>   13.8304   14.9617   16.1471   18.3733</span></code></pre></div>
<p>Podría quedarme con las predicciones para sales[1] y calcular el intervalo de credibilidad el 80%</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> quantile<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">reshape</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">Array</span><span class="er" style="color: #AD0000;">(</span><span class="va" style="color: #111111;">predicciones</span><span class="op" style="color: #5E5E5E;">[</span><span class="st" style="color: #20794D;">"sales[1]"</span><span class="op" style="color: #5E5E5E;">]</span><span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> 8000<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> [0.1, 0.5, 0.9]<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb8-2"><span class="ex" style="color: null;">3-element</span> Vector{Float64}:</span>
<span id="cb8-3"> <span class="ex" style="color: null;">10.28185973755853</span></span>
<span id="cb8-4"> <span class="ex" style="color: null;">12.524091380928425</span></span>
<span id="cb8-5"> <span class="ex" style="color: null;">14.74877121738519</span></span></code></pre></div>
</section>
<section id="guardar-cadena-y-predecir" class="level2">
<h2 class="anchored" data-anchor-id="guardar-cadena-y-predecir">Guardar cadena y predecir</h2>
<p>Ahora viene la parte que nos interesa a los que nos dedicamos a esto y queremos usar un modelo entrenado hace 6 meses sobre datos de hoy. Guardar lo que hicimos y predecir sin necesidad de reentrenar.</p>
<p>Guardamos la posteriori</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1"></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">write</span>( <span class="st" style="color: #20794D;">"cadena.jls"</span>, chain)</span></code></pre></div>
<p>Y ahora, cerramos julia y abrimos de nuevo.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb10-1"></span>
<span id="cb10-2"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">LinearAlgebra</span>, <span class="bu" style="color: null;">Plots</span></span>
<span id="cb10-3"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Turing</span></span>
<span id="cb10-4"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">ReverseDiff</span>, <span class="bu" style="color: null;">Memoization </span></span>
<span id="cb10-5"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">DataFrames</span></span>
<span id="cb10-6"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span></span>
<span id="cb10-7"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Random</span></span>
<span id="cb10-8"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">StatsPlots</span></span>
<span id="cb10-9"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Distributions</span></span>
<span id="cb10-10"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">StatsBase</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="im" style="color: #00769E;">import</span> <span class="bu" style="color: null;">Logging</span></span>
<span id="cb10-13"><span class="bu" style="color: null;">Logging</span>.<span class="fu" style="color: #4758AB;">disable_logging</span>(<span class="bu" style="color: null;">Logging</span>.Warn)</span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;"># posteriori guardada</span></span>
<span id="cb10-16">chain <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">read</span>(<span class="st" style="color: #20794D;">"cadena.jls"</span>, Chains)</span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;"># Especificación del modelo (esto puede ir en otro fichero .jl)</span></span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;"># Si tengo en un fichero jl el código de @model, lo puedo incluir ahí. </span></span>
<span id="cb10-21"></span>
<span id="cb10-22"></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;"># ruta = "especificacion_modelo.jl"</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;"># include(ruta)</span></span>
<span id="cb10-25"></span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="pp" style="color: #AD0000;">@model</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">mm_model_sin_sales</span>(TV<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Real</span>, radio<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Real</span>, newspaper<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">Real</span>)</span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;"># Prior coeficientes</span></span>
<span id="cb10-29">    a <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-30">    tv_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-31">    radio_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-32">    newspaper_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-33">    σ₁ <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Gamma</span>(<span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb10-34">    </span>
<span id="cb10-35">    <span class="co" style="color: #5E5E5E;"># antes </span></span>
<span id="cb10-36">    mu <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">+</span> tv_coef <span class="op" style="color: #5E5E5E;">*</span> TV <span class="op" style="color: #5E5E5E;">+</span> radio_coef <span class="op" style="color: #5E5E5E;">*</span> radio <span class="op" style="color: #5E5E5E;">+</span> newspaper_coef <span class="op" style="color: #5E5E5E;">*</span> newspaper </span>
<span id="cb10-37">    sales <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(mu, σ₁)</span>
<span id="cb10-38"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb10-39"></span>
<span id="cb10-40"><span class="pp" style="color: #AD0000;">@model</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">mm_model_sin_sales</span>(TV<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">AbstractVector{&lt;:Real}</span>,</span>
<span id="cb10-41">     radio<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">AbstractVector{&lt;:Real}</span>,</span>
<span id="cb10-42">      newspaper<span class="op" style="color: #5E5E5E;">::</span><span class="dt" style="color: #AD0000;">AbstractVector{&lt;:Real}</span>)</span>
<span id="cb10-43">    <span class="co" style="color: #5E5E5E;"># Prior coeficientes</span></span>
<span id="cb10-44">    a <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-45">    tv_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-46">    radio_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-47">    newspaper_coef  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-48">    σ₁ <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Gamma</span>(<span class="fl" style="color: #AD0000;">1</span>, <span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb10-49">           </span>
<span id="cb10-50">    mu <span class="op" style="color: #5E5E5E;">=</span> a <span class="op" style="color: #5E5E5E;">.+</span> tv_coef <span class="op" style="color: #5E5E5E;">.*</span> TV <span class="op" style="color: #5E5E5E;">.+</span> radio_coef <span class="op" style="color: #5E5E5E;">.*</span> radio <span class="op" style="color: #5E5E5E;">.+</span> newspaper_coef <span class="op" style="color: #5E5E5E;">.*</span> newspaper </span>
<span id="cb10-51">    sales <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">MvNormal</span>(mu, σ₁<span class="op" style="color: #5E5E5E;">^</span><span class="fl" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> I)</span>
<span id="cb10-52"><span class="kw" style="color: #003B4F;">end</span></span>
<span id="cb10-53"></span>
<span id="cb10-54"></span>
<span id="cb10-55"></span>
<span id="cb10-56"></span></code></pre></div>
<p>Y aqui viene la parte importante. En la que utilizamos el modelo guardado, que no es más que las posterioris de los parámetros que hemos salvado en disco previamente.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb11-1"></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;">## predecimos la misma observación , fila 198 del dataset</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;">predict</span>(<span class="fu" style="color: #4758AB;">mm_model_sin_sales</span>(<span class="fl" style="color: #AD0000;">177</span>, <span class="fl" style="color: #AD0000;">9.3</span>, <span class="fl" style="color: #AD0000;">6.4</span> ), chain)</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;">Chains</span> MCMC chain <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2000×1×4</span> Array{Float64, 3}<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="ex" style="color: null;">Iterations</span>        = 1:1:2000</span>
<span id="cb12-4"><span class="ex" style="color: null;">Number</span> of chains  = 4</span>
<span id="cb12-5"><span class="ex" style="color: null;">Samples</span> per chain = 2000</span>
<span id="cb12-6"><span class="ex" style="color: null;">parameters</span>        = sales</span>
<span id="cb12-7"><span class="ex" style="color: null;">internals</span>         = </span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="ex" style="color: null;">Summary</span> Statistics</span>
<span id="cb12-10">  <span class="ex" style="color: null;">parameters</span>      mean       std   naive_se      mcse         ess      rhat </span>
<span id="cb12-11">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64    Float64   Float64     Float64   Float64 </span>
<span id="cb12-12"></span>
<span id="cb12-13">       <span class="ex" style="color: null;">sales</span>   12.4723    1.7285     0.0193    0.0186   8326.7650    0.9998</span>
<span id="cb12-14"></span>
<span id="cb12-15"><span class="ex" style="color: null;">Quantiles</span></span>
<span id="cb12-16">  <span class="ex" style="color: null;">parameters</span>      2.5%     25.0%     50.0%     75.0%     97.5% </span>
<span id="cb12-17">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64   Float64   Float64   Float64 </span>
<span id="cb12-18"></span>
<span id="cb12-19">       <span class="ex" style="color: null;">sales</span>    9.0844   11.3106   12.4727   13.6334   15.7902</span>
<span id="cb12-20">       </span></code></pre></div>
<p>Y voilá. Sabiendo que se puede guardar la posteriori y usarla luego , veo bastante factible poder llegar al objetivo de crear un “motor de predicción” de modelos bayesianos con Turing, que sea un ejecutable y que tome como argumentos la posteriori guardada de un modelo ajustado y en texto (con extensión jl ) y escriba el resultado en disco. Y lo dicho, que pueda desplegar este ejecutable en cualquier sistema linux, sin tener que instalar docker ni nada, solo hacer un <code>unzip</code></p>


</section>

 ]]></description>
  <category>bayesian</category>
  <category>Julia</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/07/01/palabras-para-julia-parte-4-n/index.html</guid>
  <pubDate>Thu, 30 Jun 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>IO Parte 1</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/06/21/io-parte-1/index.html</link>
  <description><![CDATA[ 




<p>Allá por el año 1997 más o menos andaba yo estudiando Investigación Operativa en la Universidad de Granada. Recuerdo aprender el archiconocido algoritmo del simplex y algo también sobre programación entera (dónde el dominio de las variables está en <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BZ%7D"> ). No se me daba muy bien al principio, pero si recuerdo que luego me acabó gustando y el día que encuentre mis apuntes os pondré una demostración que desarrollé para un teorema que tenía algo que ver con la relación entre espacio primal y el dual.</p>
<p>Bueno, dejando de lado las batallitas de final del siglo pasado y debido a que estuve hace poco en la SEIO 2022 en Granada y coincidí con grandes profesionales de este tema, como por ejemplo el gran <a href="https://twitter.com/albertorrejval">Alberto Torrejón Valenzuela</a>, estoy convencido de que la investigación operativa es una de las grandes áreas que aún queda por explotar en las empresas.</p>
<p>Se lleva haciendo Investigación Operativa desde hace tiempo, véase <a href="https://es.wikipedia.org/wiki/George_Dantzig">esto</a>. Por otro lado creo que va a ser el próximo <em>hype</em> por las señales que estoy viendo, la primera de ellas es el cambio de nombre de la materia, ahora estoy empezando escuchar <strong><em>Analítica prescriptiva</em></strong> en vez de Investigación Operativa. Y como es norma en este mundillo, el cambio de nombre precede a la ¿burbuja?.</p>
<p>Pues vamos al grano, en esto de la investigación operativa se ha desarrollado mucho software para resolver este tipo de problemas, a partir de ahora los llamaremos <em>solvers</em>. Dentro de estos podemos destacar solvers comerciales como CPlex y Gurobi, pero también hay software libre como <a href="https://www.gnu.org/software/glpk/">GLPK</a> dentro del proyecto GNU, o sin olvidarnos de la fundación <a href="https://www.coin-or.org/">COIN-OR</a> dónde se han desarrollado muchos <em>solvers</em> de manera opensource.</p>
<p>Dentro de nuestros 3 lenguajes favoritos (R, Julia y Python) hay librerías que permiten hacer de <em>API</em> para los diferentes <em>solvers</em>, tanto los de software libre como los comerciales. Paso a enumerar 3 proyectos, uno para cada lenguaje y pongo enlace.</p>
<ul>
<li>R: <a href="https://roi.r-forge.r-project.org/">R Optimization Infrastructure</a></li>
<li>Julia: <a href="https://jump.dev/JuMP.jl/stable/">JuMP</a></li>
<li>Python: <a href="http://www.pyomo.org/">Pyomo</a></li>
</ul>
<p>En realidad, en principio uno podría decir que se trata sólo de sintaxis y que da igual cual uses pues al final todos utilizan los mismos solvers en el <em>backend</em> . No obstante, hay problemas en los que la misma construcción del mismo para pasárselo al solver puede tardar bastante y, según <a href="https://arxiv.org/pdf/1508.01982.pdf">esto</a>, JuMP parece estar a la altura con respecto a los softwares comerciales como GAMS en la generación del modelo y envío al solver.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="Jump_benchmark.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/06/21/io-parte-1/Jump_benchmark.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Veamos ahora un ejemplillo tonto de programación lineal y cual es la sintaxis (al fin y al cabo es sólo eso) en cada uno de los lenguajes.</p>
<p>Tenemos el siguiente problema de programación lineal</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="pl_example.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/06/21/io-parte-1/pl_example.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<p>Y el objetivo es encontrar los valores de x e y que cumpliendo las restricciones minimicen la función 7x + 8y. Para los 3 lenguajes vamos a usar <strong>GLPK</strong> como solver</p>
<section id="r" class="level2">
<h2 class="anchored" data-anchor-id="r">R</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(ROI)</span></code></pre></div>
<pre><code>## ROI: R Optimization Infrastructure</code></pre>
<pre><code>## Registered solver plugins: nlminb, alabama, glpk.</code></pre>
<pre><code>## Default solver: auto.</code></pre>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(ROI.plugin.glpk)</span></code></pre></div>
<p>Hay que definir el objetivo, las restricciones y los límites de la variable. Para las restricciones en R hay que poner los coeficientes en forma de matriz , de ahí el uso de rbind</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">objetivo          <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">L_objective</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>), <span class="at" style="color: #657422;">names =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>))</span>
<span id="cb6-2">restricciones     <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">L_constraint</span>(<span class="at" style="color: #657422;">L =</span> <span class="fu" style="color: #4758AB;">rbind</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)),</span>
<span id="cb6-3">                                   <span class="at" style="color: #657422;">dir =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"=="</span>, <span class="st" style="color: #20794D;">"&gt;="</span>),</span>
<span id="cb6-4">                                   <span class="at" style="color: #657422;">rhs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb6-5">limites_variables <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">V_bound</span>(</span>
<span id="cb6-6">  <span class="at" style="color: #657422;">li =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb6-7">  <span class="at" style="color: #657422;">ui =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb6-8">  <span class="at" style="color: #657422;">lb =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="cn" style="color: #8f5902;">Inf</span>),</span>
<span id="cb6-9">  <span class="at" style="color: #657422;">ub =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="cn" style="color: #8f5902;">Inf</span>, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb6-10">)</span></code></pre></div>
<p>Ahora usamos la función <code>OP</code> que es el constructor del problema, por defecto considera que se trata de un problema de maximización <code>OP(objective, constraints, types, bounds, maximum = FALSE)</code></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">lp  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">OP</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;">objective =</span> objetivo,</span>
<span id="cb7-3">  <span class="at" style="color: #657422;">constraints =</span> restricciones,</span>
<span id="cb7-4">  <span class="at" style="color: #657422;">bounds =</span> limites_variables</span>
<span id="cb7-5">)</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;">ROI_applicable_solvers</span>(lp)</span></code></pre></div>
<pre><code>## [1] "alabama" "glpk"</code></pre>
<p>Resolvemos con <code>glpk</code></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">(sol <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ROI_solve</span>(lp, <span class="at" style="color: #657422;">solver =</span> <span class="st" style="color: #20794D;">"glpk"</span>))</span></code></pre></div>
<pre><code>## Optimal solution found.
## The objective value is: 1.860000e+01</code></pre>
<p>Y vemos cuáles son los valores de x e y que minimizan la función objetivo</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">solution</span>(sol)</span></code></pre></div>
<pre><code>##   x   y 
## 0.6 1.8</code></pre>
</section>
<section id="julia" class="level2">
<h2 class="anchored" data-anchor-id="julia">Julia</h2>
<p>En Julia tenemos <a href="https://juliabook.chkwon.net/book/frontmatter">este librito online</a> que va contando estupendamente como usar <code>JuMP</code> y las diferentes formas de utilizarlo.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb13-1"></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">JuMP</span>, <span class="bu" style="color: null;">GLPK</span></span>
<span id="cb13-4"></span>
<span id="cb13-5">m <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">Model</span>(GLPK.Optimizer)</span></code></pre></div>
<pre><code>## A JuMP Model
## Feasibility problem with:
## Variables: 0
## Model mode: AUTOMATIC
## CachingOptimizer state: EMPTY_OPTIMIZER
## Solver name: GLPK</code></pre>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb15-1"></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># Variables y límites</span></span>
<span id="cb15-3"><span class="pp" style="color: #AD0000;">@variable</span>(m, <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">100</span> <span class="op" style="color: #5E5E5E;">&lt;=</span> x)</span></code></pre></div>
<pre><code>## x</code></pre>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb17-1"><span class="pp" style="color: #AD0000;">@variable</span>(m, y <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="fl" style="color: #AD0000;">100</span>)</span></code></pre></div>
<pre><code>## y</code></pre>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb19-1"></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;"># Objtivo</span></span>
<span id="cb19-3"><span class="pp" style="color: #AD0000;">@objective</span>(m, Min, <span class="fl" style="color: #AD0000;">7</span>x <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">8</span>y)</span></code></pre></div>
<pre><code>## 7 x + 8 y</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb21-1"></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;"># restricciones</span></span>
<span id="cb21-3"><span class="pp" style="color: #AD0000;">@constraint</span>(m, constraint1, <span class="fl" style="color: #AD0000;">3</span>x <span class="op" style="color: #5E5E5E;">+</span>  <span class="fl" style="color: #AD0000;">4</span>y <span class="op" style="color: #5E5E5E;">==</span> <span class="fl" style="color: #AD0000;">9</span>)</span></code></pre></div>
<pre><code>## constraint1 : 3 x + 4 y = 9.0</code></pre>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb23-1"><span class="pp" style="color: #AD0000;">@constraint</span>(m, constraint2,  <span class="fl" style="color: #AD0000;">2</span>x <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">1</span>y  <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="fl" style="color: #AD0000;">3</span>)</span></code></pre></div>
<pre><code>## constraint2 : 2 x + y ≥ 3.0</code></pre>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb25-1"></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;"># Solving the optimization problem</span></span>
<span id="cb25-3">JuMP.<span class="fu" style="color: #4758AB;">optimize!</span>(m)</span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;"># Printing the optimal solutions obtained</span></span>
<span id="cb25-6"><span class="fu" style="color: #4758AB;">println</span>(<span class="st" style="color: #20794D;">"Optimal Solutions:"</span>)</span></code></pre></div>
<pre><code>## Optimal Solutions:</code></pre>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb27-1"><span class="fu" style="color: #4758AB;">println</span>(<span class="st" style="color: #20794D;">"x = "</span>, JuMP.<span class="fu" style="color: #4758AB;">value</span>(x))</span></code></pre></div>
<pre><code>## x = 0.5999999999999943</code></pre>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb29-1"><span class="fu" style="color: #4758AB;">println</span>(<span class="st" style="color: #20794D;">"y = "</span>, JuMP.<span class="fu" style="color: #4758AB;">value</span>(y))</span></code></pre></div>
<pre><code>## y = 1.8000000000000114</code></pre>
<p>La verdad que me ha gustado la sintaxis de <code>JuMP</code> , es casi un calco de como lo escribirías a mano. Como curiosidad fijaros en que se puede poner <code>3x +  4y == 9</code> , y no hace falta poner <code>3 * x  + 4 * y</code></p>
<p>Otra curiosidad es que desde Julia puedes obtener el modelo en latex</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb31-1"><span class="fu" style="color: #4758AB;">latex_formulation</span>(m)</span></code></pre></div>
<pre><code>## $$ \begin{aligned}
## \min\quad &amp; 7 x + 8 y\\
## \text{Subject to} \quad &amp; 3 x + 4 y = 9.0\\
##  &amp; 2 x + y \geq 3.0\\
##  &amp; x \geq -100.0\\
##  &amp; y \leq 100.0\\
## \end{aligned} $$</code></pre>
</section>
<section id="python" class="level2">
<h2 class="anchored" data-anchor-id="python">Python</h2>
<p>En python usaremos pyomo, el cual también tiene una sintaxis clara.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;">from</span> pyomo.environ <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"></span>
<span id="cb34-2">model <span class="op" style="color: #5E5E5E;">=</span> ConcreteModel()</span>
<span id="cb34-3">model.x <span class="op" style="color: #5E5E5E;">=</span> Var(domain<span class="op" style="color: #5E5E5E;">=</span>NonNegativeReals)</span>
<span id="cb34-4">model.y <span class="op" style="color: #5E5E5E;">=</span> Var(domain<span class="op" style="color: #5E5E5E;">=</span>NonNegativeReals)</span>
<span id="cb34-5"></span>
<span id="cb34-6">model.objetivo <span class="op" style="color: #5E5E5E;">=</span> Objective(expr <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span><span class="op" style="color: #5E5E5E;">*</span>model.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">8</span><span class="op" style="color: #5E5E5E;">*</span>model.y, sense<span class="op" style="color: #5E5E5E;">=</span>minimize)</span>
<span id="cb34-7"></span>
<span id="cb34-8">model.constraint1 <span class="op" style="color: #5E5E5E;">=</span> Constraint(expr <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">*</span> model.x <span class="op" style="color: #5E5E5E;">+</span>  <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">*</span>model.y <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">9</span>)</span>
<span id="cb34-9">model.constraint2 <span class="op" style="color: #5E5E5E;">=</span> Constraint(expr <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>model.x <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">*</span>model.y  <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">results <span class="op" style="color: #5E5E5E;">=</span> SolverFactory(<span class="st" style="color: #20794D;">'glpk'</span>).solve(model)</span></code></pre></div>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="cf" style="color: #003B4F;">if</span> results.solver.status <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'ok'</span>:</span>
<span id="cb36-2">    model.pprint()</span></code></pre></div>
<pre><code>## 2 Var Declarations
##     x : Size=1, Index=None
##         Key  : Lower : Value : Upper : Fixed : Stale : Domain
##         None :     0 :   0.6 :  None : False : False : NonNegativeReals
##     y : Size=1, Index=None
##         Key  : Lower : Value : Upper : Fixed : Stale : Domain
##         None :     0 :   1.8 :  None : False : False : NonNegativeReals
## 
## 1 Objective Declarations
##     objetivo : Size=1, Index=None, Active=True
##         Key  : Active : Sense    : Expression
##         None :   True : minimize : 7*x + 8*y
## 
## 2 Constraint Declarations
##     constraint1 : Size=1, Index=None, Active=True
##         Key  : Lower : Body      : Upper : Active
##         None :   9.0 : 3*x + 4*y :   9.0 :   True
##     constraint2 : Size=1, Index=None, Active=True
##         Key  : Lower : Body    : Upper : Active
##         None :   3.0 : 2*x + y :  +Inf :   True
## 
## 5 Declarations: x y objetivo constraint1 constraint2</code></pre>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Objetivo = '</span>, model.objetivo())</span></code></pre></div>
<pre><code>## Objetivo =  18.6</code></pre>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">Decision Variables'</span>)</span></code></pre></div>
<pre><code>## 
## Decision Variables</code></pre>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'x = '</span>, model.x())</span></code></pre></div>
<pre><code>## x =  0.6</code></pre>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'y = '</span>, model.y())</span></code></pre></div>
<pre><code>## y =  1.8</code></pre>
</section>
<section id="miscelánea" class="level2">
<h2 class="anchored" data-anchor-id="miscelánea">Miscelánea</h2>
<p>La investigación operativa es un campo muy amplio, desde problemas de asignación de turnos, optimizar contenedores en grandes buques que pasan por varios puertos, optimización de gasto en medios para maximizar ventas (Marketing Mix Modelling), problemas de localización (dónde poner una tienda o gasolinera nueva dada una demanda existente y competencia), problemas de grafos, etc.</p>
<p>Hay muchos investigadores que se están dedicando a resolver este tipo de cosas, y dónde no se trata tanto de usar tal o cual solver, sino de formular bien el problema, ya que diferentes formulaciones del mismo problema igualmente válidas dan lugar a tiempos de cómputo muy diferentes. No es de extrañar que se tarden muchas horas en encontrar soluciones a problemas determinados.</p>
<p>Por otro lado, no puedo dejar de señalar el problema de los incentivos perversos. Me explico, a los investigadores que están en estos temas se les valora por paper publicado en revista de alto impacto, por lo que una vez le han publicado un artículo pasan al siguiente, olvidando la necesaria transferencia entre universidad y empresa. No es culpa suya, el sistema funciona así. Así que animo a todos aquellos que se dedican en serio a estos temas a meter la patita en el mundo de la empresa. Hay mucho trabajo que hacer y dinero que ganar.</p>


</section>

 ]]></description>
  <category>estadística</category>
  <category>R python</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/06/21/io-parte-1/index.html</guid>
  <pubDate>Mon, 20 Jun 2022 22:00:00 GMT</pubDate>
  <media:content url="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/06/21/io-parte-1/Jump_benchmark.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>No mentirás</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/05/29/no-mentir-s/index.html</link>
  <description><![CDATA[ 



<p>Hay veces que uno se deja llevar por la emoción cuando hace algo y a veces se exagera un poco con lo que hace tu criatura.</p>
<p>Tal es el caso de la librería <a href="https://nannyml.readthedocs.io/en/stable/">Nanyml</a>, la cual tiene buena pinta pero exagera en al menos dos partes. La primera y más evidente es cuándo dice que puede estimar el desempeño futuro de un modelo sin comparar con lo que realmente pase, así promete el <a href="https://nannyml.readthedocs.io/en/stable/quick.html#estimating-performance-without-targets">Estimating Performance without Targets</a></p>
<p>Os juro que me he leído la documentación varias veces e incluso he visto el código y en ningún lado he visto que haga eso que promete.</p>
<p>En realidad lo que hace no es más que basarse en dos asunciones que, si se leen en primer lugar, hace que la afirmación presuntuosa de estimar el desempeño de un modelo sin ver el target se caiga por su propio peso. A saber, las dos asunciones son.</p>
<ul>
<li>El modelo retorna probabilidades bien calibradas siempre.</li>
<li>La relación de <img src="https://latex.codecogs.com/png.latex?P%5By%20%7C%20X%5D"> no cambia .</li>
</ul>
<p>Estas dos asunciones por si solas lo que nos dicen es que vas a medir el desempeño de un modelo (sin ver el verdadero valor del target) asumiendo de partida que el modelo es tan bueno como lo era cuando lo entrenaste.</p>
<p>La segunda parte es en lo que denomina <a href="https://nannyml.readthedocs.io/en/stable/how_it_works/performance_estimation.html#cbpe-algorithm">CBPE algorithm</a> que si se lee con atención no es otra cosa que simplemente utilizar el modelo para obtener predicciones sobre un nuevo conjunto de datos.</p>
<p>Así, para calcular el AUC estimado, lo que hace es asumir que el modelo es bueno, y obtener las diferentes matrices de confusión que se derivan de escoger los posibles puntos de corte y, aquí viene el tema, considerar que el valor predicho por el modelo, es el verdadero valor.</p>
<p>Con estas asunciones , cualquier cambio en la métrica del AUC se debería sólo y exclusivamente a cambios en la estructura de la población y no a que el modelo haya dejado de ser bueno (lo cual es imposible puesto que es una de las asunciones)..</p>
<p>Ejemplo. Si tenemos 3 grupos distintos dónde tenemos un evento binario. Supongamos que el primero de ellos viene de una población con proporción igual a 0.25, el segundo grupo viene de una población con proporción de 0.8 y el tercero de una población con proporción de 0.032. Si tomamos 1000, 300 y 600 observaciones de cada población respectivamente podemos simular tener un score que cumpla la condición de estar bien calibrado</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">ps1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-2">ps2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">300</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-3">ps3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">600</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">ps <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(ps1, ps2, ps3)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">mean</span>(ps1) ;  <span class="fu" style="color: #4758AB;">mean</span>(ps2); <span class="fu" style="color: #4758AB;">mean</span>(ps3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2460785</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.7967239</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.03217107</code></pre>
</div>
</div>
<p>La distribución de los “scores” sería</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-2-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/05/29/no-mentir-s/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Pues el CBPE no sería otra cosa que calcular el auc del modelo ¡¡asumiendo que las probabilidades estimadas son correctas!! . Es como intentar demostrar algo teniendo como asunción que es cierto. Pero vayamos al cálculo.</p>
<p>Siguiendo lo descrito por la documentación y comprobando con el código de la librería se tendría que</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">tpr_fpr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(threshold, ps) {</span>
<span id="cb5-2">  yj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ifelse</span>(ps <span class="sc" style="color: #5E5E5E;">&gt;=</span> threshold, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>) </span>
<span id="cb5-3">  p_false <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">abs</span>(yj <span class="sc" style="color: #5E5E5E;">-</span> ps)</span>
<span id="cb5-4">  p_true <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">-</span> p_false</span>
<span id="cb5-5">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(yj)</span>
<span id="cb5-6">  tp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(p_true[yj <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb5-7">  fp <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(p_false[yj<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb5-8">  tn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(p_true[yj<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>] )</span>
<span id="cb5-9">  fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(p_false[yj<span class="sc" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span>] )</span>
<span id="cb5-10">  tpr <span class="ot" style="color: #003B4F;">&lt;-</span> tp <span class="sc" style="color: #5E5E5E;">/</span> (tp <span class="sc" style="color: #5E5E5E;">+</span> fn)</span>
<span id="cb5-11">  fpr <span class="ot" style="color: #003B4F;">&lt;-</span> fp <span class="sc" style="color: #5E5E5E;">/</span>(fp <span class="sc" style="color: #5E5E5E;">+</span> tn)</span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">tpr =</span> tpr, <span class="at" style="color: #657422;">fpr =</span> fpr))</span>
<span id="cb5-13">}</span>
<span id="cb5-14"></span>
<span id="cb5-15"></span>
<span id="cb5-16">pscortes <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">unique</span>(ps), <span class="at" style="color: #657422;">decreasing =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb5-17"></span>
<span id="cb5-18">dfs <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">lapply</span>(pscortes, <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">tpr_fpr</span>(x, ps))</span>
<span id="cb5-19"></span>
<span id="cb5-20">valores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, dfs)</span>
<span id="cb5-21"></span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="fu" style="color: #4758AB;">plot</span>(valores<span class="sc" style="color: #5E5E5E;">$</span>fpr, valores<span class="sc" style="color: #5E5E5E;">$</span>tpr, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/05/29/no-mentir-s/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">simple_auc <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(TPR, FPR){</span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;"># inputs already sorted, best scores first </span></span>
<span id="cb6-3">  dFPR <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">diff</span>(FPR), <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb6-4">  dTPR <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">diff</span>(TPR), <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">sum</span>(TPR <span class="sc" style="color: #5E5E5E;">*</span> dFPR) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">sum</span>(dTPR <span class="sc" style="color: #5E5E5E;">*</span> dFPR)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-6">}</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;">with</span>(valores, <span class="fu" style="color: #4758AB;">simple_auc</span>(tpr, fpr))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.8922705</code></pre>
</div>
</div>
<p>Cómo se ve, para calcular el auc sólo se tiene en cuenta las probabilidades estimadas, por lo que pierde todo el sentido para obtener un desempeño de cómo de bien lo hace el modelo.</p>
<p>De hecho, si hubiera simulado para cada observación una bernoulli tomando como probabilidad de éxito el score tendría lo siguiente, y tomo esa simulación como el valor real , obtengo el mismo auc que con CBPE.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">labels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(<span class="fu" style="color: #4758AB;">length</span>(ps), <span class="dv" style="color: #AD0000;">1</span>, ps)</span>
<span id="cb8-2">(res <span class="ot" style="color: #003B4F;">&lt;-</span> pROC<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">auc</span>(labels, ps))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting levels: control = 0, case = 1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting direction: controls &lt; cases</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Area under the curve: 0.8991</code></pre>
</div>
</div>
<p>Es decir, en la misma definición de lo que es una matriz de confusión y las métricas asociadas va implícita la idea de comparar la realidad con la estimación, <strong>si sustituyes la realidad por la estimación , entonces pierde el sentido</strong>.</p>
<p>Pero veamos para qué si puede servir esta cosa. Pues nos puede servir para detectar cambios de distribuciones conjuntas entre dos conjuntos de datos. Me explico, supongamos que quiero predecir sobre un conjunto de datos que en vez de tener 1000 observaciones de la primera población hay 200, y que de la segunda hay 100 y 10000 de la tercera. Pues en este caso, el cambio en el auc se debe solo a eso, al cambio de la estructura de la población global.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">ps1_new <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb12-2">ps2_new <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb12-3">ps3_new <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbeta</span>(<span class="dv" style="color: #AD0000;">10000</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">60</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">ps_new <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(ps1_new, ps2_new, ps3_new)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">labels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(<span class="fu" style="color: #4758AB;">length</span>(ps_new), <span class="dv" style="color: #AD0000;">1</span>, ps_new)</span>
<span id="cb13-2">(res <span class="ot" style="color: #003B4F;">&lt;-</span> pROC<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">auc</span>(labels, ps_new))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting levels: control = 0, case = 1</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting direction: controls &lt; cases</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Area under the curve: 0.7695</code></pre>
</div>
</div>
<p>La bajada del “auc estimado” solo se debe a cambios en la estructura de la nueva población que tiene muchas más observaciones de la población 3.</p>
<p>Por lo tanto, lo que <code>nannyml</code> hace y no está mal, ojo, es simplemente ver cuál serían métricas agregadas (como el auc) cuando cambia la estructura pero no la probabilidad condicionada de y con respecto a las variables independientes.</p>
<p>Lo que no me parece bien es poner en la documentación que calcula el desempeño de un modelo sin ver el target, puesto que confunde y ya ha dado lugar a algún post en “towards data science” (gente, formaros primero con libros antes de leer post de estos sitios) con más humo que madera.</p>
<p>Y como se suele decir “No mentirás”.</p>



 ]]></description>
  <category>estadística</category>
  <category>machine learning</category>
  <category>python</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/05/29/no-mentir-s/index.html</guid>
  <pubDate>Sat, 28 May 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Transparente</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/04/10/transparente/2022-04-10-transparente.html</link>
  <description><![CDATA[ 




<p>El otro día le decía a mis compañeros que hay cosas que no entiendo de la jerga del mundillo en el que nos movemos, (para echar unas risas ver el video de <a href="https://www.youtube.com/watch?v=skn2OeY4X9o">Pantomima Full</a>) .</p>
<p>Ya lo de “tengo una call”, o lo de “estamos alineados” me toca bastante los … pero bueno. Pero hay varias expresiones que me repatean profundamente, y voy a enumerarlas por orden decreciente de odio.</p>
<ul>
<li><p>“Reglas de negocio”. Esta frase te la sueltan cuándo no quieren decirte que lo que se hace son 3 “wheres” que alguien decidió en su día y que ni se evaluó su eficacia entonces, ni ahora. Es como un mantra bajo el cual cabe todo, cuándo no te quieren decir alguna cosa absurda que se hace, se dice “son reglas de negocio”, y ya es como que no puedes preguntar de qué se trata, es eso y fin.</p></li>
<li><p>“Hacer foco”. ¿Cómo que hacer foco? ¿quíén ha empezado a maltratar el idioma de tal manera? Uno se enfoca, se pone el foco, etc, pero no se hace foco. Con lo bonito que sería decir “énfasis” o “hincapié”. Supongo que esto lo dijo alguien con poder en el pasado, y ya nadie se atrevió a corregir, y no sólo eso, sino que se adoptó y ahora es ley.</p></li>
<li><p>“Transparente”. Igual que con reglas de negocio, alguien dice, “para vosotros esto será transparente” y te quedas igual, no sabes si significa que te va a afectar lo que sea que se haga, si no te afecta, si te afecta pero poco, o vete tu a saber el qué. Con lo que fácil que sería un “sujeto , verbo, predicado”.</p></li>
</ul>
<p>En fin, buena semana santa, no hagan muchos “quick win” , beban algo “transparente” y si no saben como explicar algún desastre digan que “son reglas de negocio” y que “hay que hacer foco” en “el roadmap” para que estemos todos “alineados” y llegar a los “Okr’s” del próximo “Q”.</p>
<p>Advertencia: Huyan de todo áquel que use estas expresiones más de 2 veces cada media hora. Su productividad aumentará</p>



 ]]></description>
  <category>agile</category>
  <category>empresas</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/04/10/transparente/2022-04-10-transparente.html</guid>
  <pubDate>Sat, 09 Apr 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Palabras para Julia ( Parte 3/n)</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/03/20/palabras-para-julia-parte-3-n/index.html</link>
  <description><![CDATA[ 




<p>Tengo una relación extraña con Julia, por un lado me gusta bastante y por otro me parece que aún le falta algo para que lo adopte de forma más seria. Quizá tenga que ver con mi forma de aprender (que seguro que no es óptima), en vez de irme a los tutoriales típicos, me voy directamente a ver cómo se hace algo que me interesa. En este caso hacer modelos bayesianos con Julia usando <a href="https://turing.ml/stable/">Turing</a>.</p>
<p>Turing es una librería escrita en Julia para programación probabilística, podría considerarse como un competidor de <a href="https://mc-stan.org/">Stan</a>, aunque todavía es una librería joven. Turing añade sólo una pequeña capa de programación probabilística, y promete cosas como modelos de redes neuronales dónde los pesos sigan una distribución probabilística</p>
<p>No me voy a meter en esos lares, yo soy más prosaico y por el momento sólo quiero ejemplificar con Turing el modelo que cuento en <a href="https://muestrear-no-es-pecado.netlify.app/2022/02/06/pluralista/">pluralista</a>.</p>
<p>Recordemos que habías simulado unos datos tal que así.</p>
<div class="cell">

</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1908</span>)</span>
<span id="cb1-2">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span> <span class="co" style="color: #5E5E5E;"># número de pares, 1000 madres y 1000 hijas</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">U <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># Simulamos el confounder</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># orden de nacimiento y </span></span>
<span id="cb1-8">B1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(N,<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.5</span>)  <span class="co" style="color: #5E5E5E;"># 50% de madres nacieeron en primer lugar</span></span>
<span id="cb1-9">M <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>( N , <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> B1 <span class="sc" style="color: #5E5E5E;">+</span> U )</span>
<span id="cb1-10"></span>
<span id="cb1-11">B2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(N,<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="co" style="color: #5E5E5E;"># 50% son las primogénitas</span></span>
<span id="cb1-12">D <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>( N , <span class="dv" style="color: #AD0000;">2</span>  <span class="sc" style="color: #5E5E5E;">*</span>B2 <span class="sc" style="color: #5E5E5E;">+</span> U <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">*</span> M )</span></code></pre></div>
</div>
<p>En la simulación se ha forzado que el efecto del número de hijos de la madre (M) sobre el número de hijos de la hija (D) sea cero.</p>
<p>El DAG era algo así. En este dag para estimar el efecto de M sobre D, hace falta condicionar por U, pero al ser una variable de confusión no observada, no habría forma de estimarlo de la forma tradicional (a lo Pearl). La solución es estimar el DAG completo.</p>
<div class="cell">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/03/20/palabras-para-julia-parte-3-n/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<section id="ajuste-en-turing" class="level2">
<h2 class="anchored" data-anchor-id="ajuste-en-turing">Ajuste en Turing</h2>
<p>Recordemos que nuestra U es una variable que no tenemos, se podría asimilar a una variable con todos sus valores perdidos y cada uno de esos valores perdidos es un parámetro a estimar.</p>
<p><strong>Librerías</strong> : Aparte de Turing, hace falta ReverseDiff (diferenciación automática) y alguna más.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">LinearAlgebra</span>, <span class="bu" style="color: null;">Plots</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Turing</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">ReverseDiff</span>, <span class="bu" style="color: null;">Memoization </span></span>
<span id="cb2-4"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">DataFrames</span></span>
<span id="cb2-5"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">CSV</span></span>
<span id="cb2-6"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Random</span></span>
<span id="cb2-7"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">StatsPlots</span></span>
<span id="cb2-8"><span class="im" style="color: #00769E;">using</span> <span class="bu" style="color: null;">Distributions</span></span></code></pre></div>
<p>Leo los datos simulados que había guardado en un csv previamente</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb3-1"></span>
<span id="cb3-2">pl <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">DataFrame</span>(CSV.<span class="fu" style="color: #4758AB;">File</span>(<span class="st" style="color: #20794D;">"data/pluralista.csv"</span>))</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">describe</span>(pl)</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> describe<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">pl</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb4-2"><span class="ex" style="color: null;">4×7</span> DataFrame</span>
<span id="cb4-3"> <span class="ex" style="color: null;">Row</span> │ variable  mean     min       median    max      nmissing  eltype   </span>
<span id="cb4-4">     <span class="ex" style="color: null;">│</span> Symbol    Float64  Real      Float64   Real     Int64     DataType </span>
<span id="cb4-5"><span class="ex" style="color: null;">─────┼────────────────────────────────────────────────────────────────────</span></span>
<span id="cb4-6">   <span class="ex" style="color: null;">1</span> │ D         1.00621  <span class="at" style="color: #657422;">-3.55365</span>  0.986136  6.03293         0  Float64</span>
<span id="cb4-7">   <span class="ex" style="color: null;">2</span> │ M         1.00836  <span class="at" style="color: #657422;">-3.91626</span>  0.90395   6.69591         0  Float64</span>
<span id="cb4-8">   <span class="ex" style="color: null;">3</span> │ B1        0.473     0        0.0       1               0  Int64</span>
<span id="cb4-9">   <span class="ex" style="color: null;">4</span> │ B2        0.487     0        0.0       1               0  Int64</span></code></pre></div>
<p>Nos construimos el modelo con Turing.</p>
<p>Algunas cosas a comentar.</p>
<ul>
<li><p>El uso de filldist para crear el vector de U y que cada valor siga una Normal(0,1).</p></li>
<li><p><code>.+</code> para sumar un escalar como a1 con un vector. El uso del “.operacion” es habitual en julia para hacer broadcast.</p></li>
<li><p>MvNormal al final. Esto lo he leído por ahí para que haga mejor el sampleo.</p></li>
<li><p>Al igual que en Stan se tiene que escribir en cierto orden (y si no no funciona bien) porque Turing no es declarativo.</p></li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="pp" style="color: #AD0000;">@model</span> <span class="kw" style="color: #003B4F;">function</span> <span class="fu" style="color: #4758AB;">pluralista</span>(D, M, B1, B2)</span>
<span id="cb5-2"></span>
<span id="cb5-3">    N <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">Int</span>(<span class="fu" style="color: #4758AB;">length</span>(D))</span>
<span id="cb5-4"></span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;"># Variable no observada</span></span>
<span id="cb5-6">    U <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">filldist</span>(<span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1</span>), N)</span>
<span id="cb5-7"></span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;"># Prior coeficientes</span></span>
<span id="cb5-10">    a1 <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb5-11">    a2 <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb5-12">    m  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb5-13">    b  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Normal</span>(<span class="fl" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb5-14">    p  <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Beta</span>(<span class="fl" style="color: #AD0000;">2</span>,<span class="fl" style="color: #AD0000;">2</span>)</span>
<span id="cb5-15">    </span>
<span id="cb5-16">    </span>
<span id="cb5-17">    k <span class="op" style="color: #5E5E5E;">~</span>  <span class="fu" style="color: #4758AB;">Exponential</span>(<span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb5-18">    σ₁ <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Exponential</span>(<span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb5-19">    σ₂ <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Exponential</span>(<span class="fl" style="color: #AD0000;">1</span>)</span>
<span id="cb5-20">    </span>
<span id="cb5-21">    B1 <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Bernoulli</span>(p)</span>
<span id="cb5-22">    B2 <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">Bernoulli</span>(p)</span>
<span id="cb5-23">    </span>
<span id="cb5-24">    <span class="co" style="color: #5E5E5E;">#  transformed parameters</span></span>
<span id="cb5-25">    mu1 <span class="op" style="color: #5E5E5E;">=</span> a1 <span class="op" style="color: #5E5E5E;">.+</span> b <span class="op" style="color: #5E5E5E;">*</span> B1 <span class="op" style="color: #5E5E5E;">+</span> k <span class="op" style="color: #5E5E5E;">*</span> U</span>
<span id="cb5-26">    mu2 <span class="op" style="color: #5E5E5E;">=</span> a2 <span class="op" style="color: #5E5E5E;">.+</span> b <span class="op" style="color: #5E5E5E;">*</span> B2 <span class="op" style="color: #5E5E5E;">+</span> m <span class="op" style="color: #5E5E5E;">*</span> M <span class="op" style="color: #5E5E5E;">+</span> k <span class="op" style="color: #5E5E5E;">*</span> U</span>
<span id="cb5-27">    </span>
<span id="cb5-28">    <span class="co" style="color: #5E5E5E;"># likelihood</span></span>
<span id="cb5-29"></span>
<span id="cb5-30"></span>
<span id="cb5-31">    M <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">MvNormal</span>(mu1, σ₁ <span class="op" style="color: #5E5E5E;">*</span> I) </span>
<span id="cb5-32">    D <span class="op" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">MvNormal</span>(mu2, σ₂ <span class="op" style="color: #5E5E5E;">*</span> I)</span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="kw" style="color: #003B4F;">end</span></span></code></pre></div>
<p>Comparando con el código del mismo modelo en Stan (al final del post) se observa que la sintaxis es parecida.</p>
</section>
<section id="muestreo-de-la-posterior-en-turing" class="level2">
<h2 class="anchored" data-anchor-id="muestreo-de-la-posterior-en-turing">Muestreo de la posterior en Turing</h2>
<p>Hay que usar reversediff porque si no no acaba nunca.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="bu" style="color: null;">Random</span>.<span class="fu" style="color: #4758AB;">seed!</span>(<span class="fl" style="color: #AD0000;">155</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3"></span>
<span id="cb6-4">Turing.<span class="fu" style="color: #4758AB;">setadbackend</span>(<span class="op" style="color: #5E5E5E;">:</span>reversediff)</span>
<span id="cb6-5">Turing.<span class="fu" style="color: #4758AB;">setrdcache</span>(<span class="cn" style="color: #8f5902;">true</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7">flbi <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">sample</span>(</span>
<span id="cb6-8">    <span class="fu" style="color: #4758AB;">pluralista</span>(pl.D, pl.M, pl.B1, pl.B2), </span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;">NUTS</span>(<span class="fl" style="color: #AD0000;">1000</span>, <span class="fl" style="color: #AD0000;">0.65</span>),</span>
<span id="cb6-10">    <span class="fu" style="color: #4758AB;">MCMCThreads</span>(),</span>
<span id="cb6-11">    <span class="fl" style="color: #AD0000;">2_000</span>, <span class="fl" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> flbi = sample<span class="er" style="color: #AD0000;">(</span></span>
<span id="cb7-2">           <span class="ex" style="color: null;">pluralista</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">pl.D,</span> pl.M, pl.B1, pl.B2<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span> </span>
<span id="cb7-3">           <span class="ex" style="color: null;">NUTS</span><span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">1000,</span> 0.65<span class="kw" style="color: #003B4F;">)</span><span class="ex" style="color: null;">,</span></span>
<span id="cb7-4">           <span class="fu" style="color: #4758AB;">MCMCThreads()</span><span class="ex" style="color: null;">,</span></span>
<span id="cb7-5">           <span class="ex" style="color: null;">2_000,</span> 4<span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb7-6"><span class="ex" style="color: null;">┌</span> Info: Found initial step size</span>
<span id="cb7-7"><span class="ex" style="color: null;">└</span>   ϵ = 0.0125</span>
<span id="cb7-8"><span class="ex" style="color: null;">┌</span> Info: Found initial step size</span>
<span id="cb7-9"><span class="ex" style="color: null;">└</span>   ϵ = 0.025</span>
<span id="cb7-10"><span class="ex" style="color: null;">┌</span> Info: Found initial step size</span>
<span id="cb7-11"><span class="ex" style="color: null;">└</span>   ϵ = 0.05</span>
<span id="cb7-12"><span class="ex" style="color: null;">┌</span> Info: Found initial step size</span>
<span id="cb7-13"><span class="ex" style="color: null;">└</span>   ϵ = 0.00625</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="ex" style="color: null;">Chains</span> MCMC chain <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2000×1020×4</span> Array{Float64, 3}<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="ex" style="color: null;">Iterations</span>        = 1001:1:3000</span>
<span id="cb7-18"><span class="ex" style="color: null;">Number</span> of chains  = 4</span>
<span id="cb7-19"><span class="ex" style="color: null;">Samples</span> per chain = 2000</span>
<span id="cb7-20"><span class="ex" style="color: null;">Wall</span> duration     = 136.29 seconds</span>
<span id="cb7-21"><span class="ex" style="color: null;">Compute</span> duration  = 510.14 seconds</span></code></pre></div>
<p>Y ha tardado unos 2 minutos por cadena. Ciertamente no está mal, pero no se acerca a la velocidad de Stan, que lo hace en unos 18 segundos.</p>
<p>Y podemos extraer un resumen de los parámetros que nos interesan con</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">julia</span><span class="op" style="color: #5E5E5E;">&gt;</span> summarize<span class="er" style="color: #AD0000;">(</span><span class="va" style="color: #111111;">flbi</span><span class="op" style="color: #5E5E5E;">[</span>[:a1, :a2, :b, :m, :σ₁, :σ₂<span class="op" style="color: #5E5E5E;">]</span><span class="ex" style="color: null;">]</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb8-2"><span class="ex" style="color: null;">Summary</span> Statistics</span>
<span id="cb8-3">  <span class="ex" style="color: null;">parameters</span>      mean       std   naive_se      mcse         ess      rhat   ess_per_sec </span>
<span id="cb8-4">      <span class="ex" style="color: null;">Symbol</span>   Float64   Float64    Float64   Float64     Float64   Float64       Float64 </span>
<span id="cb8-5"></span>
<span id="cb8-6">          <span class="ex" style="color: null;">a1</span>    0.0682    0.0538     0.0006    0.0009   3268.9064    1.0007        6.4079</span>
<span id="cb8-7">          <span class="ex" style="color: null;">a2</span>    0.0326    0.0759     0.0008    0.0024   1015.7923    1.0059        1.9912</span>
<span id="cb8-8">           <span class="ex" style="color: null;">m</span>    0.0063    0.0430     0.0005    0.0018    554.1348    1.0096        1.0862</span>
<span id="cb8-9">           <span class="ex" style="color: null;">b</span>    1.9865    0.0593     0.0007    0.0012   2403.5462    1.0008        4.7116</span>
<span id="cb8-10">          <span class="ex" style="color: null;">σ₁</span>    1.1427    0.1205     0.0013    0.0049    535.2307    1.0086        1.0492</span>
<span id="cb8-11">          <span class="ex" style="color: null;">σ₂</span>    0.9621    0.0719     0.0008    0.0016   2496.8176    1.0009        4.8944</span>
<span id="cb8-12">          </span></code></pre></div>
<p>Y efectivamente, lo ha hecho bien y ha recuperado los verdaderos valores de los parámetros y estimado que el efecto de M sobre D es 0.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode julia code-with-copy"><code class="sourceCode julia"><span id="cb9-1">myplot <span class="op" style="color: #5E5E5E;">=</span> <span class="fu" style="color: #4758AB;">plot</span>(flbi[[<span class="op" style="color: #5E5E5E;">:</span>a1, <span class="op" style="color: #5E5E5E;">:</span>a2, <span class="op" style="color: #5E5E5E;">:</span>b, <span class="op" style="color: #5E5E5E;">:</span>m, <span class="op" style="color: #5E5E5E;">:</span>σ₁, <span class="op" style="color: #5E5E5E;">:</span>σ₂]])</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">savefig</span>(myplot,<span class="st" style="color: #20794D;">"plurarlista_turing.png"</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="plurarlista_turing.png" class="lightbox" title="imagen" data-gallery="quarto-lightbox-gallery-2"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/03/20/palabras-para-julia-parte-3-n/plurarlista_turing.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">imagen</figcaption><p></p>
</figure>
</div>
</section>
<section id="reflexiones." class="level2">
<h2 class="anchored" data-anchor-id="reflexiones.">Reflexiones.</h2>
<ul>
<li>Me ha parecido fácil escribir un modelo bayesiano como este en Turing</li>
<li>No he conseguido ver como hacer que me funcione un predict sobre nuevos datos que tengan B1 y B2, pero no M y D. Cuestión de empezar más poco a poco con los tutoriales que hay por ahí.</li>
<li>Por el momento parece que Stan sigue siendo el estado del arte en estas cosas, aunque lo de integrar Turing con <a href="https://turing.ml/dev/tutorials/03-bayesian-neural-network/">Flux</a> por ejemplo, promete.</li>
</ul>
<p>Mismo modelo en Stan.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode stan code-with-copy"><code class="sourceCode stan"><span id="cb10-1"></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">data</span>{</span>
<span id="cb10-3">    <span class="dt" style="color: #AD0000;">int</span> N;</span>
<span id="cb10-4">    <span class="dt" style="color: #AD0000;">vector</span>[N] D;</span>
<span id="cb10-5">    <span class="dt" style="color: #AD0000;">vector</span>[N] M;</span>
<span id="cb10-6">    <span class="dt" style="color: #AD0000;">int</span> B1[N];</span>
<span id="cb10-7">    <span class="dt" style="color: #AD0000;">int</span> B2[N];</span>
<span id="cb10-8">}</span>
<span id="cb10-9"></span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="kw" style="color: #003B4F;">parameters</span>{</span>
<span id="cb10-12">    <span class="dt" style="color: #AD0000;">vector</span>[N] U;</span>
<span id="cb10-13">    <span class="dt" style="color: #AD0000;">real</span> m;</span>
<span id="cb10-14">    <span class="dt" style="color: #AD0000;">real</span> b;</span>
<span id="cb10-15">    <span class="dt" style="color: #AD0000;">real</span> a2;</span>
<span id="cb10-16">    <span class="dt" style="color: #AD0000;">real</span> a1;</span>
<span id="cb10-17">    <span class="dt" style="color: #AD0000;">real</span>&lt;<span class="kw" style="color: #003B4F;">lower</span>=<span class="dv" style="color: #AD0000;">0</span>&gt; tau;</span>
<span id="cb10-18">    <span class="dt" style="color: #AD0000;">real</span>&lt;<span class="kw" style="color: #003B4F;">lower</span>=<span class="dv" style="color: #AD0000;">0</span>&gt; sigma;</span>
<span id="cb10-19">    <span class="dt" style="color: #AD0000;">real</span>&lt;<span class="kw" style="color: #003B4F;">lower</span>=<span class="dv" style="color: #AD0000;">0</span>&gt; k;</span>
<span id="cb10-20">    <span class="dt" style="color: #AD0000;">real</span>&lt;<span class="kw" style="color: #003B4F;">lower</span>=<span class="dv" style="color: #AD0000;">0</span>,<span class="kw" style="color: #003B4F;">upper</span>=<span class="dv" style="color: #AD0000;">1</span>&gt; p;</span>
<span id="cb10-21">}</span>
<span id="cb10-22"></span>
<span id="cb10-23"><span class="kw" style="color: #003B4F;">transformed parameters</span> {</span>
<span id="cb10-24">  <span class="dt" style="color: #AD0000;">vector</span>[N] nu;</span>
<span id="cb10-25">  <span class="dt" style="color: #AD0000;">vector</span>[N] mu;</span>
<span id="cb10-26"></span>
<span id="cb10-27"></span>
<span id="cb10-28">  <span class="cf" style="color: #003B4F;">for</span> ( i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span>:N ) {</span>
<span id="cb10-29">        nu[i] = a2 + b * B2[i] + m * M[i] + k * U[i];</span>
<span id="cb10-30">    }</span>
<span id="cb10-31">    </span>
<span id="cb10-32">  <span class="cf" style="color: #003B4F;">for</span> ( i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span>:N ) {</span>
<span id="cb10-33">        mu[i] = a1 + b * B1[i] + k * U[i];</span>
<span id="cb10-34">    }</span>
<span id="cb10-35"></span>
<span id="cb10-36"></span>
<span id="cb10-37">}</span>
<span id="cb10-38"></span>
<span id="cb10-39"><span class="kw" style="color: #003B4F;">model</span>{</span>
<span id="cb10-40">    </span>
<span id="cb10-41">    U ~ normal( <span class="dv" style="color: #AD0000;">0</span> , <span class="dv" style="color: #AD0000;">1</span> );</span>
<span id="cb10-42">    </span>
<span id="cb10-43">    a1 ~ normal( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> );</span>
<span id="cb10-44">    a2 ~ normal( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> );</span>
<span id="cb10-45">    m  ~ normal( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> );</span>
<span id="cb10-46">    b  ~ normal( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> );</span>
<span id="cb10-47">    p  ~ beta( <span class="dv" style="color: #AD0000;">2</span> , <span class="dv" style="color: #AD0000;">2</span> );</span>
<span id="cb10-48">    </span>
<span id="cb10-49">    k ~ exponential( <span class="dv" style="color: #AD0000;">1</span> );</span>
<span id="cb10-50">    sigma ~ exponential( <span class="dv" style="color: #AD0000;">1</span> );</span>
<span id="cb10-51">    tau   ~ exponential( <span class="dv" style="color: #AD0000;">1</span> );</span>
<span id="cb10-52">    B2    ~ bernoulli( p );</span>
<span id="cb10-53">    B1    ~ bernoulli( p );</span>
<span id="cb10-54"></span>
<span id="cb10-55">    D ~ normal( nu , tau );</span>
<span id="cb10-56">    M ~ normal( mu , sigma );</span>
<span id="cb10-57">}</span>
<span id="cb10-58"></span>
<span id="cb10-59"><span class="co" style="color: #5E5E5E;">// genero point_loglikelihood, util para evaluar modelo con psis loo</span></span>
<span id="cb10-60"><span class="kw" style="color: #003B4F;">generated quantities</span> {</span>
<span id="cb10-61"> <span class="dt" style="color: #AD0000;">vector</span>[N] log_lik_D;</span>
<span id="cb10-62"> <span class="dt" style="color: #AD0000;">vector</span>[N] log_lik_M;</span>
<span id="cb10-63"></span>
<span id="cb10-64">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span>:N)</span>
<span id="cb10-65">    log_lik_D[i] = normal_lpdf(D[i] | nu[i], tau);</span>
<span id="cb10-66"></span>
<span id="cb10-67">  <span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span>:N)</span>
<span id="cb10-68">    log_lik_M[i] = normal_lpdf(M[i] | mu[i], sigma);</span>
<span id="cb10-69"></span>
<span id="cb10-70"></span>
<span id="cb10-71">  }</span></code></pre></div>


</section>

 ]]></description>
  <category>Julia</category>
  <category>R</category>
  <category>Stan</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/03/20/palabras-para-julia-parte-3-n/index.html</guid>
  <pubDate>Sat, 19 Mar 2022 23:00:00 GMT</pubDate>
  <media:content url="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/03/20/palabras-para-julia-parte-3-n/plurarlista_turing.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>Mediator. Full luxury bayes</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/12/mediator-full-luxury-bayes/index.html</link>
  <description><![CDATA[ 



<p>Continuando con la serie sobre cosas de inferencia causal y full luxury bayes, antes de que empiece mi amigo <a href="https://www.datanalytics.com/">Carlos Gil</a>, y dónde seguramente se aprenderá más.</p>
<p>Este ejemplo viene motivado precisamente por una charla que tuve el otro día con él.</p>
<p>Sea el siguiente diagrama causal</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">  <span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;">library</span>(dagitty)</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">library</span>(ggdag)</span>
<span id="cb1-4">  </span>
<span id="cb1-5">  g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dagitty</span>(<span class="st" style="color: #20794D;">"dag{ </span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;">  x -&gt; y ;</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;">  z -&gt; y ;</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;">  x -&gt; z</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;"> }"</span>)</span>
<span id="cb1-10">  </span>
<span id="cb1-11">  </span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">ggdag</span>(g) </span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-1-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/12/mediator-full-luxury-bayes/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Se tiene que <code>z</code> es un mediador entre x e y, y la teoría nos dice que si quiero obtener el efecto directo de x sobre y he de condicionar por <code>z</code> , y efectivamente, así nos lo dice el backdoor criterio. Mientras que si quiero el efecto total de x sobre y no he de condicionar por <code>z</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">  <span class="fu" style="color: #4758AB;">adjustmentSets</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"x"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"y"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"total"</span>  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> {}</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">  <span class="fu" style="color: #4758AB;">adjustmentSets</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"x"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"y"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"direct"</span>  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{ z }</code></pre>
</div>
</div>
<section id="datos-simulados" class="level2">
<h2 class="anchored" data-anchor-id="datos-simulados">Datos simulados</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">155</span>)</span>
<span id="cb6-2">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span> </span>
<span id="cb6-3"></span>
<span id="cb6-4">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>) </span>
<span id="cb6-5">z <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">*</span>x , <span class="dv" style="color: #AD0000;">2</span> ) <span class="co" style="color: #5E5E5E;"># a z le ponemos más variabilidad, pero daría igual</span></span>
<span id="cb6-6">y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span><span class="sc" style="color: #5E5E5E;">*</span>x <span class="sc" style="color: #5E5E5E;">+</span> z, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p><strong>Efecto total de x sobre y </strong></p>
<p>Tal y como hemos simulado los datos, se esperaría que el efecto <em>total</em> de x sobre y fuera</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cdfrac%7Bcov(x,y)%7D%20%7Bvar(x)%7D%20%5Capprox%207%20"></p>
<p>Y qué el efecto <em>directo</em> fuera de 3</p>
<p>Efectivamente</p>
<p>Efecto total</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># efecto total</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">lm</span>(y<span class="sc" style="color: #5E5E5E;">~</span>x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ x)

Coefficients:
(Intercept)            x  
      5.881        7.112  </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># efecto directo</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">lm</span>(y<span class="sc" style="color: #5E5E5E;">~</span>x<span class="sc" style="color: #5E5E5E;">+</span>z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ x + z)

Coefficients:
(Intercept)            x            z  
     2.0318       3.0339       0.9945  </code></pre>
</div>
</div>
</section>
<section id="full-luxury-bayes" class="level2">
<h2 class="anchored" data-anchor-id="full-luxury-bayes">Full luxury bayes</h2>
<p>Hagamos lo mismo pero estimando el dag completo</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(cmdstanr)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">library</span>(rethinking)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">set_cmdstan_path</span>(<span class="st" style="color: #20794D;">"~/Descargas/cmdstan/"</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb11-6">  <span class="at" style="color: #657422;">N =</span> N,</span>
<span id="cb11-7">  <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb11-8">  <span class="at" style="color: #657422;">y =</span> y,</span>
<span id="cb11-9">  <span class="at" style="color: #657422;">z =</span> z</span>
<span id="cb11-10">)</span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1908</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13">flbi <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ulam</span>(</span>
<span id="cb11-14">  <span class="fu" style="color: #4758AB;">alist</span>(</span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;"># x model, si quiero estimar la media de x sino, no me hace falta</span></span>
<span id="cb11-16">    x <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>(mux, k),</span>
<span id="cb11-17">    mux <span class="ot" style="color: #003B4F;">&lt;-</span> a0,</span>
<span id="cb11-18">    z <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( mu , sigma ),</span>
<span id="cb11-19">    </span>
<span id="cb11-20">    mu <span class="ot" style="color: #003B4F;">&lt;-</span> a1 <span class="sc" style="color: #5E5E5E;">+</span> bx <span class="sc" style="color: #5E5E5E;">*</span> x,</span>
<span id="cb11-21">   </span>
<span id="cb11-22">    y <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( nu , tau ),</span>
<span id="cb11-23">    nu <span class="ot" style="color: #003B4F;">&lt;-</span> a2 <span class="sc" style="color: #5E5E5E;">+</span> bx2 <span class="sc" style="color: #5E5E5E;">*</span> x <span class="sc" style="color: #5E5E5E;">+</span> bz <span class="sc" style="color: #5E5E5E;">*</span> z,</span>
<span id="cb11-24"></span>
<span id="cb11-25">    <span class="co" style="color: #5E5E5E;"># priors</span></span>
<span id="cb11-26">    </span>
<span id="cb11-27">    <span class="fu" style="color: #4758AB;">c</span>(a0,a1,a2,bx,bx2, bz) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> ),</span>
<span id="cb11-28">    <span class="fu" style="color: #4758AB;">c</span>(sigma,tau, k) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">exponential</span>( <span class="dv" style="color: #AD0000;">1</span> )</span>
<span id="cb11-29">  ), <span class="at" style="color: #657422;">data=</span>dat , <span class="at" style="color: #657422;">chains=</span><span class="dv" style="color: #AD0000;">10</span> , <span class="at" style="color: #657422;">cores=</span><span class="dv" style="color: #AD0000;">10</span> , <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">500</span>, <span class="at" style="color: #657422;">iter=</span><span class="dv" style="color: #AD0000;">2000</span> , <span class="at" style="color: #657422;">cmdstan=</span><span class="cn" style="color: #8f5902;">TRUE</span> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 10 parallel chains, with 1 thread(s) per chain...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 5 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 6 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 7 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 8 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 9 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 10 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 8 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 5 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 7 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 9 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 6 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 10 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 6 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 9 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 5 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 8 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 7 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 6 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 10 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 5 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 6 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 9 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 8 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 7 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 10 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 5 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 6 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 6 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 9 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 1 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 8 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 6 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 10 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 3 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 7 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 1 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 5 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 5 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 6 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 9 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 9 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 8 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 8 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 2 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 3 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 6 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 1 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 5 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 7 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 10 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 10 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 7 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 8 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 9 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 6 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 1 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 5 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 8 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 10 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 2 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 4 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 6 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 7 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 9 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 6 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 8 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 10 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 1 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 2 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 5 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 6 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 4 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 7 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 8 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 9 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 10 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 2 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 5 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 6 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 8 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 9 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 4 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 7 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 6 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 5 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 10 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 2 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 8 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 9 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 4 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 6 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 7 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 5 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 8 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 9 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 10 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 6 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 8 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 7 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 5 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 9 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 10 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 6 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 8 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 7 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 5 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 9 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 6 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 8 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 10 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 5 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 7 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 8 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 6 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 9 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 5 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 8 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 9 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 10 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 6 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 7 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 6 finished in 10.6 seconds.
Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 8 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 9 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 5 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 7 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 10 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 9 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 8 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 7 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 5 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 9 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 8 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 8 finished in 11.9 seconds.
Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 7 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 10 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 9 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 5 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 9 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 9 finished in 12.5 seconds.
Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 7 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 10 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 5 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 13.0 seconds.
Chain 7 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 finished in 13.2 seconds.
Chain 5 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 10 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 5 finished in 13.2 seconds.
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 7 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 10 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 7 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 finished in 13.9 seconds.
Chain 7 finished in 13.9 seconds.
Chain 10 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 10 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 10 finished in 14.4 seconds.
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 finished in 14.6 seconds.

All 10 chains finished successfully.
Mean chain execution time: 13.1 seconds.
Total execution time: 14.8 seconds.</code></pre>
</div>
</div>
<p>Y recuperamos los coeficientes y varianzas</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">precis</span>(flbi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           mean         sd      5.5%    94.5%     n_eff     Rhat4
bz    1.0131931 0.01557219 0.9883466 1.038241  8226.042 1.0005919
bx2   2.9610334 0.07098661 2.8447278 3.073501  9640.122 1.0004040
bx    4.1535508 0.06180592 4.0552767 4.252771  8753.661 1.0001456
a2    1.9440850 0.09315785 1.7952495 2.093027 11266.267 1.0001373
a1    3.7089914 0.13578637 3.4916007 3.926010  8709.448 1.0002893
a0    1.9857103 0.03108199 1.9357773 2.035712 16252.310 0.9997523
k     0.9719412 0.02166791 0.9378896 1.007410 15276.158 0.9999036
tau   0.9859183 0.02216068 0.9512944 1.021932 15735.140 1.0001540
sigma 1.9636543 0.04382554 1.8950489 2.034130 15855.098 1.0000898</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># extraemos 10000 muestras de la posteriori </span></span>
<span id="cb15-2">post <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract.samples</span>(flbi, <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">10000</span>) </span></code></pre></div>
</div>
<p>Y el efecto directo de x sobre y sería</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">quantile</span>(post<span class="sc" style="color: #5E5E5E;">$</span>bx2, <span class="at" style="color: #657422;">probs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.025</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    2.5%      50%    97.5% 
2.823659 2.962330 3.099855 </code></pre>
</div>
</div>
<p>En este ejemplo sencillo, podríamos estimar el efecto causal de x sobre y simplemente sumando las posterioris</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;">quantile</span>(post<span class="sc" style="color: #5E5E5E;">$</span>bx <span class="sc" style="color: #5E5E5E;">+</span> post<span class="sc" style="color: #5E5E5E;">$</span>bx2, <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.025</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    2.5%      50%    97.5% 
6.928046 7.114180 7.299252 </code></pre>
</div>
</div>
<p>También podríamos obtener el efecto causal total de x sobre y simulando una intervención. En este caso, al ser la variable continua, lo que queremos obtener como de diferente es y cuando <img src="https://latex.codecogs.com/png.latex?X%20=%20x_i"> versus cuando <img src="https://latex.codecogs.com/png.latex?X%20=%20x_i+1">.</p>
<p>Siempre podríamos ajustar otro modelo bayesiano dónde no tuviéramos en cuenta a z y obtendríamos la estimación de ese efecto total de x sobre y, pero siguiendo a Rubin y Gelman, la idea es incluir en nuestro modelo toda la información disponible. Y tal y como dice Richard McElreath , <a href="https://github.com/rmcelreath/stat_rethinking_2022">Statistical Rethinking 2022</a>, el efecto causal se puede estimar simulando la intervención.</p>
<p>Así que el objetivo es dado nuestro modelo que incluye la variable z, simular la intervención cuando <img src="https://latex.codecogs.com/png.latex?X%20=%20x_i"> y cuando <img src="https://latex.codecogs.com/png.latex?X%20=%20x_i+1"> y una estimación del efecto directo es la resta de ambas distribuciones a posteriori de y.</p>
<p>Creamos función para calcular el efecto de la intervención <code>y_do_x</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">get_total_effect <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">x_value =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">incremento =</span> <span class="fl" style="color: #AD0000;">0.5</span>) {</span>
<span id="cb20-2">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(post<span class="sc" style="color: #5E5E5E;">$</span>bx)</span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;">with</span>(post, {</span>
<span id="cb20-4">    <span class="co" style="color: #5E5E5E;"># simulate z, y  for x= x_value</span></span>
<span id="cb20-5">    z_x0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, a1 <span class="sc" style="color: #5E5E5E;">+</span> bx <span class="sc" style="color: #5E5E5E;">*</span> x_value  , sigma)</span>
<span id="cb20-6">    y_x0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, a2  <span class="sc" style="color: #5E5E5E;">+</span> bz <span class="sc" style="color: #5E5E5E;">*</span> z_x0 <span class="sc" style="color: #5E5E5E;">+</span> bx <span class="sc" style="color: #5E5E5E;">*</span> x_value , tau)</span>
<span id="cb20-7">    </span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;"># simulate z,y for x= x_value +1 </span></span>
<span id="cb20-9">    z_x1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, a1 <span class="sc" style="color: #5E5E5E;">+</span> bx <span class="sc" style="color: #5E5E5E;">*</span> (x_value <span class="sc" style="color: #5E5E5E;">+</span> incremento)  , sigma)</span>
<span id="cb20-10">    y_x1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(n, a2  <span class="sc" style="color: #5E5E5E;">+</span> bz <span class="sc" style="color: #5E5E5E;">*</span> z_x1 <span class="sc" style="color: #5E5E5E;">+</span> bx2 <span class="sc" style="color: #5E5E5E;">*</span> (x_value <span class="sc" style="color: #5E5E5E;">+</span> incremento) , tau)</span>
<span id="cb20-11">    </span>
<span id="cb20-12">    </span>
<span id="cb20-13">    <span class="co" style="color: #5E5E5E;"># compute contrast</span></span>
<span id="cb20-14">    y_do_x <span class="ot" style="color: #003B4F;">&lt;-</span> (y_x1 <span class="sc" style="color: #5E5E5E;">-</span> y_x0) <span class="sc" style="color: #5E5E5E;">/</span> incremento</span>
<span id="cb20-15">    <span class="fu" style="color: #4758AB;">return</span>(y_do_x)</span>
<span id="cb20-16">  })</span>
<span id="cb20-17">  </span>
<span id="cb20-18">}</span></code></pre></div>
</div>
<p>Dado un valor de x, podemos calcular el efecto total</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">y_do_x_0_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get_total_effect</span>(<span class="at" style="color: #657422;">x_value =</span> <span class="fl" style="color: #AD0000;">0.2</span>) </span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;">quantile</span>(y_do_x_0_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        0%        25%        50%        75%       100% 
-15.324628   2.395551   6.702379  10.987520  28.909002 </code></pre>
</div>
</div>
<p>Podríamos hacer lo mismo para varios valores de x</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">x_seq <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="at" style="color: #657422;">length =</span> <span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb23-2">y_do_x <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;">mclapply</span>(x_seq,  <span class="cf" style="color: #003B4F;">function</span>(lambda)</span>
<span id="cb23-4">    <span class="fu" style="color: #4758AB;">get_total_effect</span>(<span class="at" style="color: #657422;">x_value =</span> lambda))</span></code></pre></div>
</div>
<p>Y para cada uno de estos 1000 valores tendría 10000 valores de su efecto total de x sobre y.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">length</span>(y_do_x[[<span class="dv" style="color: #AD0000;">500</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">head</span>(y_do_x[[<span class="dv" style="color: #AD0000;">500</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.174794 12.542116 14.663212  6.197720 12.200403 18.384301</code></pre>
</div>
</div>
<p>Calculamos los intervalos de credibilidad del efecto total de x sobre y para cada valor de x.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># lo hacemos simplemente por cuantiles, aunque podríamos calcular el hdi también, </span></span>
<span id="cb28-2"></span>
<span id="cb28-3">intervalos_credibilidad <span class="ot" style="color: #003B4F;">&lt;-</span>  <span class="fu" style="color: #4758AB;">mclapply</span>( y_do_x, <span class="cf" style="color: #003B4F;">function</span>(x) <span class="fu" style="color: #4758AB;">quantile</span>(x, <span class="at" style="color: #657422;">probs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.025</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.975</span>)))</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;"># Media e intervalor de credibilidad para el valor de x_seq en la posición 500 </span></span>
<span id="cb28-6"><span class="fu" style="color: #4758AB;">mean</span>(y_do_x[[<span class="dv" style="color: #AD0000;">500</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7.051617</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">intervalos_credibilidad[[<span class="dv" style="color: #AD0000;">500</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%       50%     97.5% 
-5.337939  7.081199 19.614823 </code></pre>
</div>
</div>
<p><strong>intervalo de predicción clásico con el lm</strong></p>
<p>Habría que calcular la predicción de y para un valor de x y para el de x + 1, podemos calcular los intervalos de predicción clásicos parea cada valor de x, pero no para la diferencia ( al menos con la función predict)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">mt_lm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(y<span class="sc" style="color: #5E5E5E;">~</span>x)</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;">predict</span>(mt_lm, <span class="at" style="color: #657422;">newdata =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x=</span> x_seq[[<span class="dv" style="color: #AD0000;">500</span>]]), <span class="at" style="color: #657422;">interval  =</span> <span class="st" style="color: #20794D;">"prediction"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       fit      lwr     upr
1 5.877439 1.578777 10.1761</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">predict</span>(mt_lm, <span class="at" style="color: #657422;">newdata =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x=</span> x_seq[[<span class="dv" style="color: #AD0000;">500</span>]] <span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">interval  =</span> <span class="st" style="color: #20794D;">"prediction"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       fit      lwr     upr
1 12.98993 8.698051 17.2818</code></pre>
</div>
</div>
<p><strong>Pero como sería obtener el intervalo de credibilidad para la media de los efectos totales?</strong></p>
<p>Calculando para cada valor de x la media de la posteriori del efecto global y juntando todas las medias.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">slopes_mean <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(y_do_x, mean)</span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;">quantile</span>(<span class="fu" style="color: #4758AB;">unlist</span>(slopes_mean), <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.025</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    2.5%      50%    97.5% 
6.038139 7.183291 8.280885 </code></pre>
</div>
</div>
<p>Que tiene mucha menos variabilidad que el efecto global en un valor concreto de x, o si juntamos todas las estimaciones</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;">quantile</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y_do_x),  <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.025</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%       50%     97.5% 
-5.218073  7.169724 19.560175 </code></pre>
</div>
</div>
<p>Evidentemente, podríamos simplemente no haber tenido en cuenta la variable z en nuestro modelo bayesiano.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">flbi_2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ulam</span>(</span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;">alist</span>(</span>
<span id="cb40-3">    <span class="co" style="color: #5E5E5E;"># x model, si quiero estimar la media de x sino, no me hace falta</span></span>
<span id="cb40-4">    x <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>(mux, k),</span>
<span id="cb40-5">    mux <span class="ot" style="color: #003B4F;">&lt;-</span> a1,</span>
<span id="cb40-6">    </span>
<span id="cb40-7">    y <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( nu , tau ),</span>
<span id="cb40-8">    nu <span class="ot" style="color: #003B4F;">&lt;-</span> a2 <span class="sc" style="color: #5E5E5E;">+</span> bx <span class="sc" style="color: #5E5E5E;">*</span> x ,</span>
<span id="cb40-9">    </span>
<span id="cb40-10">    <span class="co" style="color: #5E5E5E;"># priors</span></span>
<span id="cb40-11">    </span>
<span id="cb40-12">    <span class="fu" style="color: #4758AB;">c</span>(a1,a2,bx) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> ),</span>
<span id="cb40-13">    <span class="fu" style="color: #4758AB;">c</span>(tau, k) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">exponential</span>( <span class="dv" style="color: #AD0000;">1</span> )</span>
<span id="cb40-14">  ), <span class="at" style="color: #657422;">data=</span>dat , <span class="at" style="color: #657422;">chains=</span><span class="dv" style="color: #AD0000;">10</span> , <span class="at" style="color: #657422;">cores=</span><span class="dv" style="color: #AD0000;">10</span> , <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">500</span>, <span class="at" style="color: #657422;">iter=</span><span class="dv" style="color: #AD0000;">2000</span> , <span class="at" style="color: #657422;">cmdstan=</span><span class="cn" style="color: #8f5902;">TRUE</span> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 10 parallel chains, with 1 thread(s) per chain...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 1 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 2 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 2 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 2 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 2 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 3 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 3 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 4 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 4 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 5 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 5 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 5 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 5 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 6 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 6 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 6 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 7 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 7 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 7 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 8 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 8 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 8 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 8 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 8 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 9 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 9 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 9 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 10 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 10 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 1 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 2 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 2 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 3 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 3 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 4 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 4 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 5 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 5 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 5 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 6 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 6 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 7 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 7 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 8 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 8 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 8 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 9 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 9 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 10 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 1 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 2 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 2 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 3 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 3 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 3 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 4 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 4 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 5 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 6 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 6 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 7 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 7 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 8 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 8 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 9 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 9 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 10 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 1 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 2 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 3 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 3 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 4 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 5 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 5 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 6 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 6 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 7 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 8 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 8 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 9 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 10 Iteration:  400 / 2000 [ 20%]  (Warmup) 
Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 2 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 3 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 4 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 4 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 5 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 6 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 7 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 8 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 8 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 9 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 9 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 10 Iteration:  500 / 2000 [ 25%]  (Warmup) 
Chain 10 Iteration:  501 / 2000 [ 25%]  (Sampling) 
Chain 10 Iteration:  600 / 2000 [ 30%]  (Sampling) 
Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 2 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 2 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 3 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 3 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 4 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 5 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 6 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 6 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 7 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 8 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 8 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 9 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 10 Iteration:  700 / 2000 [ 35%]  (Sampling) 
Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 2 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 3 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 3 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 5 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 5 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 6 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 7 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 7 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 8 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 8 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 8 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 9 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 10 Iteration:  800 / 2000 [ 40%]  (Sampling) 
Chain 10 Iteration:  900 / 2000 [ 45%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 2 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 3 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 3 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 4 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 5 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 6 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 6 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 7 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 8 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 8 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 9 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 9 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 10 Iteration: 1000 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 2 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 3 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 5 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 6 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 7 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 8 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 9 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 10 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 10 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 3 finished in 1.2 seconds.
Chain 8 finished in 1.0 seconds.
Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 2 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 2 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 5 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 5 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 6 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 6 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 7 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 9 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 9 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 9 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 10 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 10 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 1.4 seconds.
Chain 2 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 5 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 6 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 7 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 9 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 10 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 10 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 5 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 6 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 6 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 7 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 9 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 9 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 10 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 2 finished in 1.5 seconds.
Chain 4 finished in 1.5 seconds.
Chain 5 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 5 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 6 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 7 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 7 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 9 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 10 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 10 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 10 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 5 finished in 1.6 seconds.
Chain 6 finished in 1.5 seconds.
Chain 9 finished in 1.4 seconds.
Chain 10 finished in 1.5 seconds.
Chain 7 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 7 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 7 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 7 finished in 1.7 seconds.

All 10 chains finished successfully.
Mean chain execution time: 1.4 seconds.
Total execution time: 1.9 seconds.</code></pre>
</div>
</div>
<p>Y obtenemos directamente el efecto total de x sobre y.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;">precis</span>(flbi_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         mean         sd      5.5%    94.5%    n_eff     Rhat4
bx  7.1948083 0.06787458 7.0863389 7.302933 10446.14 1.0001211
a2  5.6085615 0.14948341 5.3685467 5.848723 10598.69 1.0001680
a1  1.9860307 0.03058033 1.9368689 2.034631 14116.13 1.0004122
k   0.9721054 0.02159773 0.9382407 1.006761 15044.78 0.9995902
tau 2.1898100 0.04953736 2.1120600 2.269831 14995.33 0.9999084</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">post2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract.samples</span>(flbi_2,  <span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">10000</span>)</span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="fu" style="color: #4758AB;">quantile</span>(post2<span class="sc" style="color: #5E5E5E;">$</span>bx, <span class="at" style="color: #657422;">probs =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.025</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.975</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    2.5%      50%    97.5% 
7.061389 7.194525 7.327361 </code></pre>
</div>
</div>
</section>
<section id="pensamientos-finales" class="level2">
<h2 class="anchored" data-anchor-id="pensamientos-finales">Pensamientos finales</h2>
<ul>
<li><p>Parece que no es tan mala idea incluir en tu modelo bayesiano toda la información disponible.</p></li>
<li><p>Ser pluralista es una buena idea, usando el backdoor criterio dado que nuestro dag sea correcto, nos puede llevar a un modelo más simple y fácil de estimar.</p></li>
<li><p>Como dije en el último <a href="https://muestrear-no-es-pecado.netlify.app/2022/02/09/2022-02-09/">post</a>, estimar todo el dag de forma conjunta puede ser útil en varias situaciones.</p></li>
<li><p>Ya en 2009 se hablaba de esto <a href="https://statmodeling.stat.columbia.edu/2009/07/10/rubinism_separa/">aquí</a></p></li>
</ul>


</section>

 ]]></description>
  <category>bayesian</category>
  <category>estadística</category>
  <category>causal inference</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/12/mediator-full-luxury-bayes/index.html</guid>
  <pubDate>Fri, 11 Feb 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Collider Bias?</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/09/collider-bias/index.html</link>
  <description><![CDATA[ 




<p>Continuando con temas del post anterior. Dice Pearl, con buen criterio, que si condicionas por un collider abres ese camino causal y creas una relación espuria entre las dos variables “Tratamiento” y “Respuesta” y por lo tanto si condicionas por el collider, aparece un sesgo.</p>
<p>Hablando estilo compadre. Si Tratamiento -&gt; Collider y Respuesta -&gt; Collider, si condiciono en el Collider, es decir, calculo la relación entre Tratamiento y Respuesta para cada valor de C, se introduce un sesgo.</p>
<p>Si <img src="https://latex.codecogs.com/png.latex?C%20=%202%5Ccdot%20Tratamiento%20+%203%20%5Ccdot%20respuesta"></p>
<p>Si sé que C = 3, y que Tratamiento = 4 , ya hay relación entre Tratamiento y respuesta aunque sean independientes, porque ambos son causa de C.</p>
<p>Simulemos, que es una buena forma de ver qué pasa si condiciono por el collider, siendo el tratamiento y la respuesta independientes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">155</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3">N <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb1-4">tratamiento <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-5">respuesta <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">4</span>, <span class="fl" style="color: #AD0000;">1.5</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">cor</span>(tratamiento, respuesta)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.05006728</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">collider <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">*</span>tratamiento <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> respuesta, <span class="fl" style="color: #AD0000;">1.5</span>)</span></code></pre></div>
</div>
<p>Si no ajusto por el collider, obtengo que no hay efecto del tratamiento , <strong>correcto</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">lm</span>(respuesta <span class="sc" style="color: #5E5E5E;">~</span> tratamiento))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = respuesta ~ tratamiento)

Residuals:
    Min      1Q  Median      3Q     Max 
-4.7322 -1.0113 -0.0443  0.9587  6.3922 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  3.90287    0.10626  36.730   &lt;2e-16 ***
tratamiento  0.07591    0.04793   1.584    0.114    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.471 on 998 degrees of freedom
Multiple R-squared:  0.002507,  Adjusted R-squared:  0.001507 
F-statistic: 2.508 on 1 and 998 DF,  p-value: 0.1136</code></pre>
</div>
</div>
<p>Condicionando, <strong>aparece el sesgo</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">lm</span>(respuesta <span class="sc" style="color: #5E5E5E;">~</span> tratamiento <span class="sc" style="color: #5E5E5E;">+</span> collider))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = respuesta ~ tratamiento + collider)

Residuals:
     Min       1Q   Median       3Q      Max 
-1.59183 -0.30533  0.00423  0.30028  1.33536 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  0.377392   0.050478   7.476 1.67e-13 ***
tratamiento -0.599046   0.016860 -35.530  &lt; 2e-16 ***
collider     0.300697   0.003196  94.087  &lt; 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4683 on 997 degrees of freedom
Multiple R-squared:  0.899, Adjusted R-squared:  0.8988 
F-statistic:  4439 on 2 and 997 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<p>Retomando el ejemplo del último <a href="https://muestrear-no-es-pecado.netlify.app/2022/02/06/pluralista/">post</a>, pero en vez de tener una variable de confusión no observable, tenemos un collider.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">library</span>(dagitty)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">library</span>(ggdag)</span>
<span id="cb8-4"></span>
<span id="cb8-5">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dagitty</span>(<span class="st" style="color: #20794D;">"dag{ </span></span>
<span id="cb8-6"><span class="st" style="color: #20794D;">  M -&gt; D ;</span></span>
<span id="cb8-7"><span class="st" style="color: #20794D;">  B2 -&gt; D;</span></span>
<span id="cb8-8"><span class="st" style="color: #20794D;">  B1 -&gt; M;</span></span>
<span id="cb8-9"><span class="st" style="color: #20794D;">  M -&gt; C;</span></span>
<span id="cb8-10"><span class="st" style="color: #20794D;">  D -&gt; C</span></span>
<span id="cb8-11"><span class="st" style="color: #20794D;"> }"</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13"></span>
<span id="cb8-14">coords <span class="ot" style="color: #003B4F;">&lt;-</span>  </span>
<span id="cb8-15">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb8-16">  <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">B1 =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">M =</span> <span class="dv" style="color: #AD0000;">2</span>,  <span class="at" style="color: #657422;">C =</span> <span class="fl" style="color: #AD0000;">3.5</span>, <span class="at" style="color: #657422;">D =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">B2 =</span> <span class="dv" style="color: #AD0000;">6</span>),</span>
<span id="cb8-17">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">B1 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">M =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">C =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">D =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">B2 =</span> <span class="dv" style="color: #AD0000;">0</span> ) </span>
<span id="cb8-18">)</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="fu" style="color: #4758AB;">coordinates</span>(g) <span class="ot" style="color: #003B4F;">&lt;-</span> coords</span>
<span id="cb8-21"></span>
<span id="cb8-22"><span class="fu" style="color: #4758AB;">ggdag</span>(g) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb8-23">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-4-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/09/collider-bias/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Usando la función <code>adjustmentSets</code> de <code>dagitty</code> nos dice sobre qué variables hay que condicionar si quiero el efecto causal total y directo de M sobre D, siguiendo las reglas de Pearl, ver por ejemplo (J. Pearl (2009), Causality: Models, Reasoning and Inference. Cambridge University Press.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">adjustmentSets</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"M"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"D"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"total"</span>  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> {}</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">adjustmentSets</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"M"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"D"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"direct"</span>  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> {}</code></pre>
</div>
</div>
<p>Simulo unos datos dónde fuerzo a que no haya efecto causal de M a D.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">155</span>)</span>
<span id="cb13-2">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span> <span class="co" style="color: #5E5E5E;"># número de pares, 1000 madres y 1000 hijas</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"></span>
<span id="cb13-5"> <span class="co" style="color: #5E5E5E;"># Simulamos el collider</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;"># orden de nacimiento y </span></span>
<span id="cb13-8">B1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(N,<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.5</span>)  <span class="co" style="color: #5E5E5E;"># 50% de madres nacieeron en primer lugar</span></span>
<span id="cb13-9">M <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>( N , <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> B1  )</span>
<span id="cb13-10"></span>
<span id="cb13-11">B2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(N,<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="co" style="color: #5E5E5E;"># 50% son las primogénitas</span></span>
<span id="cb13-12">D <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>( N , <span class="dv" style="color: #AD0000;">2</span>  <span class="sc" style="color: #5E5E5E;">*</span> B2  <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">*</span> M )</span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;"># Simulamos el collider</span></span>
<span id="cb13-15">C <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N, <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> M <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">*</span>D, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<p>En grafo sería</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">g_sin_efecto_M_D <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dagitty</span>(<span class="st" style="color: #20794D;">"dag{ </span></span>
<span id="cb14-2"><span class="st" style="color: #20794D;">  B2 -&gt; D;</span></span>
<span id="cb14-3"><span class="st" style="color: #20794D;">  B1 -&gt; M;</span></span>
<span id="cb14-4"><span class="st" style="color: #20794D;">  M -&gt; C;</span></span>
<span id="cb14-5"><span class="st" style="color: #20794D;">  D -&gt; C</span></span>
<span id="cb14-6"><span class="st" style="color: #20794D;"> }"</span>)</span>
<span id="cb14-7"></span>
<span id="cb14-8"></span>
<span id="cb14-9">coords <span class="ot" style="color: #003B4F;">&lt;-</span>  </span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb14-11">  <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">B1 =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">M =</span> <span class="dv" style="color: #AD0000;">2</span>,  <span class="at" style="color: #657422;">C =</span> <span class="fl" style="color: #AD0000;">3.5</span>, <span class="at" style="color: #657422;">D =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">B2 =</span> <span class="dv" style="color: #AD0000;">6</span>),</span>
<span id="cb14-12">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">B1 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">M =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">C =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">D =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">B2 =</span> <span class="dv" style="color: #AD0000;">0</span> ) </span>
<span id="cb14-13">)</span>
<span id="cb14-14"></span>
<span id="cb14-15"><span class="fu" style="color: #4758AB;">coordinates</span>(g_sin_efecto_M_D) <span class="ot" style="color: #003B4F;">&lt;-</span> coords</span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="fu" style="color: #4758AB;">ggdag</span>(g_sin_efecto_M_D) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb14-18">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-7-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/09/collider-bias/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Y vemos lo de antes,</p>
<p>Vemos si hay efecto causal de M sobre D (uso modelos lineales por simplicidad).</p>
<p>El modelo correcto sería sin condicionar por el collider. Y bien, hace lo que debe, no hay efecto de M sobre D, tal y como sabemos que pasa en la realidad</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = D ~ M)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.8810 -1.0553 -0.0175  1.0941  3.8417 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  1.02722    0.05414  18.973   &lt;2e-16 ***
M           -0.02899    0.03207  -0.904    0.366    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.398 on 998 degrees of freedom
Multiple R-squared:  0.0008181, Adjusted R-squared:  -0.0001831 
F-statistic: 0.8171 on 1 and 998 DF,  p-value: 0.3662</code></pre>
</div>
</div>
<p>Condicionando ahora por el collider, tenemos sesgo.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># condicionor por collider</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M <span class="sc" style="color: #5E5E5E;">+</span> C))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = D ~ M + C)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.5621 -0.3135  0.0103  0.3344  1.5110 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)  0.099571   0.021630   4.603 4.69e-06 ***
M           -0.654545   0.013280 -49.290  &lt; 2e-16 ***
C            0.220029   0.002567  85.700  &lt; 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4837 on 997 degrees of freedom
Multiple R-squared:  0.8806,    Adjusted R-squared:  0.8803 
F-statistic:  3676 on 2 and 997 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># condiciono por collider y orden de nacimiento de la hija</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M <span class="sc" style="color: #5E5E5E;">+</span> C <span class="sc" style="color: #5E5E5E;">+</span> B2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = D ~ M + C + B2)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.6166 -0.3133 -0.0101  0.2978  1.3493 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) -0.021313   0.022464  -0.949    0.343    
M           -0.577228   0.013905 -41.513   &lt;2e-16 ***
C            0.194496   0.003176  61.239   &lt;2e-16 ***
B2           0.463625   0.037877  12.240   &lt;2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4512 on 996 degrees of freedom
Multiple R-squared:  0.8962,    Adjusted R-squared:  0.8959 
F-statistic:  2866 on 3 and 996 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># condiciono por collider y orden de nacimiento de la hija y de la madre</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M <span class="sc" style="color: #5E5E5E;">+</span> C <span class="sc" style="color: #5E5E5E;">+</span> B2 <span class="sc" style="color: #5E5E5E;">+</span> B1)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = D ~ M + C + B2 + B1)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.6187 -0.3049 -0.0050  0.3041  1.3514 

Coefficients:
             Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) -0.028298   0.024109  -1.174    0.241    
M           -0.585068   0.017022 -34.371   &lt;2e-16 ***
C            0.194286   0.003187  60.954   &lt;2e-16 ***
B2           0.464258   0.037892  12.252   &lt;2e-16 ***
B1           0.032672   0.040904   0.799    0.425    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.4512 on 995 degrees of freedom
Multiple R-squared:  0.8963,    Adjusted R-squared:  0.8958 
F-statistic:  2149 on 4 and 995 DF,  p-value: &lt; 2.2e-16</code></pre>
</div>
</div>
<p>Queda como curiosidad que si condicionas por B1 en vez de por el collider también hay sesgo, pero si condicionas solo por B2, no hay.</p>
<section id="full-luxury-bayes" class="level2">
<h2 class="anchored" data-anchor-id="full-luxury-bayes">Full luxury bayes</h2>
<p>No todos los DAg’s son tan sencillos como el que he puesto, hay veces en los que una misma variable puede ser a la vez un collider y una variable de confusión, porque puede haber varios path causales y tenga diferente rol. En esos casos, condicionar por el collider te abre un path, y si no condicionas te abre otro. Ante esas situaciones, y suponiendo que el dag es correcto, no se podría estimar el efecto causal.</p>
<p>Sin embargo, condicionar en la red bayesiana no significa lo mismo que condicionar en un sólo modelo, sino que significa que introduzco la información que me proporciona el collider en la distribución conjunta y que me obtenga la posteriori.</p>
<p>Al estimar el DAG completo, usando <a href="https://mc-stan.org/">Stan</a> por ejemplo, se estima tanto el modelo para M, como para D de forma conjunta.</p>
<section id="modelo-bayesiano-sin-condicionar-por-el-collider" class="level3">
<h3 class="anchored" data-anchor-id="modelo-bayesiano-sin-condicionar-por-el-collider">Modelo bayesiano sin condicionar por el collider</h3>
<p>Formulamos el modelo usando la librería <code>rethinking</code> y lo ajustamos usando la función <code>ulam</code> que por debajo llama a Stan</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;">library</span>(cmdstanr)</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;">library</span>(rethinking)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;">set_cmdstan_path</span>(<span class="st" style="color: #20794D;">"~/Descargas/cmdstan/"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb24-2">  <span class="at" style="color: #657422;">N =</span> N,</span>
<span id="cb24-3">  <span class="at" style="color: #657422;">M =</span> M,</span>
<span id="cb24-4">  <span class="at" style="color: #657422;">D =</span> D,</span>
<span id="cb24-5">  <span class="at" style="color: #657422;">B1 =</span> B1,</span>
<span id="cb24-6">  <span class="at" style="color: #657422;">B2 =</span> B2, </span>
<span id="cb24-7">  <span class="at" style="color: #657422;">C =</span> C</span>
<span id="cb24-8">)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">155</span>)</span>
<span id="cb24-11"></span>
<span id="cb24-12">flbi <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ulam</span>(</span>
<span id="cb24-13">  <span class="fu" style="color: #4758AB;">alist</span>(</span>
<span id="cb24-14">    <span class="co" style="color: #5E5E5E;"># mom model</span></span>
<span id="cb24-15">    M <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( mu , sigma ),</span>
<span id="cb24-16">    mu <span class="ot" style="color: #003B4F;">&lt;-</span> a1 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span>B1 ,</span>
<span id="cb24-17">    <span class="co" style="color: #5E5E5E;"># daughter model</span></span>
<span id="cb24-18">    D <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( nu , tau ),</span>
<span id="cb24-19">    nu <span class="ot" style="color: #003B4F;">&lt;-</span> a2 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span>B2 <span class="sc" style="color: #5E5E5E;">+</span> m<span class="sc" style="color: #5E5E5E;">*</span>M ,</span>
<span id="cb24-20">    <span class="co" style="color: #5E5E5E;"># B1 and B2</span></span>
<span id="cb24-21">    B1 <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">bernoulli</span>(p),</span>
<span id="cb24-22">    B2 <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">bernoulli</span>(p),</span>
<span id="cb24-23"></span>
<span id="cb24-24">    <span class="co" style="color: #5E5E5E;"># priors</span></span>
<span id="cb24-25">    <span class="fu" style="color: #4758AB;">c</span>(a1,a2,b,m) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> ),</span>
<span id="cb24-26">    <span class="fu" style="color: #4758AB;">c</span>(k,sigma,tau) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">exponential</span>( <span class="dv" style="color: #AD0000;">1</span> ),</span>
<span id="cb24-27">    p <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">beta</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-28">  ), <span class="at" style="color: #657422;">data=</span>dat , <span class="at" style="color: #657422;">chains=</span><span class="dv" style="color: #AD0000;">4</span> , <span class="at" style="color: #657422;">cores=</span><span class="dv" style="color: #AD0000;">4</span> , <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">500</span>, <span class="at" style="color: #657422;">iter=</span><span class="dv" style="color: #AD0000;">2500</span> , <span class="at" style="color: #657422;">cmdstan=</span><span class="cn" style="color: #8f5902;">TRUE</span> )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in '/tmp/Rtmpsdysi4/model-8eef3881083c.stan', line 6, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/Rtmpsdysi4/model-8eef3881083c.stan', line 7, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 parallel chains, with 1 thread(s) per chain...

Chain 1 Iteration:    1 / 2500 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2500 [  0%]  (Warmup) </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 2 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 2 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/tmp/Rtmpsdysi4/model-8eef3881083c.stan', line 39, column 4 to column 29)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 2 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 2 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 2 </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Chain 3 Iteration:    1 / 2500 [  0%]  (Warmup) </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 3 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 3 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/tmp/Rtmpsdysi4/model-8eef3881083c.stan', line 39, column 4 to column 29)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 3 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 3 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 3 </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Chain 4 Iteration:    1 / 2500 [  0%]  (Warmup) </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 4 Informational Message: The current Metropolis proposal is about to be rejected because of the following issue:</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 4 Exception: normal_lpdf: Scale parameter is 0, but must be positive! (in '/tmp/Rtmpsdysi4/model-8eef3881083c.stan', line 35, column 4 to column 27)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 4 If this warning occurs sporadically, such as for highly constrained variable types like covariance matrices, then the sampler is fine,</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 4 but if this warning occurs often then your model may be either severely ill-conditioned or misspecified.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Chain 4 </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Chain 1 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 2 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 4 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 1 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 2 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 3 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 4 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 1 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 3 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 4 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 1 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 2 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 3 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 4 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 1 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 1 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 2 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 3 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 4 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 4 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 4 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 1 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 2 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 2 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 3 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 3 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 3 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 4 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 1 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 1 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 2 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 3 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 4 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 1 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 2 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 2 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 3 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 4 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 1 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 2 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 3 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 4 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 1 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 1 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 2 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 3 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 3 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 4 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 1 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 2 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 3 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 4 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 1 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 1 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 2 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 3 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 4 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 1 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 2 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 3 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 3 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 4 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 1 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 2 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 3 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 4 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 1 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 2 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 3 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 4 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 1 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 1 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 2 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 3 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 4 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 4 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 1 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 2 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 3 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 3 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 4 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 1 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 1 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 2 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 3 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 4 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 1 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 2 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 2 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 3 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 4 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 1 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 2 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 3 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 3 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 4 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 1 finished in 2.2 seconds.
Chain 2 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 3 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 4 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 3 finished in 2.3 seconds.
Chain 2 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 4 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 4 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 4 finished in 2.4 seconds.
Chain 2 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 2 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 2 finished in 2.5 seconds.

All 4 chains finished successfully.
Mean chain execution time: 2.4 seconds.
Total execution time: 2.6 seconds.</code></pre>
</div>
</div>
<p>Vemos los parámetros estimados y sus intervalos de credibilidad y extraemos la posteriori</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;">precis</span>(flbi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              mean         sd         5.5%      94.5%    n_eff     Rhat4
m     -0.008692293 0.02258036 -0.044472871 0.02734239 6673.459 1.0005257
b      1.961391786 0.04356684  1.891207250 2.03241110 5380.781 0.9998034
a2     0.059745778 0.04370034 -0.009909845 0.12931849 5500.657 1.0000543
a1     0.026656585 0.03702030 -0.032118024 0.08601562 6410.710 0.9997482
tau    0.984889552 0.02213892  0.949803835 1.02046055 7752.122 1.0000469
sigma  0.967785086 0.02155725  0.933665955 1.00275110 8907.866 1.0001535
k      0.998568923 1.01036660  0.056543283 2.88207040 9005.060 1.0000657
p      0.482860133 0.01114257  0.465039000 0.50049459 8082.865 1.0000378</code></pre>
</div>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">post <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract.samples</span>(flbi)</span></code></pre></div>
</div>
<p>Pintamos la distribución a posteriori del efecto y cómo ya sabíamos, al no condicionar por el collider, se estima sin sesgo que no hay efecto causal de M a D.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;">plot</span>(bayestestR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hdi</span>(post<span class="sc" style="color: #5E5E5E;">$</span>m, <span class="at" style="color: #657422;">ci =</span> <span class="fu" style="color: #4758AB;">c</span>( <span class="fl" style="color: #AD0000;">0.80</span>, <span class="fl" style="color: #AD0000;">0.95</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Estimación sin collider"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-15-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/09/collider-bias/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="modelo-condicionando-por-el-collider" class="level3">
<h3 class="anchored" data-anchor-id="modelo-condicionando-por-el-collider">Modelo condicionando por el collider</h3>
<p>Ya sabemos que no es necesario de hecho condicionar por el collider, más aún, que hacerlo induce un sesgo en la estimación del efecto, ¿pero qué pasa si estimamos el dag al completo?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">155</span>)</span>
<span id="cb49-2"></span>
<span id="cb49-3">flbi_collider <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ulam</span>(</span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;">alist</span>(</span>
<span id="cb49-5">    <span class="co" style="color: #5E5E5E;"># mom model</span></span>
<span id="cb49-6">    M <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( mu , sigma ),</span>
<span id="cb49-7">    mu <span class="ot" style="color: #003B4F;">&lt;-</span> a1 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span>B1 ,</span>
<span id="cb49-8">    <span class="co" style="color: #5E5E5E;"># daughter model</span></span>
<span id="cb49-9">    D <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( nu , tau ),</span>
<span id="cb49-10">    nu <span class="ot" style="color: #003B4F;">&lt;-</span> a2 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span>B2 <span class="sc" style="color: #5E5E5E;">+</span> m<span class="sc" style="color: #5E5E5E;">*</span>M ,</span>
<span id="cb49-11">    <span class="co" style="color: #5E5E5E;"># B1 and B2</span></span>
<span id="cb49-12">    B1 <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">bernoulli</span>(p),</span>
<span id="cb49-13">    B2 <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">bernoulli</span>(p),</span>
<span id="cb49-14">    </span>
<span id="cb49-15">    <span class="co" style="color: #5E5E5E;"># Collider</span></span>
<span id="cb49-16">    </span>
<span id="cb49-17">     C <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( cmu , csigma ),</span>
<span id="cb49-18">     cmu <span class="ot" style="color: #003B4F;">&lt;-</span> a3 <span class="sc" style="color: #5E5E5E;">+</span> cm <span class="sc" style="color: #5E5E5E;">*</span> M  <span class="sc" style="color: #5E5E5E;">+</span> cd <span class="sc" style="color: #5E5E5E;">*</span> D,</span>
<span id="cb49-19"></span>
<span id="cb49-20">    <span class="co" style="color: #5E5E5E;"># priors</span></span>
<span id="cb49-21">    <span class="fu" style="color: #4758AB;">c</span>(a1,a2,a3,b,m, cm, cd) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> ),</span>
<span id="cb49-22">    <span class="fu" style="color: #4758AB;">c</span>(sigma,tau, csigma) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">exponential</span>( <span class="dv" style="color: #AD0000;">1</span> ),</span>
<span id="cb49-23">    p <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">beta</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb49-24">  ), <span class="at" style="color: #657422;">data=</span>dat , <span class="at" style="color: #657422;">chains=</span><span class="dv" style="color: #AD0000;">4</span> , <span class="at" style="color: #657422;">cores=</span><span class="dv" style="color: #AD0000;">4</span> , <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">500</span>, <span class="at" style="color: #657422;">iter=</span><span class="dv" style="color: #AD0000;">2500</span> , <span class="at" style="color: #657422;">cmdstan=</span><span class="cn" style="color: #8f5902;">TRUE</span> )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in '/tmp/Rtmpsdysi4/model-8eef4e4ce260.stan', line 3, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc
Warning in '/tmp/Rtmpsdysi4/model-8eef4e4ce260.stan', line 4, column 4: Declaration
    of arrays by placing brackets after a variable name is deprecated and
    will be removed in Stan 2.32.0. Instead use the array keyword before the
    type. This can be changed automatically using the auto-format flag to
    stanc</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Running MCMC with 4 parallel chains, with 1 thread(s) per chain...

Chain 1 Iteration:    1 / 2500 [  0%]  (Warmup) 
Chain 2 Iteration:    1 / 2500 [  0%]  (Warmup) 
Chain 3 Iteration:    1 / 2500 [  0%]  (Warmup) 
Chain 4 Iteration:    1 / 2500 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 2 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 3 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 4 Iteration:  100 / 2500 [  4%]  (Warmup) 
Chain 1 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 2 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 3 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 4 Iteration:  200 / 2500 [  8%]  (Warmup) 
Chain 1 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 2 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 3 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 4 Iteration:  300 / 2500 [ 12%]  (Warmup) 
Chain 1 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 2 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 3 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 4 Iteration:  400 / 2500 [ 16%]  (Warmup) 
Chain 3 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 3 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 1 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 1 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 2 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 2 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 4 Iteration:  500 / 2500 [ 20%]  (Warmup) 
Chain 4 Iteration:  501 / 2500 [ 20%]  (Sampling) 
Chain 3 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 4 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 1 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 2 Iteration:  600 / 2500 [ 24%]  (Sampling) 
Chain 1 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 3 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 4 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 2 Iteration:  700 / 2500 [ 28%]  (Sampling) 
Chain 1 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 2 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 3 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 4 Iteration:  800 / 2500 [ 32%]  (Sampling) 
Chain 1 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 2 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 3 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 4 Iteration:  900 / 2500 [ 36%]  (Sampling) 
Chain 1 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 3 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 4 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 2 Iteration: 1000 / 2500 [ 40%]  (Sampling) 
Chain 1 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 3 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 4 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 2 Iteration: 1100 / 2500 [ 44%]  (Sampling) 
Chain 1 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 2 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 3 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 4 Iteration: 1200 / 2500 [ 48%]  (Sampling) 
Chain 4 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 1 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 2 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 3 Iteration: 1300 / 2500 [ 52%]  (Sampling) 
Chain 1 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 3 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 4 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 2 Iteration: 1400 / 2500 [ 56%]  (Sampling) 
Chain 1 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 2 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 3 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 4 Iteration: 1500 / 2500 [ 60%]  (Sampling) 
Chain 4 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 1 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 2 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 3 Iteration: 1600 / 2500 [ 64%]  (Sampling) 
Chain 1 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 4 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 2 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 3 Iteration: 1700 / 2500 [ 68%]  (Sampling) 
Chain 1 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 3 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 4 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 2 Iteration: 1800 / 2500 [ 72%]  (Sampling) 
Chain 4 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 1 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 2 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 3 Iteration: 1900 / 2500 [ 76%]  (Sampling) 
Chain 4 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 1 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 2 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 3 Iteration: 2000 / 2500 [ 80%]  (Sampling) 
Chain 4 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 1 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 2 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 3 Iteration: 2100 / 2500 [ 84%]  (Sampling) 
Chain 4 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 1 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 3 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 2 Iteration: 2200 / 2500 [ 88%]  (Sampling) 
Chain 4 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 1 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 2 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 3 Iteration: 2300 / 2500 [ 92%]  (Sampling) 
Chain 4 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 1 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 2 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 3 Iteration: 2400 / 2500 [ 96%]  (Sampling) 
Chain 4 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 4 finished in 4.4 seconds.
Chain 1 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 1 finished in 4.5 seconds.
Chain 2 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 3 Iteration: 2500 / 2500 [100%]  (Sampling) 
Chain 2 finished in 4.5 seconds.
Chain 3 finished in 4.5 seconds.

All 4 chains finished successfully.
Mean chain execution time: 4.5 seconds.
Total execution time: 4.6 seconds.</code></pre>
</div>
</div>
<p>Viendo la distribución posterior de los parámetros resulta que hemos podido estimar el verdadero efecto causal de M sobre D (que sabemos que es 0), incluso aunque hayamos “condicionado” por el collider.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;">precis</span>(flbi_collider)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               mean         sd        5.5%      94.5%     n_eff     Rhat4
cd      3.968243739 0.04611450  3.89560945 4.04327110  8248.105 1.0004150
cm      2.934145831 0.04687289  2.85989505 3.00919165  8890.321 1.0001715
m      -0.009309562 0.02249104 -0.04553421 0.02674973  8503.878 1.0000069
b       1.962677924 0.04345328  1.89429945 2.03282660  7107.343 0.9999206
a3      0.160077627 0.09126337  0.01252729 0.30475624  7756.140 1.0006626
a2      0.060140941 0.04359355 -0.01003761 0.13036986  7499.209 0.9996584
a1      0.025057624 0.03711509 -0.03519740 0.08448685  7396.713 1.0005212
csigma  2.064163930 0.04708394  1.99060945 2.14121220 10185.107 1.0002583
tau     0.984744502 0.02189981  0.95050602 1.01991110  8571.627 0.9998603
sigma   0.968314337 0.02180198  0.93405345 1.00380110  9457.782 1.0001085
p       0.482931190 0.01117531  0.46538884 0.50083727 10342.731 0.9998451</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">post_with_collider <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract.samples</span>(flbi_collider)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;">quantile</span>(post_with_collider<span class="sc" style="color: #5E5E5E;">$</span>m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          0%          25%          50%          75%         100% 
-0.095140500 -0.024429525 -0.009353655  0.005972277  0.072001900 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;">plot</span>(bayestestR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hdi</span>(post_with_collider<span class="sc" style="color: #5E5E5E;">$</span>m, <span class="at" style="color: #657422;">ci =</span> <span class="fu" style="color: #4758AB;">c</span>( <span class="fl" style="color: #AD0000;">0.80</span>, <span class="fl" style="color: #AD0000;">0.95</span>))) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb57-2">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Estimación con collider"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-18-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/09/collider-bias/index_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid figure-img" width="672"></a></p>
</figure>
</div>
</div>
</div>
<p>Así, que siendo “pluralista”, estimar el dag completo nos puede ayudar en situaciones dónde el backdoor criterio nos diga que no se puede estimar el efecto causal.</p>


</section>
</section>

 ]]></description>
  <category>bayesian</category>
  <category>R</category>
  <category>causal inference</category>
  <category>estadística</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/09/collider-bias/index.html</guid>
  <pubDate>Tue, 08 Feb 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Pluralista</title>
  <dc:creator>jlcr</dc:creator>
  <link>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/06/pluralista/index.html</link>
  <description><![CDATA[ 




<p>Ando viendo los vídeos de Richard McElreath , <a href="https://github.com/rmcelreath/stat_rethinking_2022">Statistical Rethinking 2022</a> y ciertamente me están gustando mucho. En la segunda edición de su libro hace hincapié en temas de inferencia causal. Cuenta bastante bien todo el tema de los “confounders”, “forks”, “colliders” y demás. Además lo hace simulando datos, por lo que entiende todo de forma muy sencilla. Un par de conceptos que me han llamado la atención son por ejemplo cuando dice que condicionar por una variable no significa lo mismo en un modelo de regresión al uso que en uno bayesiano, en el segundo caso significa incluir esa variable en la distribución conjunta. Esto permite por ejemplo que bajo el marco de un modelo bayesiano se pueda condicionar incluso por un “collider” cosa que los entendidos de la inferencia causal prohíben expresamente pues eso abre un camino no causal en el DAG definido.</p>
<p>Según la <a href="https://dle.rae.es/pluralismo">RAE</a> , pluralismo significa</p>
<blockquote class="blockquote">
<p>pluralismo 1. m. Sistema por el cual se acepta o reconoce la pluralidad de doctrinas o posiciones.</p>
</blockquote>
<p>y en los videos se toma dicha postura, por ejemplo, se especifica el modelo teórico utilizando los diagramas causales y el Back door criterio para ver sobre qué variables hay que condicionar o no , para ver el efecto total de X sobre Y o para estimar el efecto directo.</p>
<p>Hay un ejemplo muy bueno en este <a href="https://elevanth.org/blog/2021/06/29/regression-fire-and-dangerous-things-3-3/">post de Richard</a>.</p>
<p><strong>Nota</strong>: Este post es simplemente para entender un poco el post de Richard, el mérito es totalmente de él.</p>
<p>Básicamente es una situación dónde se quiere estimar el efecto que tiene sobre el número de hijos que tiene una mujer, el número de hijos que tuvo su madre. En el diagrama causal también se indica la influencia que tiene el orden de nacimiento de de la madre y de la hija.</p>
<p>Diagrama causal:</p>
<ul>
<li>M: Número de hijos de la madre</li>
<li>D: Número de hijos de la hija</li>
<li>B1: Orden de nacimiento de la madre</li>
<li>B2: Orden de nacimiento de la hija</li>
<li>U: Variable no medida en los datos, que pudiera ser cosas como influencia del entorno social y económico dónde viven madre e hija, que influye en las decisión del número de hijos de ambas.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dagitty)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(ggdag)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(patchwork)</span>
<span id="cb1-5"></span>
<span id="cb1-6">g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dagitty</span>(<span class="st" style="color: #20794D;">"dag{ </span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;">  M -&gt; D ;</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;">  B2 -&gt; D;</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;">  B1 -&gt; M;</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;">  U -&gt; M;</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;">  U -&gt; D</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;"> }"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15">coords <span class="ot" style="color: #003B4F;">&lt;-</span>  </span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb1-17">  <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">B1 =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">M =</span> <span class="dv" style="color: #AD0000;">2</span>,  <span class="at" style="color: #657422;">U =</span> <span class="fl" style="color: #AD0000;">3.5</span>, <span class="at" style="color: #657422;">D =</span> <span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">B2 =</span> <span class="dv" style="color: #AD0000;">6</span>),</span>
<span id="cb1-18">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="at" style="color: #657422;">B1 =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">M =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">U =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">D =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">B2 =</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-19">)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="fu" style="color: #4758AB;">coordinates</span>(g) <span class="ot" style="color: #003B4F;">&lt;-</span> coords</span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="fu" style="color: #4758AB;">ggdag</span>(g) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-1-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/06/pluralista/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>Si queremos estimar el efecto global o el directo de M sobre D, habría que condicionar por U (siguiendo el backdoor criterio), y al ser no observable, no se puede estimar.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">adjustmentSets</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"M"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"D"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"total"</span>  )</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">#&gt; { U }</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">adjustmentSets</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"M"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"D"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"direct"</span>  )</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">#&gt; { U }</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">ggdag_adjustment_set</span>(g, <span class="at" style="color: #657422;">exposure =</span> <span class="st" style="color: #20794D;">"M"</span>, <span class="at" style="color: #657422;">outcome =</span> <span class="st" style="color: #20794D;">"D"</span>, <span class="at" style="color: #657422;">effect =</span> <span class="st" style="color: #20794D;">"direct"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-3-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/06/pluralista/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
</figure>
</div>
</div>
</div>
<p>¿Cómo podemos “estimar” el efecto de M sobre D dado que no podemos condicionar (en el sentido clásico) sobre U? .</p>
<p>Richard propone lo que el llama “full luxury bayesian” que consiste en estimar a la vez todo el DAG y luego generar simulaciones usando la distribución conjunta obtenida para medir el efecto de la “intervención” y poder obtener el efecto causal.</p>
<p>Nótese que cuando en el DAG las relaciones se pueden expresar como modelos lineales, se puede estimar todo el DAG usando técnicas como los modelos de ecuaciones estructurales o el path analysis.</p>
<section id="simulación" class="level2">
<h2 class="anchored" data-anchor-id="simulación">Simulación</h2>
<p>Simulamos unos datos de forma qué vamos a conocer la “verdad” de la relaciones entre variables, que para eso simulamos.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1908</span>)</span>
<span id="cb4-3">N <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span> <span class="co" style="color: #5E5E5E;"># número de pares, 1000 madres y 1000 hijas</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6">U <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(N,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># Simulamos el confounder</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;"># orden de nacimiento y </span></span>
<span id="cb4-9">B1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(N,<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.5</span>)  <span class="co" style="color: #5E5E5E;"># 50% de madres nacieeron en primer lugar</span></span>
<span id="cb4-10">M <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>( N , <span class="dv" style="color: #AD0000;">2</span> <span class="sc" style="color: #5E5E5E;">*</span> B1 <span class="sc" style="color: #5E5E5E;">+</span> U )</span>
<span id="cb4-11"></span>
<span id="cb4-12">B2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rbinom</span>(N,<span class="at" style="color: #657422;">size=</span><span class="dv" style="color: #AD0000;">1</span>,<span class="at" style="color: #657422;">prob=</span><span class="fl" style="color: #AD0000;">0.5</span>) <span class="co" style="color: #5E5E5E;"># 50% son las primogénitas</span></span>
<span id="cb4-13">D <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>( N , <span class="dv" style="color: #AD0000;">2</span>  <span class="sc" style="color: #5E5E5E;">*</span>B2 <span class="sc" style="color: #5E5E5E;">+</span> U <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">*</span> M )</span></code></pre></div>
</div>
<p>En esta simulación se ha forzado que el efecto del número de hijos de la madre sobre el núemro de hijos de la hija sea nulo. Por tanto sabemos que el efecto de M sobre D es 0..</p>
<p>Si hacemos un modelo sin condicionar, tenemos sesgo</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M)</span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">#&gt; Call:</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">#&gt; lm(formula = D ~ M)</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">#&gt; Coefficients:</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">#&gt; (Intercept)            M  </span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">#&gt;      0.7108       0.2930</span></span></code></pre></div>
</div>
<p>Condicionando por B1 también, de hecho tenemos la situación de amplificación del sesgo</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M <span class="sc" style="color: #5E5E5E;">+</span> B1)</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">#&gt; Call:</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">#&gt; lm(formula = D ~ M + B1)</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">#&gt; Coefficients:</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">#&gt; (Intercept)            M           B1  </span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">#&gt;      1.0356       0.4606      -1.0441</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M <span class="sc" style="color: #5E5E5E;">+</span> B1 <span class="sc" style="color: #5E5E5E;">+</span>B2 )</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#&gt; Call:</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#&gt; lm(formula = D ~ M + B1 + B2)</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;">#&gt; Coefficients:</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">#&gt; (Intercept)            M           B1           B2  </span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;">#&gt;    -0.01621      0.46913     -0.91307      2.01487</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">lm</span>(D <span class="sc" style="color: #5E5E5E;">~</span> M <span class="sc" style="color: #5E5E5E;">+</span> B2)</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">#&gt; Call:</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">#&gt; lm(formula = D ~ M + B2)</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;">#&gt; Coefficients:</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;">#&gt; (Intercept)            M           B2  </span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;">#&gt;     -0.3204       0.3231       2.0550</span></span></code></pre></div>
</div>
<p>En esta situación, no podemos estimar el efecto de M sobre D utilizando un solo modelo.</p>
<p>Una forma de estimar el efecto de M sobre D es tirar de path analysis, que en este caso se puede al ser las relaciones lineales.</p>
<p>Sea:</p>
<ul>
<li>b: Efecto de B1 sobre M</li>
<li>m: Efecto de M sobre D</li>
</ul>
<p>Se tiene que</p>
<p><img src="https://latex.codecogs.com/png.latex?Cov(B1,%20D%20)%20=%20b%5Ccdot%20m%20%5Ccdot%20Var(B1)"> Y como</p>
<p><img src="https://latex.codecogs.com/png.latex?b%20=%20%5Cdfrac%7BCov(B1,M)%7D%7BVar(B1)%7D%20"></p>
<p>Podemos estimar <img src="https://latex.codecogs.com/png.latex?m"> como</p>
<p><img src="https://latex.codecogs.com/png.latex?m%20=%20%5Cdfrac%7BCov(B1,D)%7D%7Bb%20%5Ccdot%20Var(B1)%7D%20=%20%5Cdfrac%7BCov(B1,D)%7D%7BCov(B1,M)%7D%20"> Y</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">(<span class="at" style="color: #657422;">m_hat =</span> <span class="fu" style="color: #4758AB;">cov</span>(B1,D) <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">cov</span>(B1,M))</span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">#&gt; [1] -0.0563039</span></span></code></pre></div>
</div>
<p>y esta estimación está menos sesgada, antes era del orden de 0.1 o 0.2 y ahora la estimación es del orden 0.01. Pero con esta estimación no tenemos información de su distribución sino sólo de esta estimación puntual. Y si las relaciones no fueran lineales no podría usarse, en cambio la siguiente aproximación si funciona</p>
</section>
<section id="full-luxury-bayes" class="level2">
<h2 class="anchored" data-anchor-id="full-luxury-bayes">Full luxury bayes</h2>
<p>Utilizamos la librería de Richard <code>rethinking</code> y también <code>cmdstanr</code> para expresar el modelo causal completo y ajustarlo con Stan.</p>
<p>Ahora estimamos el DAG completo, aquí es dónde es diferente de la aproximación causal de Pearl, de esta forma podemos “condicionar” incluso por los colliders, porque condicionar en este marco significa meter esa información dentro de la distribución conjunta.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">library</span>(cmdstanr)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">library</span>(rethinking)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">set_cmdstan_path</span>(<span class="st" style="color: #20794D;">"~/Descargas/cmdstan/"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;"># No metemos U al ser no observable</span></span>
<span id="cb10-6">dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-7">  <span class="at" style="color: #657422;">N =</span> N,</span>
<span id="cb10-8">  <span class="at" style="color: #657422;">M =</span> M,</span>
<span id="cb10-9">  <span class="at" style="color: #657422;">D =</span> D,</span>
<span id="cb10-10">  <span class="at" style="color: #657422;">B1 =</span> B1,</span>
<span id="cb10-11">  <span class="at" style="color: #657422;">B2 =</span> B2</span>
<span id="cb10-12">)</span>
<span id="cb10-13"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1908</span>)</span>
<span id="cb10-14"></span>
<span id="cb10-15">flbi <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ulam</span>(</span>
<span id="cb10-16">  <span class="fu" style="color: #4758AB;">alist</span>(</span>
<span id="cb10-17">    <span class="co" style="color: #5E5E5E;"># mom model</span></span>
<span id="cb10-18">    M <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( mu , sigma ),</span>
<span id="cb10-19">    mu <span class="ot" style="color: #003B4F;">&lt;-</span> a1 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span>B1 <span class="sc" style="color: #5E5E5E;">+</span> k<span class="sc" style="color: #5E5E5E;">*</span>U[i],</span>
<span id="cb10-20">    <span class="co" style="color: #5E5E5E;"># daughter model</span></span>
<span id="cb10-21">    D <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( nu , tau ),</span>
<span id="cb10-22">    nu <span class="ot" style="color: #003B4F;">&lt;-</span> a2 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span>B2 <span class="sc" style="color: #5E5E5E;">+</span> m<span class="sc" style="color: #5E5E5E;">*</span>M <span class="sc" style="color: #5E5E5E;">+</span> k<span class="sc" style="color: #5E5E5E;">*</span>U[i],</span>
<span id="cb10-23">    <span class="co" style="color: #5E5E5E;"># B1 and B2</span></span>
<span id="cb10-24">    B1 <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">bernoulli</span>(p),</span>
<span id="cb10-25">    B2 <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">bernoulli</span>(p),</span>
<span id="cb10-26">    <span class="co" style="color: #5E5E5E;"># unmeasured confound</span></span>
<span id="cb10-27">    vector[N]<span class="sc" style="color: #5E5E5E;">:</span>U <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;"># priors</span></span>
<span id="cb10-29">    <span class="fu" style="color: #4758AB;">c</span>(a1,a2,b,m) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">normal</span>( <span class="dv" style="color: #AD0000;">0</span> , <span class="fl" style="color: #AD0000;">0.5</span> ),</span>
<span id="cb10-30">    <span class="fu" style="color: #4758AB;">c</span>(k,sigma,tau) <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">exponential</span>( <span class="dv" style="color: #AD0000;">1</span> ),</span>
<span id="cb10-31">    p <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">beta</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb10-32">  ), <span class="at" style="color: #657422;">data=</span>dat , <span class="at" style="color: #657422;">chains=</span><span class="dv" style="color: #AD0000;">4</span> , <span class="at" style="color: #657422;">cores=</span><span class="dv" style="color: #AD0000;">4</span> , <span class="at" style="color: #657422;">warmup =</span> <span class="dv" style="color: #AD0000;">500</span>, <span class="at" style="color: #657422;">iter=</span><span class="dv" style="color: #AD0000;">2500</span> , <span class="at" style="color: #657422;">cmdstan=</span><span class="cn" style="color: #8f5902;">TRUE</span> )</span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;">#&gt; Running MCMC with 4 parallel chains, with 1 thread(s) per chain...</span></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb10-35"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:    1 / 2500 [  0%]  (Warmup) </span></span>
<span id="cb10-36"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:    1 / 2500 [  0%]  (Warmup) </span></span>
<span id="cb10-37"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:    1 / 2500 [  0%]  (Warmup) </span></span>
<span id="cb10-38"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:    1 / 2500 [  0%]  (Warmup) </span></span>
<span id="cb10-39"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  100 / 2500 [  4%]  (Warmup) </span></span>
<span id="cb10-40"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  100 / 2500 [  4%]  (Warmup) </span></span>
<span id="cb10-41"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  200 / 2500 [  8%]  (Warmup) </span></span>
<span id="cb10-42"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  100 / 2500 [  4%]  (Warmup) </span></span>
<span id="cb10-43"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  100 / 2500 [  4%]  (Warmup) </span></span>
<span id="cb10-44"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  200 / 2500 [  8%]  (Warmup) </span></span>
<span id="cb10-45"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  200 / 2500 [  8%]  (Warmup) </span></span>
<span id="cb10-46"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  300 / 2500 [ 12%]  (Warmup) </span></span>
<span id="cb10-47"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  400 / 2500 [ 16%]  (Warmup) </span></span>
<span id="cb10-48"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  300 / 2500 [ 12%]  (Warmup) </span></span>
<span id="cb10-49"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  200 / 2500 [  8%]  (Warmup) </span></span>
<span id="cb10-50"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  300 / 2500 [ 12%]  (Warmup) </span></span>
<span id="cb10-51"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  400 / 2500 [ 16%]  (Warmup) </span></span>
<span id="cb10-52"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  400 / 2500 [ 16%]  (Warmup) </span></span>
<span id="cb10-53"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  500 / 2500 [ 20%]  (Warmup) </span></span>
<span id="cb10-54"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  300 / 2500 [ 12%]  (Warmup) </span></span>
<span id="cb10-55"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  501 / 2500 [ 20%]  (Sampling) </span></span>
<span id="cb10-56"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  500 / 2500 [ 20%]  (Warmup) </span></span>
<span id="cb10-57"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  501 / 2500 [ 20%]  (Sampling) </span></span>
<span id="cb10-58"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  600 / 2500 [ 24%]  (Sampling) </span></span>
<span id="cb10-59"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  500 / 2500 [ 20%]  (Warmup) </span></span>
<span id="cb10-60"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  501 / 2500 [ 20%]  (Sampling) </span></span>
<span id="cb10-61"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  400 / 2500 [ 16%]  (Warmup) </span></span>
<span id="cb10-62"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  600 / 2500 [ 24%]  (Sampling) </span></span>
<span id="cb10-63"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  700 / 2500 [ 28%]  (Sampling) </span></span>
<span id="cb10-64"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  600 / 2500 [ 24%]  (Sampling) </span></span>
<span id="cb10-65"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  500 / 2500 [ 20%]  (Warmup) </span></span>
<span id="cb10-66"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  501 / 2500 [ 20%]  (Sampling) </span></span>
<span id="cb10-67"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  700 / 2500 [ 28%]  (Sampling) </span></span>
<span id="cb10-68"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  800 / 2500 [ 32%]  (Sampling) </span></span>
<span id="cb10-69"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  700 / 2500 [ 28%]  (Sampling) </span></span>
<span id="cb10-70"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  600 / 2500 [ 24%]  (Sampling) </span></span>
<span id="cb10-71"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  800 / 2500 [ 32%]  (Sampling) </span></span>
<span id="cb10-72"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration:  900 / 2500 [ 36%]  (Sampling) </span></span>
<span id="cb10-73"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  800 / 2500 [ 32%]  (Sampling) </span></span>
<span id="cb10-74"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  700 / 2500 [ 28%]  (Sampling) </span></span>
<span id="cb10-75"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration:  900 / 2500 [ 36%]  (Sampling) </span></span>
<span id="cb10-76"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  800 / 2500 [ 32%]  (Sampling) </span></span>
<span id="cb10-77"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration:  900 / 2500 [ 36%]  (Sampling) </span></span>
<span id="cb10-78"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1000 / 2500 [ 40%]  (Sampling) </span></span>
<span id="cb10-79"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1000 / 2500 [ 40%]  (Sampling) </span></span>
<span id="cb10-80"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1000 / 2500 [ 40%]  (Sampling) </span></span>
<span id="cb10-81"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration:  900 / 2500 [ 36%]  (Sampling) </span></span>
<span id="cb10-82"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1100 / 2500 [ 44%]  (Sampling) </span></span>
<span id="cb10-83"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1100 / 2500 [ 44%]  (Sampling) </span></span>
<span id="cb10-84"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1100 / 2500 [ 44%]  (Sampling) </span></span>
<span id="cb10-85"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1000 / 2500 [ 40%]  (Sampling) </span></span>
<span id="cb10-86"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1200 / 2500 [ 48%]  (Sampling) </span></span>
<span id="cb10-87"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1200 / 2500 [ 48%]  (Sampling) </span></span>
<span id="cb10-88"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1200 / 2500 [ 48%]  (Sampling) </span></span>
<span id="cb10-89"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1100 / 2500 [ 44%]  (Sampling) </span></span>
<span id="cb10-90"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1300 / 2500 [ 52%]  (Sampling) </span></span>
<span id="cb10-91"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1300 / 2500 [ 52%]  (Sampling) </span></span>
<span id="cb10-92"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1300 / 2500 [ 52%]  (Sampling) </span></span>
<span id="cb10-93"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1200 / 2500 [ 48%]  (Sampling) </span></span>
<span id="cb10-94"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1400 / 2500 [ 56%]  (Sampling) </span></span>
<span id="cb10-95"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1400 / 2500 [ 56%]  (Sampling) </span></span>
<span id="cb10-96"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1500 / 2500 [ 60%]  (Sampling) </span></span>
<span id="cb10-97"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1400 / 2500 [ 56%]  (Sampling) </span></span>
<span id="cb10-98"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1300 / 2500 [ 52%]  (Sampling) </span></span>
<span id="cb10-99"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1500 / 2500 [ 60%]  (Sampling) </span></span>
<span id="cb10-100"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1600 / 2500 [ 64%]  (Sampling) </span></span>
<span id="cb10-101"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1500 / 2500 [ 60%]  (Sampling) </span></span>
<span id="cb10-102"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1400 / 2500 [ 56%]  (Sampling) </span></span>
<span id="cb10-103"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1600 / 2500 [ 64%]  (Sampling) </span></span>
<span id="cb10-104"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1700 / 2500 [ 68%]  (Sampling) </span></span>
<span id="cb10-105"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1600 / 2500 [ 64%]  (Sampling) </span></span>
<span id="cb10-106"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1500 / 2500 [ 60%]  (Sampling) </span></span>
<span id="cb10-107"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1700 / 2500 [ 68%]  (Sampling) </span></span>
<span id="cb10-108"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1600 / 2500 [ 64%]  (Sampling) </span></span>
<span id="cb10-109"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1800 / 2500 [ 72%]  (Sampling) </span></span>
<span id="cb10-110"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1700 / 2500 [ 68%]  (Sampling) </span></span>
<span id="cb10-111"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1800 / 2500 [ 72%]  (Sampling) </span></span>
<span id="cb10-112"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 1900 / 2500 [ 76%]  (Sampling) </span></span>
<span id="cb10-113"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1800 / 2500 [ 72%]  (Sampling) </span></span>
<span id="cb10-114"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1700 / 2500 [ 68%]  (Sampling) </span></span>
<span id="cb10-115"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 1900 / 2500 [ 76%]  (Sampling) </span></span>
<span id="cb10-116"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1800 / 2500 [ 72%]  (Sampling) </span></span>
<span id="cb10-117"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 2000 / 2500 [ 80%]  (Sampling) </span></span>
<span id="cb10-118"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 1900 / 2500 [ 76%]  (Sampling) </span></span>
<span id="cb10-119"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 2000 / 2500 [ 80%]  (Sampling) </span></span>
<span id="cb10-120"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 1900 / 2500 [ 76%]  (Sampling) </span></span>
<span id="cb10-121"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 2100 / 2500 [ 84%]  (Sampling) </span></span>
<span id="cb10-122"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 2000 / 2500 [ 80%]  (Sampling) </span></span>
<span id="cb10-123"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 2100 / 2500 [ 84%]  (Sampling) </span></span>
<span id="cb10-124"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 2000 / 2500 [ 80%]  (Sampling) </span></span>
<span id="cb10-125"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 2200 / 2500 [ 88%]  (Sampling) </span></span>
<span id="cb10-126"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 2100 / 2500 [ 84%]  (Sampling) </span></span>
<span id="cb10-127"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 2200 / 2500 [ 88%]  (Sampling) </span></span>
<span id="cb10-128"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 2100 / 2500 [ 84%]  (Sampling) </span></span>
<span id="cb10-129"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 2300 / 2500 [ 92%]  (Sampling) </span></span>
<span id="cb10-130"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 2200 / 2500 [ 88%]  (Sampling) </span></span>
<span id="cb10-131"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 2300 / 2500 [ 92%]  (Sampling) </span></span>
<span id="cb10-132"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 2200 / 2500 [ 88%]  (Sampling) </span></span>
<span id="cb10-133"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 2400 / 2500 [ 96%]  (Sampling) </span></span>
<span id="cb10-134"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 2300 / 2500 [ 92%]  (Sampling) </span></span>
<span id="cb10-135"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 2400 / 2500 [ 96%]  (Sampling) </span></span>
<span id="cb10-136"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 Iteration: 2500 / 2500 [100%]  (Sampling) </span></span>
<span id="cb10-137"><span class="co" style="color: #5E5E5E;">#&gt; Chain 4 finished in 16.6 seconds.</span></span>
<span id="cb10-138"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 2400 / 2500 [ 96%]  (Sampling) </span></span>
<span id="cb10-139"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 2300 / 2500 [ 92%]  (Sampling) </span></span>
<span id="cb10-140"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 Iteration: 2500 / 2500 [100%]  (Sampling) </span></span>
<span id="cb10-141"><span class="co" style="color: #5E5E5E;">#&gt; Chain 3 finished in 17.0 seconds.</span></span>
<span id="cb10-142"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 2400 / 2500 [ 96%]  (Sampling) </span></span>
<span id="cb10-143"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 Iteration: 2500 / 2500 [100%]  (Sampling) </span></span>
<span id="cb10-144"><span class="co" style="color: #5E5E5E;">#&gt; Chain 1 finished in 17.2 seconds.</span></span>
<span id="cb10-145"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 Iteration: 2500 / 2500 [100%]  (Sampling) </span></span>
<span id="cb10-146"><span class="co" style="color: #5E5E5E;">#&gt; Chain 2 finished in 17.5 seconds.</span></span>
<span id="cb10-147"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb10-148"><span class="co" style="color: #5E5E5E;">#&gt; All 4 chains finished successfully.</span></span>
<span id="cb10-149"><span class="co" style="color: #5E5E5E;">#&gt; Mean chain execution time: 17.1 seconds.</span></span>
<span id="cb10-150"><span class="co" style="color: #5E5E5E;">#&gt; Total execution time: 17.6 seconds.</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">post <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">extract.samples</span>(flbi)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">precis</span>(flbi)</span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;">#&gt;             mean         sd        5.5%      94.5%      n_eff     Rhat4</span></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;">#&gt; m     0.01029393 0.04047150 -0.05430275 0.07409054   890.4789 1.0018319</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;">#&gt; b     1.98864256 0.05811342  1.89487725 2.08168275  3042.1496 1.0007825</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;">#&gt; a2    0.02836364 0.07310509 -0.08729441 0.14659932  1335.7564 1.0027553</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;">#&gt; a1    0.06834714 0.05394291 -0.01785119 0.15621615  3747.6036 1.0007151</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;">#&gt; tau   0.98041340 0.03617180  0.92352906 1.03914055  2745.6394 1.0007016</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">#&gt; sigma 1.07286195 0.05249312  0.98902178 1.15557275   909.1510 1.0015771</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">#&gt; k     0.98545837 0.05638324  0.89516212 1.07461055   828.2759 1.0013545</span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;">#&gt; p     0.48012384 0.01111044  0.46233213 0.49808700 16117.4910 0.9996995</span></span></code></pre></div>
</div>
<p>Vemos que no aparece la estimación de U, pero en la posterior se ha estimado un valor de U para cada uno de las observaciones. 1000 observaciones y</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">dim</span>(post<span class="sc" style="color: #5E5E5E;">$</span>U)</span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;">#&gt; [1] 8000 1000</span></span>
<span id="cb12-4">post<span class="sc" style="color: #5E5E5E;">$</span>U[<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>]</span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;">#&gt;          [,1]       [,2]       [,3]      [,4]        [,5]</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;">#&gt; [1,] 0.382053 -0.4087260 -1.5231200  0.486262  0.00381229</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;">#&gt; [2,] 0.733459  0.2971870  0.0441252 -1.424160 -0.98469300</span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;">#&gt; [3,] 0.254011 -0.0201819 -0.7499000 -1.444340 -0.51772400</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;">#&gt; [4,] 0.468004  0.1923180 -1.8694400 -1.314570 -0.43902700</span></span></code></pre></div>
</div>
</section>
<section id="efecto-de-m-sobre-d." class="level2">
<h2 class="anchored" data-anchor-id="efecto-de-m-sobre-d.">Efecto de M sobre D.</h2>
<p>Este era el efecto que queríamos obtener y el cuál no podíamos estimar al no poder condicionar sobre U. Aquí es tan sencillo como ver su distribución a posteriori.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">quantile</span>(post<span class="sc" style="color: #5E5E5E;">$</span>m)</span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;">#&gt;          0%         25%         50%         75%        100% </span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">#&gt; -0.14804300 -0.01706778  0.01080760  0.03813360  0.15027000</span></span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">geom_density</span>(<span class="fu" style="color: #4758AB;">aes</span>(post<span class="sc" style="color: #5E5E5E;">$</span>m)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Efecto directo de M sobre D"</span>, </span>
<span id="cb13-9">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"m"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-13-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/06/pluralista/index_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
</figure>
</div>
</div>
</div>
<section id="efecto-de-b1-sobre-d" class="level3">
<h3 class="anchored" data-anchor-id="efecto-de-b1-sobre-d">Efecto de B1 sobre D</h3>
<p>Como ya sabíamos, al haber simulado los datos de forma que las relaciones entre las variables sean lineales, el efecto de B1 sobre D no es más que el efecto de B1 sobre M multiplicado por el efecto de M sobre D.</p>
<p>Utilizando la distribución a posteriori.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Efecto de B1 sobre D </span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">quantile</span>( <span class="fu" style="color: #4758AB;">with</span>(post,b<span class="sc" style="color: #5E5E5E;">*</span>m) )</span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;">#&gt;          0%         25%         50%         75%        100% </span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;">#&gt; -0.27728158 -0.03379382  0.02148739  0.07658919  0.30614657</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;">geom_density</span>(<span class="fu" style="color: #4758AB;">aes</span>(post<span class="sc" style="color: #5E5E5E;">$</span>b <span class="sc" style="color: #5E5E5E;">*</span> post<span class="sc" style="color: #5E5E5E;">$</span>m))<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb14-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Efecto de B1 sobre D"</span>, </span>
<span id="cb14-9">       <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"b1 x m"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/unnamed-chunk-14-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/06/pluralista/index_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid figure-img" style="width:80.0%"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="efecto-de-b1-sobre-d-simulando" class="level3">
<h3 class="anchored" data-anchor-id="efecto-de-b1-sobre-d-simulando">Efecto de B1 sobre D, simulando</h3>
<p>Tal y como dice en su curso, el efecto causal puede ser visto como hacer una intervención supuesto cierto el modelo causal.</p>
<p>Simplemente utilizamos las posterioris obtenidas y vamos simulando , en primer lugar B1 = 0 y simulamos qué M se obtendría, y lo hacemos también para B1 = 1 y restamos para obtener el efecto causal, que coindice con <code>b * m</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;"># B1 = 0</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># B1 -&gt; M</span></span>
<span id="cb15-5">M_B1_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>( post , a1 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">+</span> k<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> )</span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;"># M -&gt; D</span></span>
<span id="cb15-7">D_B1_0 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>( post , a2 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">+</span> m<span class="sc" style="color: #5E5E5E;">*</span>M_B1_0 <span class="sc" style="color: #5E5E5E;">+</span> k<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> )</span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="co" style="color: #5E5E5E;"># now same but with B1 = 1</span></span>
<span id="cb15-10">M_B1_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>( post , a1 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> k<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> )</span>
<span id="cb15-11">D_B1_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">with</span>( post , a2 <span class="sc" style="color: #5E5E5E;">+</span> b<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> <span class="sc" style="color: #5E5E5E;">+</span> m<span class="sc" style="color: #5E5E5E;">*</span>M_B1_1 <span class="sc" style="color: #5E5E5E;">+</span> k<span class="sc" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">0</span> )</span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;"># difference to get causal effect</span></span>
<span id="cb15-14">d_D_B1 <span class="ot" style="color: #003B4F;">&lt;-</span> D_B1_1 <span class="sc" style="color: #5E5E5E;">-</span> D_B1_0</span>
<span id="cb15-15"><span class="fu" style="color: #4758AB;">quantile</span>(d_D_B1)</span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;">#&gt;          0%         25%         50%         75%        100% </span></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;">#&gt; -0.27728158 -0.03379382  0.02148739  0.07658919  0.30614657</span></span></code></pre></div>
</div>
<p>Pues como dice el título , ser pluralista no está tan mal, puedes usar el DAG y el backdoor criterio para entender qué variables ha de tener en cuenta para estimar tu efecto causal, y a partir de ahí podrías usar el “full luxury bayesian” en situaciones más complicadas.</p>


</section>
</section>

 ]]></description>
  <category>estadística</category>
  <category>R</category>
  <guid>https://muestrear-no-es-pecado-rebranding.netlify.app/2022/02/06/pluralista/index.html</guid>
  <pubDate>Sat, 05 Feb 2022 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
