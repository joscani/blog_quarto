{
  "hash": "b52483fbe3060143727267accc06f612",
  "result": {
    "markdown": "---\ntitle: Lecciones aprendidas instalando paquetes de R\ndate: '2020-03-01'\ncategories:\n  - estadística\n  - 2020\n  - R\nexecute: \n  message: false\n  warning: false\n  echo: true\nformat: \n  html: \n    fig-height: 5\n    fig-dpi: 300\n    fig-width: 8.88\n    fig-align: center\n    code-fold: show\n    code-summary: \"Mostrar / ocultar código\"\nknitr:\n  opts_chunk:\n    out.width: 80%\n    fig.showtext: TRUE\n    collapse: true\n---\n\n\n\nAy, la nube.. que bien suena ¿verdad? \nSi, hasta que te toca pelearte con amazonlinux y versiones viejunas de R.  Total, que me ha tocado lidiar un poco con la versión de R 3.4.1 de hace ya 3 años y tener que compilar en mi máquina un montón de librerías para amazon linux (que viene siendo un centos 7 modificado por aws)\n\n\nAsí que lo primero es montarse un Dockerfile dónde id diciendo qué librerías de sistemas hay que añadir, y alguna ñapa por problemas con el compilador de C. \n\n\n```bash\nFROM amazonlinux:2018.03-with-sources\nMAINTAINER canadasreche@gmail.com \n\n# Update yum\nRUN yum -y update \n\n# set locales\nRUN echo \"LANG=en_US.utf8\" >> /etc/locale.conf\n#RUN localedef -c -f UTF-8 -i en_US en_US.UTF-8\nRUN export LC_ALL=en_US.UTF-8\n\n\n# Install system libraries\n# El make -j 8 es para que al compilar en c use 9 jobs\nRUN export MAKE='make -j 8'\nRUN yum install -y xorg-x11-xauth.x86_64 xorg-x11-server-utils.x86_64 xterm libXt libX11-devel \\\nlibXt-devel libcurl-devel git compat-gmp4 compat-libffi5 libxml2-devel libjpeg-devel openssl-devel \\\nboost boost-devel autoconf flex bison libssh2-devel java-1.8.0-openjdk java-1.8.0-openjdk-devel \\\nfontconfig-devel cairo-devel\n\n# Development tools \nRUN yum groupinstall 'Development Tools' -y\n\n# Install and update R\nRUN yum install -y R-core R-base R-core-devel R-devel\nRUN yum update -y R-core R-base R-core-devel R-devel\n\n\n# ENV JAVA_HOME /usr/java/latest\n\n# Fix problem with c compiler\nRUN mkdir ~/.R\nRUN echo \"CC=gcc64\" >> ~/.R/Makevars\n\nCMD [\"bash\"] \n\n```\n\nY ahora una vez que nos ponemos en el directorio dónde tenemos el dockerfile, lo construimos con \n\n```bash\ndocker build -t amazon-linux-r .\n```\n\nSi todo ha ido bien, ya tenemos nuestra imagen de docker de amazon linux con R 3.4.1 instalado. \n\nCreamos y entramos en un container de esa imagen dónde adjuntamos un volumen (carpeta que se va a compartir entre mi máquina y el docker)\n\n\n```bash\n docker run --rm -it -v ~/Descargas/libcentosR-3.4.1:/libR amazon-linux-r /bin/bash\n\n```\n\nY listo ya estamos preparados para instalar paquetes\n\nEntramos en R y lo primero que hacemos es cambiar el `.libPaths` , para que todo lo que instalemos se quede en la carpeta que compartimos\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.libPaths(\"/libR\")\n\n```\n:::\n\n\n\nComo me acabo de comprar un portátil con 6 cores, establezco la variable de entorno `MAKE` para que el código de C se compile usando 6 jobs. Esto hará que la instalación de la mayoría de librerías vaya mucho más rápida.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(MAKE = \"make -j 6\")\n```\n:::\n\n\n\nComo la versión de R que hay en amazon linux es viejuna (junio de 2017) y como hubo un cambio drástico en la versión 3.5 necesitamos hacer una vuelta al pasado para tener los repos de CRAN que habia en ese momento. Para eso, en primer lugar instalamos la librería `checkpoint` que nos va a facilitar el trabajo. Con esta librería podemos apuntar a los repos de CRAN que había en una fecha determinada. En realidad apuntamos a un repo de microsoft que hace mirror diarios del CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"checkpoint\")\nlibrary(checkpoint)\n\n# apuntamos justo al repo que había antes de la verión  de R 3.5\nsetSnapshot(\"2018-03-31\")\n\n```\n:::\n\n\nY ahora ya podemos instalar las librerías, por ejemplo estas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nlist.of.packages <- c(\n  \"BayesFactor\", \"C50\", \"car\", \"caret\", \"catboost\",\n  \"coin\", \"cowplot\", \"DALEX\", \"DALEXtra\", \"DataExplorer\", \"dqrng\",\n  \"drifter\", \"EIX\", \"emmeans\", \"factoextra\", \"FactoMineR\", \"FFTrees\",\n  \"flextable\", \"forecast\", \"gdtools\", \"ggforce\", \"ggiraph\", \"ggiraphExtra\",\n  \"ggpubr\", \"glmnet\", \"highcharter\", \"iBreakDown\", \"igraph\", \"imbalance\",\n  \"iml\", \"ingredients\", \"inum\", \"KernelKnn\", \"libcoin\", \"lime\",\n  \"lme4\", \"minqa\", \"ModelMetrics\", \"multcomp\", \"mvtnorm\", \"networkD3\",\n  \"party\", \"partykit\", \"pbkrtest\", \"plotrix\", \"prediction\", \"randomForestExplainer\",\n  \"ranger\", \"RcppArmadillo\", \"RcppEigen\", \"RMySQL\", \"RSpectra\",\n  \"sitmo\", \"sjPlot\", \"sjstats\", \"smotefamily\",\n  \"survey\", \"systemfonts\", \"threejs\", \"uwot\", \"xgb2sql\",\n  \"xgboost\", \"yarrr\", \"ztable\", \"tcltk\"\n)\n\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, \"Package\"])]\nif (length(new.packages)) install.packages(new.packages)\n\n```\n:::\n\n\nY una vez que estén instadas podemos hacer una vuelta al futuro y actualizar las que podamos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nsetSnapshot(\"2018-03-31\")\nupdate.packages(ask=FALSE)\n\n```\n:::\n\n\nY esto es todo, parece sencillo, pero me ha quitado bastante tiempo todas estas pequeñas vicisitudes.. \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}