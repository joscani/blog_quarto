{
  "hash": "241f0042164ed0af1514514ad105799c",
  "result": {
    "markdown": "---\ntitle: Api y docker con R. parte 2\nexecute: \n  eval: false\nauthor: jlcr\ndate: '2022-10-30'\ncategories:\n  - api\n  - docker\n  - R\n---\n\n\nEn la entrada de [api y docker con R parte I](https://muestrear-no-es-pecado.netlify.app/2022/10/12/api-y-docker-con-r-parte-1/) veíamos que es muy fácil construir una api y dockerizarla para tener un modelo bayesiano en producción.\nPero hay un pequeño incoveniente, el docker que hemos creado se base en [rocker/verse](https://rocker-project.org/images/) que se basan en ubuntu.\nY ubuntu ocupa mucho.\nPero gracias a gente como Gabor Csardi (autor entre otras librerías de `igraph`), tenemos [r-hub/minimal](https://github.com/r-hub/r-minimal), que permiten tener una imagen de docker con R basadas en alpine, de hecho una imagen de docker con R y dplyr son unos 50 mb.\n\nLo primero de todo es ver cuánto ocupa el docker creado en el primer post.\n\n``` bash\n╰─ $ ▶ docker image ls mi_modelo_brms\nREPOSITORY       TAG       IMAGE ID       CREATED       SIZE\nmi_modelo_brms   latest    9e641ec2c150   3 weeks ago   3.42GB\n```\n\nPues son unos cuántos gigas, mayoritariamente al estar basado en ubuntu y al que los docker de rocker/verse instalan todo el software de R recomendado, los ficheros de ayuda, las capacidades gráficas, etc..\n\nPero con r-hub/minimal podemos dejar bastante limpio el tema.\nLeyendo el Readme del repo vemos que han configurado una utilidad a la que llaman `installr` que permite instalar librerías del sistema o de R, instalando los compiladores de C, fortran etc que haga falta y eliminarlos una vez están compiladas la librerías.\n\nSin más, cambiamos el Dockerfile del otro día por este otro .\n\n``` bash\n\n# Docker file para modelo brms\n\nFROM rhub/r-minimal:4.2.1\n\n\nRUN installr -d -a linux-headers ps\n\nRUN installr -d -a \"curl-dev linux-headers gfortran libcurl libxml2 libsodium-dev libsodium automake autoconf\"\n\nRUN installr -d Matrix MASS mgcv future codetools brms plumber tidybayes\n\n## Copio el modelo y el fichero de la api\nCOPY brms_model.rds /opt/ml/brms_model.rds\nCOPY plumber.R /opt/ml/plumber.R\n\n# exponemos el puerto\nEXPOSE 8081\nENTRYPOINT [\"R\", \"-e\", \"pr <- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8081)\"]\n```\n\nY haciendo `docker build -t mi_modelo_brms_rminimal .` pasado un rato puesto que ha de compilar las librerías tenemos nuestra api dockerizada con la misma funcionalidad que el otro día.\n\nY con un tamaño mucho más contenido\n\n``` bash\n  ╰─ $ ▶ docker image ls\nREPOSITORY                    TAG                    IMAGE ID       CREATED         SIZE\nmi_modelo_brms_rminimal       latest                 8d791d2ebc74   2 hours ago     665MB\n```\n\nque se va a unos 655 mb, de los cuales unos 300 MB se deben a `stan` y `rstan`.\nPero vamos, no está mal, pasar de 3.4 Gb a 665MB.\n\n## Actualización, usando renv\n\nPor temas de buenas prácticas es recomendable usar `renv` para crear el archivo `renv.lock` dónde se guarda qué versión de las librerías estamos usando, y además porque usa por defecto un repo con las librerías compiladas.\n\nLo primero que hago es crearme un nuevo proyecto dónde pongo el modelo entrenado que queremos usar `brms_model.rds` que entrené en el primer post y el fichero `plumber.R` y ningún fichero más.\n\nFichero **plumber.R**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#\n# This is a Plumber API. In RStudio 1.2 or newer you can run the API by\n# clicking the 'Run API' button above.\n#\n# In RStudio 1.1 or older, see the Plumber documentation for details\n# on running the API.\n#\n# Find out more about building APIs with Plumber here:\n#\n#    https://www.rplumber.io/\n#\n# save as bos_rf_score.R\n\nlibrary(brms)\nlibrary(plumber)\nlibrary(tidybayes)\n\nbrms_model <- readRDS(\"brms_model.rds\")\n\n\n#* @apiTitle brms predict Api\n#* @apiDescription Endpoints for working with brms model\n## ---- filter-logger\n#* Log some information about the incoming request\n#* @filter logger\nfunction(req){\n    cat(as.character(Sys.time()), \"-\",\n        req$REQUEST_METHOD, req$PATH_INFO, \"-\",\n        req$HTTP_USER_AGENT, \"@\", req$REMOTE_ADDR, \"\\n\")\n    forward()\n}\n\n## ---- post-data\n#* Submit data and get a prediction in return\n#* @post /predict\nfunction(req, res) {\n    data <- tryCatch(jsonlite::parse_json(req$postBody, simplifyVector = TRUE),\n                     error = function(e) NULL)\n    if (is.null(data)) {\n        res$status <- 400\n        return(list(error = \"No data submitted\"))\n    }\n    \n    predict(brms_model, data) |>\n        as.data.frame()\n}\n\n\n#* @post /full_posterior\nfunction(req, res) {\n    data <- tryCatch(jsonlite::parse_json(req$postBody, simplifyVector = TRUE),\n                     error = function(e) NULL)\n    if (is.null(data)) {\n        res$status <- 400\n        return(list(error = \"No data submitted\"))\n    }\n    \n    add_epred_draws(data, brms_model) \n    \n}\n```\n:::\n\n\nA continuación activo `renv` en el proyecto\n\n\n::: {.cell}\n\n```{.r .cell-code}\n renv::activate()\n* Project '~/Rstudio_projects/r-api-minimal' loaded. [renv 0.16.0]\n```\n:::\n\n\nUna vez que está activado y el fichero plumber.R está creado en el directorio uso `hydrate` para que encuentre qué librerías se usan en el proyecto\n\n\n::: {.cell}\n\n```{.r .cell-code}\n> renv::hydrate()\n* Discovering package dependencies ... Done!\n* Copying packages into the cache ... Done!\n```\n:::\n\n\ny ya podemos crear el fichero `renv::snapshot()`, donde pone todas las librerías que se van a instalar y si vienen de CRAN , de GitHub o de RSPM(rstudio package manager)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrenv::snapshot()\nThe following package(s) will be updated in the lockfile:\n\n# CRAN ===============================\n- Matrix           [* -> 1.5-1]\n- R6               [* -> 2.5.1]\n- RColorBrewer     [* -> 1.1-3]\n- Rcpp             [* -> 1.0.9]\n- base64enc        [* -> 0.1-3]\n- bslib            [* -> 0.4.0]\n- cachem           [* -> 1.0.6]\n- codetools        [* -> 0.2-18]\n- colorspace       [* -> 2.0-3]\n- ellipsis         [* -> 0.3.2]\n- fansi            [* -> 1.0.3]\n- farver           [* -> 2.1.1]\n- fastmap          [* -> 1.1.0]\n- generics         [* -> 0.1.3]\n- ggplot2          [* -> 3.3.6]\n- htmltools        [* -> 0.5.3]\n- jquerylib        [* -> 0.1.4]\n- labeling         [* -> 0.4.2]\n- lattice          [* -> 0.20-45]\n- lifecycle        [* -> 1.0.3]\n- magrittr         [* -> 2.0.3]\n- memoise          [* -> 2.0.1]\n- mgcv             [* -> 1.8-40]\n- mime             [* -> 0.12]\n- munsell          [* -> 0.5.0]\n- pkgconfig        [* -> 2.0.3]\n- prettyunits      [* -> 1.1.1]\n- processx         [* -> 3.7.0]\n- ps               [* -> 1.7.1]\n- rappdirs         [* -> 0.3.3]\n- rprojroot        [* -> 2.0.3]\n- sass             [* -> 0.4.2]\n- stringi          [* -> 1.7.8]\n- tibble           [* -> 3.1.8]\n- utf8             [* -> 1.2.2]\n- withr            [* -> 2.5.0]\n\n# GitHub =============================\n- glue             [* -> jimhester/fstrings@HEAD]\n\n# RSPM ===============================\n- BH               [* -> 1.78.0-0]\n- Brobdingnag      [* -> 1.2-9]\n- DT               [* -> 0.26]\n- HDInterval       [* -> 0.2.2]\n- MASS             [* -> 7.3-58.1]\n- RcppEigen        [* -> 0.3.3.9.2]\n- RcppParallel     [* -> 5.1.5]\n- StanHeaders      [* -> 2.21.0-7]\n- abind            [* -> 1.4-5]\n- arrayhelpers     [* -> 1.1-0]\n- backports        [* -> 1.4.1]\n- bayesplot        [* -> 1.9.0]\n- bridgesampling   [* -> 1.1-2]\n- brms             [* -> 2.18.0]\n- callr            [* -> 3.7.2]\n- checkmate        [* -> 2.1.0]\n- cli              [* -> 3.4.1]\n- coda             [* -> 0.19-4]\n- colourpicker     [* -> 1.1.1]\n- commonmark       [* -> 1.8.1]\n- cpp11            [* -> 0.4.3]\n- crayon           [* -> 1.5.2]\n- crosstalk        [* -> 1.2.0]\n- curl             [* -> 4.3.3]\n- desc             [* -> 1.4.2]\n- digest           [* -> 0.6.30]\n- distributional   [* -> 0.3.1]\n- dplyr            [* -> 1.0.10]\n- dygraphs         [* -> 1.1.1.6]\n- fontawesome      [* -> 0.3.0]\n- fs               [* -> 1.5.2]\n- future           [* -> 1.28.0]\n- ggdist           [* -> 3.2.0]\n- ggridges         [* -> 0.5.4]\n- globals          [* -> 0.16.1]\n- gridExtra        [* -> 2.3]\n- gtable           [* -> 0.3.1]\n- gtools           [* -> 3.9.3]\n- htmlwidgets      [* -> 1.5.4]\n- httpuv           [* -> 1.6.6]\n- igraph           [* -> 1.3.5]\n- inline           [* -> 0.3.19]\n- isoband          [* -> 0.2.6]\n- jsonlite         [* -> 1.8.2]\n- later            [* -> 1.3.0]\n- lazyeval         [* -> 0.2.2]\n- listenv          [* -> 0.8.0]\n- loo              [* -> 2.5.1]\n- markdown         [* -> 1.2]\n- matrixStats      [* -> 0.62.0]\n- miniUI           [* -> 0.1.1.1]\n- mvtnorm          [* -> 1.1-3]\n- nleqslv          [* -> 3.3.3]\n- nlme             [* -> 3.1-160]\n- numDeriv         [* -> 2016.8-1.1]\n- parallelly       [* -> 1.32.1]\n- pillar           [* -> 1.8.1]\n- pkgbuild         [* -> 1.3.1]\n- plumber          [* -> 1.2.1]\n- plyr             [* -> 1.8.7]\n- posterior        [* -> 1.3.1]\n- promises         [* -> 1.2.0.1]\n- purrr            [* -> 0.3.5]\n- renv             [* -> 0.16.0]\n- reshape2         [* -> 1.4.4]\n- rlang            [* -> 1.0.6]\n- rstan            [* -> 2.21.7]\n- rstantools       [* -> 2.2.0]\n- scales           [* -> 1.2.1]\n- shiny            [* -> 1.7.2]\n- shinyjs          [* -> 2.1.0]\n- shinystan        [* -> 2.6.0]\n- shinythemes      [* -> 1.2.0]\n- sodium           [* -> 1.2.1]\n- sourcetools      [* -> 0.1.7]\n- stringr          [* -> 1.4.1]\n- svUnit           [* -> 1.0.6]\n- swagger          [* -> 3.33.1]\n- tensorA          [* -> 0.36.2]\n- threejs          [* -> 0.3.3]\n- tidybayes        [* -> 3.0.2]\n- tidyr            [* -> 1.2.1]\n- tidyselect       [* -> 1.2.0]\n- vctrs            [* -> 0.4.2]\n- viridisLite      [* -> 0.4.1]\n- webutils         [* -> 1.1]\n- xfun             [* -> 0.34]\n- xtable           [* -> 1.8-4]\n- xts              [* -> 0.12.2]\n- yaml             [* -> 2.3.6]\n- zoo              [* -> 1.8-11]\n\nThe version of R recorded in the lockfile will be updated:\n- R                [*] -> [4.2.1]\n\nDo you want to proceed? [y/N]: y\n* Lockfile written to '~/Rstudio_projects/r-api-minimal/renv.lock'.\n```\n:::\n\n\nY ya sólo queda crear el Dockerfile usando como base r-hub/minimal\n\n**Dockerfile**\n\n``` bash\n# Docker file para modelo brms\n\nFROM rhub/r-minimal:4.2.1\n\n# copio fichero de las librerías\nCOPY renv.lock renv.lock\n\n# uso -c para que se queden instaladas los compiladores de c y fortran\n\nRUN installr -c -a \"curl-dev linux-headers gfortran libcurl libxml2 libsodium-dev libsodium automake autoconf\"\n\n#instalo renv\nRUN installr -c renv\n\n# uso renv para instlar la versión de las librerías que hay en renv.lock\nRUN Rscript -e \"renv::restore()\"\n\n## Copio el modelo y el fichero de la api\nCOPY brms_model.rds /opt/ml/brms_model.rds\nCOPY plumber.R /opt/ml/plumber.R\n\n# exponemos el puerto\nEXPOSE 8081\nENTRYPOINT [\"R\", \"-e\", \"pr <- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8081)\"]\n```\n\ny como antes construimos el docker image\n\n``` bash\ndocker build -t mi_modelo_brms_rminimal_renv .\n```\n\nEl docker usando renv es sustancialmente más pesado, ocupa 1.29 Gb\n\nSeguramente se puede optimizar más si no usara `brms`, puesto que importa shinystan, bayesplot y otras librerías que no son estrictamente necesarias para nuestro propósito.\nHabrá que esperar a que [Virgilio](https://twitter.com/precariobecario) haga la función predict de INLA para darle una vuelta a esto\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}