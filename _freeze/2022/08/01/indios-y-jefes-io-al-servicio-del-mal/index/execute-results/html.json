{
  "hash": "55b56659cd7bd3e93845a46d7ee58791",
  "result": {
    "markdown": "---\ntitle: Indios y jefes, IO al servicio del mal. \nauthor: jlcr\ndate: '2022-08-01'\nslug: indios-y-jefes-io-al-servicio-del-mal\ncategories:\n  - estadística\n  - Investigación operativa\n  - R\n  - 2022\ndescription: ''\nexecute: \n  message: false\n  warning: false\n  echo: true\nformat: \n  html: \n    fig-height: 5\n    fig-dpi: 300\n    fig-width: 8.88\n    fig-align: center\nknitr:\n  opts_chunk:\n    out.width: 80%\n    fig.showtext: TRUE\n    collapse: true\n    comment: \"#>\"\n---\n\n\n\n## Introducción\n\nVoy a poner un ejemplo de como utilizar solvers para investigación operativa dentro de R. \n\nTenemos la siguiente información:\n* Listado de códigos postales de España con la longitud y latitud del centroide del polígono.\n* Listado de códigos postales de la ubicación de las sedes de una empresa. \n* En la empresa hay jefes e indios, no es necesario que haya un jefe por sede.\n\nSe quiere, para cada provincia de España\n\n* Asignar cada código postal de esa provincia a un empleado de la empres (jefe o indio). \n* Un mismo código postal no puede estar asignado a más de un empleado.\n* En la medida de lo posible asignar a los empleados los códigos postales más cercanos al lugar de su sede.\n* A igualdad de distancia entre un código postal y una sede, se debería asignar ese código postal a un indio.\n* Ningún indio debe tener asignados menos códigos postales que ningún jefe.\n* Los jefes como **máximo** han de tener 7 códigos postales asignados.\n* Los indios como **mínimo** han de tener 3 códigos postales asignados.\n* No puede haber ningún empleado que esté \"desasignado\".\n\n\n\nDados estos requisitos debería plantear como es la definición del problema, pero no tengo ganas de ponerme a escribir fórmulas en latex, así que en vez de eso voy a utilizar unos datos simulados  y directamente al código.. \n\n\n## Carga de datos y crear datos ficticios.\n\n\n### Carga códigos postales\n\nCasualmente, tengo por mi pc un shapefile algo antiguo (de cuando está capa estaba en cartociudad) con la capa de códigos postales de España, la cual si se quiere actualizada vale un dinerillo. [correos](https://www.market.correos.es/es/product/capa-cartografica-de-codigos-postales), 6000 Euros la versión sin actualizaciones.. Bueno, si hacienda y correos somos todos me gustaría al menos poder utilizar esto actualizado sin que me cueste 6k. \n\nVamos a cargar la capa, obtener los centroides, pasar la geometría a longitud y latitud\n\n\n```r\nlibrary(tidyverse)\n```\n\n```\n## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n## ✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n## ✔ tibble  3.1.8     ✔ dplyr   1.0.9\n## ✔ tidyr   1.2.0     ✔ stringr 1.4.0\n## ✔ readr   2.1.2     ✔ forcats 0.5.1\n## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n## ✖ dplyr::filter() masks stats::filter()\n## ✖ dplyr::lag()    masks stats::lag()\n```\n\n```r\nlibrary(sf)\n```\n\n```\n## Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE\n```\n\n\n\n```r\ncod_postales_raw <- readRDS(here::here(\"data/cp_boundaries.rds\")) %>%\n  select(-cp_num, -cp_2_num)\n\nhead(cod_postales_raw)\n```\n\n```\n## Simple feature collection with 6 features and 3 fields\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -1536953 ymin: 3373964 xmax: -41802.13 ymax: 5247186\n## Projected CRS: WGS 84 / Pseudo-Mercator\n##      cp cp_2   area_m2                       geometry\n## 1 35560   35 187875455 MULTIPOLYGON (((-1518970 33...\n## 2 27330   27   6659413 MULTIPOLYGON (((-821864.3 5...\n## 3 46680   46  69190773 MULTIPOLYGON (((-51610.46 4...\n## 4 49706   49  90229134 MULTIPOLYGON (((-641488.4 5...\n## 5 21120   21  20068648 MULTIPOLYGON (((-776955.2 4...\n## 6 16623   16 132859998 MULTIPOLYGON (((-256256.7 4...\n```\n\nPintamos algunos códigos \n\n\n```r\nplot(st_geometry(cod_postales_raw[1:2000, ]))\n```\n\n<img src=\"unnamed-chunk-3-1.png\" width=\"672\" />\n\nPara obtener los centroides, usamos la función  `st_centroid` y pasamos la capa de polígonos a una de puntos\n\n\n```r\ncod_postales_raw <- st_centroid(cod_postales_raw)\n```\n\n```\n## Warning in st_centroid.sf(cod_postales_raw): st_centroid assumes attributes are\n## constant over geometries of x\n```\n\n```r\nhead(cod_postales_raw)\n```\n\n```\n## Simple feature collection with 6 features and 3 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -1525406 ymin: 3382025 xmax: -47782.92 ymax: 5245455\n## Projected CRS: WGS 84 / Pseudo-Mercator\n##      cp cp_2   area_m2                  geometry\n## 1 35560   35 187875455  POINT (-1525406 3382025)\n## 2 27330   27   6659413 POINT (-823274.9 5245455)\n## 3 46680   46  69190773 POINT (-47782.92 4752325)\n## 4 49706   49  90229134 POINT (-637415.5 5057096)\n## 5 21120   21  20068648 POINT (-778872.1 4479315)\n## 6 16623   16 132859998 POINT (-262034.3 4818194)\n```\n\n```r\nplot(st_geometry(cod_postales_raw[1:2000, ]), cex = 0.2)\n```\n\n<img src=\"unnamed-chunk-4-1.png\" width=\"672\" />\n\nAhora extraemos de la geometría la longitud y latitud. Para eso hay que transformar la geometría. \n\n\n\n```r\ncod_postales_raw <- cod_postales_raw %>%\n  st_transform(\"+proj=longlat +ellps=WGS84 +datum=WGS84\")\n\ncod_postales <- cod_postales_raw %>%\n  mutate(\n    centroide_longitud = unlist(map(geometry, 1)),\n    centroide_latitud = unlist(map(geometry, 2))\n  ) %>%\n  st_drop_geometry() %>% # quitamos la geometría y nos quedamos solo con la longitud y latitud\n  rename(\n    cod_postal = cp,\n    cod_prov = cp_2\n  ) %>%\n  filter(!is.na(centroide_longitud)) # tenía un polígono con NAS\n\nhead(cod_postales)\n```\n\n```\n##   cod_postal cod_prov   area_m2 centroide_longitud centroide_latitud\n## 1      35560       35 187875455        -13.7029565          29.05011\n## 2      27330       27   6659413         -7.3956047          42.56144\n## 3      46680       46  69190773         -0.4292412          39.21368\n## 4      49706       49  90229134         -5.7260007          41.30272\n## 5      21120       21  20068648         -6.9967272          37.28791\n## 6      16623       16 132859998         -2.3538946          39.67063\n```\n\nPor otro lado me interesa añadir el literal de provincia, tengo una tabla extraída del INE con la correspondencia entre cod_prov y el literal\n\n\n\n```r\nprovincia <- read_csv(here::here(\"data/codprov.csv\"))\n```\n\n```\n## Rows: 52 Columns: 2\n## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (2): CODIGO, LITERAL\n## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n```r\nhead(provincia)\n```\n\n```\n## # A tibble: 6 × 2\n##   CODIGO LITERAL         \n##   <chr>  <chr>           \n## 1 02     Albacete        \n## 2 03     Alicante/Alacant\n## 3 04     Almería         \n## 4 01     Araba/Álava     \n## 5 33     Asturias        \n## 6 05     Ávila\n```\n\n\nNormalizo a mayúsculas y sin tildes y se lo pego a los códigos postales \n\n\n\n```r\nprovincia <- provincia %>%\n  mutate(provincia = toupper(stringi::stri_trans_general(LITERAL, \"Latin-ASCII\")))\n\ncod_postales <- cod_postales %>%\n  left_join(provincia %>%\n    select(\n      CODIGO,\n      provincia\n    ),\n  by = c(\"cod_prov\" = \"CODIGO\")\n  )\n\ndim(cod_postales)\n```\n\n```\n## [1] 10808     6\n```\n\n```r\nhead(cod_postales %>%\n  select(provincia, cod_prov, everything()))\n```\n\n```\n##           provincia cod_prov cod_postal   area_m2 centroide_longitud\n## 1       PALMAS, LAS       35      35560 187875455        -13.7029565\n## 2              LUGO       27      27330   6659413         -7.3956047\n## 3 VALENCIA/VALENCIA       46      46680  69190773         -0.4292412\n## 4            ZAMORA       49      49706  90229134         -5.7260007\n## 5            HUELVA       21      21120  20068648         -6.9967272\n## 6            CUENCA       16      16623 132859998         -2.3538946\n##   centroide_latitud\n## 1          29.05011\n## 2          42.56144\n## 3          39.21368\n## 4          41.30272\n## 5          37.28791\n## 6          39.67063\n```\n\n### Datos ficticios de las sedes de las empresas\n\n\nLo que voy a hacer es seleccionar aleatoriamente un número de códigos postales en cada provincia, que serán las sedes de la empresa. En cada provincia pongo al menos a un empleado de tipo = \"jefe\".  Luego, reparto de forma aleatoria entre los códigos postales que han sido elegidos como sedes otros 120 jefes y 480 indios. \n\n\n\n```r\nset.seed(155)\n\n## En cada provincia nos quedamos con  un 6% de códigos postales\n\nsedes_alea <- cod_postales %>%\n  group_by(provincia) %>%\n  slice_sample(prop = 0.06)\n\n\n\n# en cada provincia al menos un jefe y resto de empleados de forma aleatoria, en las diferentes sedes elegidas\n\npersonal <- bind_rows(\n  sedes_alea %>%\n    select(provincia, cod_postal) %>%\n    group_by(provincia) %>%\n    slice_sample(n = 1) %>%\n    ungroup() %>%\n    select(cod_postal) %>%\n    mutate(tipo = \"jefe\"),\n  tibble(\n    tipo = c(rep(\"jefe\", 120), rep(\"indio\", 360)),\n    cod_postal = sample(sedes_alea$cod_postal, size = 480, replace = TRUE)\n  )\n)\n```\n\n\nCreamos data set sedes \n\n```r\nsedes <- personal %>%\n  left_join(sedes_alea)\n```\n\n```\n## Joining, by = \"cod_postal\"\n```\n\n```r\ndim(sedes)\n```\n\n```\n## [1] 530   7\n```\n\n```r\nsample_n(sedes, 7)\n```\n\n```\n## # A tibble: 7 × 7\n##   cod_postal tipo  cod_prov    area_m2 centroide_longitud centroide_la…¹ provi…²\n##   <fct>      <chr> <chr>         <dbl>              <dbl>          <dbl> <chr>  \n## 1 37660      indio 37        36448279.              -5.99           40.5 SALAMA…\n## 2 41770      jefe  41       183345907.              -5.55           37.0 SEVILLA\n## 3 08011      jefe  08          968836.               2.16           41.4 BARCEL…\n## 4 34479      indio 34        49891663.              -4.42           42.4 PALENC…\n## 5 34859      indio 34       118812672.              -4.59           42.8 PALENC…\n## 6 09348      indio 09       249695400.              -3.61           42.0 BURGOS \n## 7 29750      indio 29        14389642.              -4.04           36.8 MALAGA \n## # … with abbreviated variable names ¹​centroide_latitud, ²​provincia\n```\n\n## IO al servicio del mal en GRANADA\n\nComo ejemplo, vamos a ver como sería para Granada\n\n\n\n```r\ncod_postales_granada <- cod_postales %>%\n  filter(provincia == \"GRANADA\") %>%\n  mutate(id = row_number())\n\nsedes_granada <- sedes %>%\n  filter(provincia == \"GRANADA\") %>%\n  arrange(desc(tipo)) %>%\n  mutate(id_sede = row_number())\n\nsedes_granada\n```\n\n```\n## # A tibble: 11 × 8\n##    cod_postal tipo  cod_prov    area_m2 centroide_long…¹ centr…² provi…³ id_sede\n##    <fct>      <chr> <chr>         <dbl>            <dbl>   <dbl> <chr>     <int>\n##  1 18328      jefe  18        58574459.            -3.87    37.2 GRANADA       1\n##  2 18006      jefe  18         3245912.            -3.61    37.2 GRANADA       2\n##  3 18516      jefe  18       146541813.            -3.24    37.2 GRANADA       3\n##  4 18516      jefe  18       146541813.            -3.24    37.2 GRANADA       4\n##  5 18197      indio 18        10003524.            -3.61    37.2 GRANADA       5\n##  6 18516      indio 18       146541813.            -3.24    37.2 GRANADA       6\n##  7 18414      indio 18        40411565.            -3.34    36.9 GRANADA       7\n##  8 18197      indio 18        10003524.            -3.61    37.2 GRANADA       8\n##  9 18369      indio 18        17670871.            -4.01    37.2 GRANADA       9\n## 10 18611      indio 18        33542783.            -3.60    36.8 GRANADA      10\n## 11 18514      indio 18       110524485.            -3.08    37.2 GRANADA      11\n## # … with abbreviated variable names ¹​centroide_longitud, ²​centroide_latitud,\n## #   ³​provincia\n```\n\nEs importante haber ordenado por tipo , porque vamos a utilizar el mismo índice  `j` para empleados jefe y empleados indios.\n\nAhora definimos:\n* `m` como el número de empleados en las sedes de Granada\n* `n` como el número de códigos postales a asignar en Granada\n* `n_sedes` como el número de sedes \n* `njefes` como el número de jefes\n* `n_indios` como el número de indios\n\n\n\n```r\nm <- nrow(sedes_granada)\nn <- nrow(cod_postales_granada)\nn_sedes <- length(unique(sedes_granada$cod_postal))\n\nnjefes <- sedes_granada %>%\n  filter(tipo == \"jefe\") %>%\n  count() %>%\n  pull(n)\n\nn_indios <- m - njefes\n```\n\n\nNecesitamos definir una función de distancia entre los códigos postales a asignar y las sedes. Para eso usamos la distancia Haversine que está implementada en la librería  `geosphere`. Y aquí ya introducimos uno de los requerimientos. Básicamente aumentamos la distancia un 10% si el empleado es un jefe, de forma que sea peor asignarle ese código postal al jefe en términos de minimizar el total de distancias. \n\n\n\n```r\ntransportcost_granada <- function(i, j) {\n  cliente <- cod_postales_granada[i, ]\n  comercial <- sedes_granada[j, ]\n  distancia <-\n    geosphere::distHaversine(\n      c(cliente$centroide_longitud, cliente$centroide_latitud),\n      c(comercial$centroide_longitud, comercial$centroide_latitud)\n    )\n\n  if (comercial[, \"tipo\"] == \"jefe\") {\n    distancia <- distancia * 1.1\n  }\n\n  return(distancia / 1000) # devolvemos la disancia en km\n}\n\n# distancia entre sede 1 y empleado 3\ntransportcost_granada(1, 3)\n```\n\n```\n## [1] 51.54738\n```\n\n\nPintamos los códigos postales y las sedes. Los granadinos reconoceremos la forma de la provincia.\n\n\n\n```r\np <-\n  ggplot(\n    cod_postales_granada,\n    aes(centroide_longitud, centroide_latitud)\n  ) +\n  geom_point(size = rel(2), shape = 4) +\n  geom_point(\n    data = sedes_granada,\n    size = rel(3),\n    color = \"darkorange\"\n  ) +\n  theme(\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    axis.text = element_blank(),\n    panel.grid = element_blank()\n  )\np + ggtitle(\"Sin asignar\")\n```\n\n<img src=\"unnamed-chunk-13-1.png\" width=\"672\" />\n\n## Optimización\n\nPara optimizar el problema vamos a usar la librería `ompr` que permite plantear el problema de optimización lineal entera de forma sencilla, y se conecta a la librería `ROI` que es la que al final llama al solver. Como solver vamos a utilizar `glpk` que es software libre y lo suficientemente bueno para este ejemplo. \n\n\n\n\n```r\nlibrary(ompr)\nlibrary(ompr.roi)\nlibrary(ROI.plugin.glpk)\nlibrary(patchwork) # pa unir los ggplots resultantes\n```\n\nDefinimos el modelo \n\n\n```r\nmip_model_granada <- MIPModel() %>%\n  # variable indicadora que indica si una tienda i se asigna a comercial j\n  add_variable(x[i, j], i = 1:n, j = 1:m, type = \"binary\") %>%\n  # Minimizar el objetivo de distancia\n  set_objective(sum_over(transportcost_granada(i, j) * x[i, j], i = 1:n, j = 1:m), \"min\") %>%\n  # cada tienda (código postal) solo debe ir a un comerciial. el comercial puede atender varios\n  add_constraint(sum_over(x[i, j], j = 1:m) == 1, i = 1:n) %>%\n  # todo el mundo tiene que atender al minimo a una tienda\n  add_constraint(sum_over(x[i, j], i = 1:n) >= 1, j = 1:m) %>%\n  #   Los jefes curran menos, como máximo 7 tiendas\n  add_constraint(sum_over(x[i, j], i = 1:n) <= 7, j = 1:njefes) %>%\n  #\n  # # Los indios al menos atienden a 3 tiendas\n  add_constraint(sum_over(x[i, j], i = 1:n) >= 3, j = (njefes + 1):m) %>%\n  # para no sobrecargar mucho a los indios, les pongo un máximo que sea 1.5 veces el núemro de tiendas entre total currantes (jefes + indios)\n  add_constraint(sum_over(x[i, j], i = 1:n) <= round(1.5 * n / m), j = (njefes + 1):m) %>%\n  add_constraint(sum_over(x[i, j], i = 1:n) >= sum_over(x[i, k], i = 1:n), j = (njefes + 1):m, k = 1:njefes)\n```\n\n\nAlgunas aclaraciones de la sintaxis anterior. \n\n* Nuestra variable auxilizar es `\\(X_{i,j}\\)` dónde la i son los códigos postales y la j cada empleado.\n* Se trata de minimizar la suma total de distancias cuando se asigna un código postal a un empleado, para todos los códigos postales y todos los empleados.\n* La restricción `add_constraint(sum_over(x[i, j], j = 1:m) == 1  , i = 1:n) ` si nos fijamos en el sum_over significa  sumar en j (empleados) para cada código postal (i)  y que esa suma valga 1. Es decir, para cada código postal (i) sólo se permite que sea asignado a un empleado\n* `add_constraint(sum_over(x[i, j], i = 1:n) >= 1  , j = 1:m)`  Que para cada empleado (j) la suma de todos los códigos postales que se le asignen sea mayor o igual que 1. Vamos que no se quede ninguno ocioso. \n* ` add_constraint(sum_over( x[i,j], i = 1:n)  <= 7, j = 1:njefes)`  por eso ordeanmos por tipo para que el índice 1:njefes corresponda a los empleados jefes, esta restricción asegura que a un jefe no se le asignen más de 7 códigos postales. \n\n* `add_constraint(sum_over( x[i,j], i = 1:n)  >=  3 , j = (njefes +1):m)` Mínimo 3 códigos postales para los indios.\n* `add_constraint(sum_over( x[i,j], i = 1:n)  <=  round(1.5 * n/m) , j = (njefes +1):m)` Esta restricción intenta equilibrar el número de asignaciones para los indios, de forma que como mucho a un empleado tenga 1.5 veces la media de códigos postales por empleado. \n\n* `  add_constraint(sum_over( x[i,j], i = 1:n)  >=  sum_over( x[i,k], i = 1:n) , j = (njefes +1):m, k = 1:njefes) ` En esta restricción es dónde aseguramos que ningún empleado tenga menos asignaciones que ningún jefe, por eso se ha usado el índice k. \n\nPues el problema tiene 2200 variables (todas binarias) y 257 restricciones.\n\n\n```r\nmip_model_granada\n```\n\n```\n## Mixed integer linear optimization problem\n## Variables:\n##   Continuous: 0 \n##   Integer: 0 \n##   Binary: 2200 \n## Model sense: minimize \n## Constraints: 257\n```\n\nResolvemos con glpk\n\n\n```r\nresult_granada <- solve_model(mip_model_granada, with_ROI(solver = \"glpk\", verbose = TRUE))\n```\n\n```\n## <SOLVER MSG>  ----\n## GLPK Simplex Optimizer, v4.65\n## 257 rows, 2200 columns, 19200 non-zeros\n##       0: obj =   0.000000000e+00 inf =   2.320e+02 (218)\n##     397: obj =   9.427540716e+03 inf =   5.627e-13 (0) 1\n## *   870: obj =   3.723682515e+03 inf =   0.000e+00 (0) 2\n## OPTIMAL LP SOLUTION FOUND\n## GLPK Integer Optimizer, v4.65\n## 257 rows, 2200 columns, 19200 non-zeros\n## 2200 integer variables, all of which are binary\n## Integer optimization begins...\n## Long-step dual simplex will be used\n## +   870: mip =     not found yet >=              -inf        (1; 0)\n## +   870: >>>>>   3.723682515e+03 >=   3.723682515e+03   0.0% (1; 0)\n## +   870: mip =   3.723682515e+03 >=     tree is empty   0.0% (0; 1)\n## INTEGER OPTIMAL SOLUTION FOUND\n## <!SOLVER MSG> ----\n```\n\n\n```r\nresult_granada\n```\n\n```\n## Status: success\n## Objective value: 3723.683\n```\n\nY ahora procedemos a ver las asignaciones. Para eso utilizamos la función `get_solution` que nos va a devolver la solución obtenida para nuestra variable `\\(X_{i,j}\\)`\n\n\n```r\nmatching <- result_granada %>%\n  get_solution(x[i, j]) %>%\n  select(i, j, value) %>%\n  filter(value > 0) # nons quedamos con las asignaciones\n\nmatching\n```\n\n```\n##       i  j value\n## 1    16  1     1\n## 2    27  1     1\n## 3    55  1     1\n## 4    68  1     1\n## 5   119  1     1\n## 6   157  1     1\n## 7   173  1     1\n## 8    13  2     1\n## 9    37  2     1\n## 10   96  2     1\n## 11  113  2     1\n## 12  161  2     1\n## 13  169  2     1\n## 14  178  2     1\n## 15  141  3     1\n## 16   34  4     1\n## 17    1  5     1\n## 18    8  5     1\n## 19   23  5     1\n## 20   30  5     1\n## 21   32  5     1\n## 22   71  5     1\n## 23   98  5     1\n## 24  102  5     1\n## 25  108  5     1\n## 26  112  5     1\n## 27  117  5     1\n## 28  120  5     1\n## 29  122  5     1\n## 30  124  5     1\n## 31  130  5     1\n## 32  132  5     1\n## 33  134  5     1\n## 34  137  5     1\n## 35  138  5     1\n## 36  140  5     1\n## 37  149  5     1\n## 38  170  5     1\n## 39  182  5     1\n## 40  191  5     1\n## 41  192  5     1\n## 42  194  5     1\n## 43  198  5     1\n## 44   10  6     1\n## 45   15  6     1\n## 46   20  6     1\n## 47   65  6     1\n## 48   69  6     1\n## 49   82  6     1\n## 50   83  6     1\n## 51   86  6     1\n## 52   87  6     1\n## 53   92  6     1\n## 54   93  6     1\n## 55  116  6     1\n## 56  128  6     1\n## 57  133  6     1\n## 58  135  6     1\n## 59  144  6     1\n## 60  151  6     1\n## 61  153  6     1\n## 62  163  6     1\n## 63  168  6     1\n## 64  174  6     1\n## 65  177  6     1\n## 66  190  6     1\n## 67  199  6     1\n## 68    2  7     1\n## 69    5  7     1\n## 70    6  7     1\n## 71    7  7     1\n## 72   11  7     1\n## 73   12  7     1\n## 74   17  7     1\n## 75   24  7     1\n## 76   26  7     1\n## 77   28  7     1\n## 78   31  7     1\n## 79   44  7     1\n## 80   48  7     1\n## 81   53  7     1\n## 82   56  7     1\n## 83   72  7     1\n## 84   77  7     1\n## 85   91  7     1\n## 86  104  7     1\n## 87  105  7     1\n## 88  131  7     1\n## 89  147  7     1\n## 90  156  7     1\n## 91  166  7     1\n## 92  171  7     1\n## 93  187  7     1\n## 94  193  7     1\n## 95   14  8     1\n## 96   39  8     1\n## 97   40  8     1\n## 98   47  8     1\n## 99   54  8     1\n## 100  59  8     1\n## 101  60  8     1\n## 102  62  8     1\n## 103  70  8     1\n## 104  73  8     1\n## 105  75  8     1\n## 106  78  8     1\n## 107  79  8     1\n## 108  84  8     1\n## 109  85  8     1\n## 110  90  8     1\n## 111  97  8     1\n## 112  99  8     1\n## 113 101  8     1\n## 114 109  8     1\n## 115 110  8     1\n## 116 118  8     1\n## 117 126  8     1\n## 118 167  8     1\n## 119 185  8     1\n## 120 189  8     1\n## 121 195  8     1\n## 122   9  9     1\n## 123  25  9     1\n## 124  29  9     1\n## 125  33  9     1\n## 126  35  9     1\n## 127  46  9     1\n## 128  50  9     1\n## 129  51  9     1\n## 130  57  9     1\n## 131  63  9     1\n## 132  67  9     1\n## 133  74  9     1\n## 134  80  9     1\n## 135  88  9     1\n## 136 103  9     1\n## 137 107  9     1\n## 138 111  9     1\n## 139 114  9     1\n## 140 115  9     1\n## 141 125  9     1\n## 142 136  9     1\n## 143 162  9     1\n## 144 172  9     1\n## 145 175  9     1\n## 146 179  9     1\n## 147 180  9     1\n## 148 196  9     1\n## 149   3 10     1\n## 150   4 10     1\n## 151  22 10     1\n## 152  36 10     1\n## 153  38 10     1\n## 154  45 10     1\n## 155  49 10     1\n## 156  61 10     1\n## 157  64 10     1\n## 158  76 10     1\n## 159  89 10     1\n## 160 106 10     1\n## 161 127 10     1\n## 162 129 10     1\n## 163 139 10     1\n## 164 143 10     1\n## 165 148 10     1\n## 166 152 10     1\n## 167 154 10     1\n## 168 155 10     1\n## 169 159 10     1\n## 170 176 10     1\n## 171 181 10     1\n## 172 183 10     1\n## 173 186 10     1\n## 174  18 11     1\n## 175  19 11     1\n## 176  21 11     1\n## 177  41 11     1\n## 178  42 11     1\n## 179  43 11     1\n## 180  52 11     1\n## 181  58 11     1\n## 182  66 11     1\n## 183  81 11     1\n## 184  94 11     1\n## 185  95 11     1\n## 186 100 11     1\n## 187 121 11     1\n## 188 123 11     1\n## 189 142 11     1\n## 190 145 11     1\n## 191 146 11     1\n## 192 150 11     1\n## 193 158 11     1\n## 194 160 11     1\n## 195 164 11     1\n## 196 165 11     1\n## 197 184 11     1\n## 198 188 11     1\n## 199 197 11     1\n## 200 200 11     1\n```\n\nAhora vemos cuántas asignaciones tiene cada empleado y pintamos los resultados \n\n\n\n```r\nasignaciones <- matching %>%\n  group_by(j) %>%\n  summarise(asignaciones = sum(value)) %>%\n  arrange(desc(asignaciones)) %>%\n  left_join(sedes_granada, by = c(\"j\" = \"id_sede\"))\n\nasignaciones\n```\n\n```\n## # A tibble: 11 × 9\n##        j asignaciones cod_postal tipo  cod_prov  area_m2 centr…¹ centr…² provi…³\n##    <int>        <dbl> <fct>      <chr> <chr>       <dbl>   <dbl>   <dbl> <chr>  \n##  1     5           27 18197      indio 18         1.00e7   -3.61    37.2 GRANADA\n##  2     7           27 18414      indio 18         4.04e7   -3.34    36.9 GRANADA\n##  3     8           27 18197      indio 18         1.00e7   -3.61    37.2 GRANADA\n##  4     9           27 18369      indio 18         1.77e7   -4.01    37.2 GRANADA\n##  5    11           27 18514      indio 18         1.11e8   -3.08    37.2 GRANADA\n##  6    10           25 18611      indio 18         3.35e7   -3.60    36.8 GRANADA\n##  7     6           24 18516      indio 18         1.47e8   -3.24    37.2 GRANADA\n##  8     1            7 18328      jefe  18         5.86e7   -3.87    37.2 GRANADA\n##  9     2            7 18006      jefe  18         3.25e6   -3.61    37.2 GRANADA\n## 10     3            1 18516      jefe  18         1.47e8   -3.24    37.2 GRANADA\n## 11     4            1 18516      jefe  18         1.47e8   -3.24    37.2 GRANADA\n## # … with abbreviated variable names ¹​centroide_longitud, ²​centroide_latitud,\n## #   ³​provincia\n```\n\n\n\n```r\nplot_assignment <- matching %>%\n  inner_join(cod_postales_granada, by = c(\"i\" = \"id\")) %>%\n  inner_join(sedes_granada, by = c(\"j\" = \"id_sede\"), suffix = c(\"_clientes\", \"_comerciales\"))\n\n\n\n\n\np_jefes <- p +\n  geom_segment(\n    data = plot_assignment %>%\n      filter(tipo == \"jefe\"),\n    aes(\n      x = centroide_longitud_comerciales,\n      y = centroide_latitud_comerciales,\n      xend = centroide_longitud_clientes,\n      yend = centroide_latitud_clientes\n    )\n  ) +\n  ggtitle(paste0(\"Asignaciones para los jefes\"))\n\n\np_indios <- p +\n  geom_segment(\n    data = plot_assignment %>%\n      filter(tipo == \"indio\"),\n    aes(\n      x = centroide_longitud_comerciales,\n      y = centroide_latitud_comerciales,\n      xend = centroide_longitud_clientes,\n      yend = centroide_latitud_clientes\n    )\n  ) +\n  ggtitle(paste0(\"Asignaciones para los indios\"))\n\n\np_or <- p +\n  labs(\n    title = \"sin asignar\",\n    subtitle = \"Granada\"\n  )\np_final <- p_or / p_jefes / p_indios\n\np_final\n```\n\n<img src=\"unnamed-chunk-21-1.png\" width=\"384\" />\n\n## IO al servicio del mal eligiendo provincia\n\nCreo función (francamente mejorable y modularizable) para poder elegir provincia o provincias\n\n\n```r\nget_asignaciones_x_provincia <- function(cod_postales = cod_postales, sedes = sedes,\n                                         provincia_sel = \"MADRID\", plot = TRUE, ...) {\n  cod_postales_filt <- cod_postales %>%\n    filter(provincia %in% provincia_sel) %>%\n    mutate(id = row_number())\n\n  sedes_filt <- sedes %>%\n    filter(provincia %in% provincia_sel) %>%\n    arrange(desc(tipo)) %>%\n    mutate(id_sede = row_number())\n\n  m <- nrow(sedes_filt)\n  n <- nrow(cod_postales_filt)\n  n_sedes <- length(unique(sedes_filt$cod_postal))\n\n  njefes <- sedes_filt %>%\n    filter(tipo == \"jefe\") %>%\n    count() %>%\n    pull(n)\n\n  n_indios <- m - njefes\n\n  transportcost <- function(i, j) {\n    cliente <- cod_postales_filt[i, ]\n    comercial <- sedes_filt[j, ]\n    distancia <- geosphere::distHaversine(\n      c(cliente$centroide_longitud, cliente$centroide_latitud),\n      c(comercial$centroide_longitud, comercial$centroide_latitud)\n    )\n\n    if (comercial[, \"tipo\"] == \"jefe\") distancia <- distancia * 1.1\n\n    return(distancia / 1000)\n  }\n\n\n  p <- ggplot(cod_postales_filt, aes(centroide_longitud, centroide_latitud)) +\n    geom_point(size = rel(2), shape = 4) +\n    geom_point(data = sedes_filt, size = rel(3), color = \"darkorange\") +\n    # scale_x_continuous(limits = c(0, grid_size+1)) +\n    # scale_y_continuous(limits = c(0, grid_size+1)) +\n    theme(\n      axis.title = element_blank(),\n      axis.ticks = element_blank(),\n      axis.text = element_blank(), panel.grid = element_blank()\n    )\n\n  mip_model <- MIPModel() %>%\n    # variable indicadora que indica si una tienda i se asigna a comercial j\n    add_variable(x[i, j], i = 1:n, j = 1:m, type = \"binary\") %>%\n    # Minimizar el objetivo de distancia\n    set_objective(sum_over(transportcost(i, j) * x[i, j], i = 1:n, j = 1:m), \"min\") %>%\n    # cada tienda (código postal) solo debe ir a un comerciial. el comercial puede atender varios\n    add_constraint(sum_over(x[i, j], j = 1:m) == 1, i = 1:n) %>%\n    # todo el mundo tiene que atender al minimo a una tienda\n    add_constraint(sum_over(x[i, j], i = 1:n) >= 1, j = 1:m) %>%\n    # %>%\n\n    #   Los jefes curran menos, como máximo 7 tiendas\n    add_constraint(sum_over(x[i, j], i = 1:n) <= 7, j = 1:njefes) %>%\n    #\n    # # Los indios al menos atienden a 3 tiendas\n    add_constraint(sum_over(x[i, j], i = 1:n) >= 3, j = (njefes + 1):m) %>%\n    # para no sobrecargar mucho a los indios, les pongo un máximo que sea 1.5 veces el núemro de tiendas entre total currantes (jefes + indios)\n    add_constraint(sum_over(x[i, j], i = 1:n) <= round(1.5 * n / m), j = (njefes + 1):m) %>%\n    add_constraint(sum_over(x[i, j], i = 1:n) >= sum_over(x[i, k], i = 1:n), j = (njefes + 1):m, k = 1:njefes)\n\n\n  result2 <- solve_model(mip_model, with_ROI(solver = \"glpk\", verbose = TRUE))\n\n\n  matching <- result2 %>%\n    get_solution(x[i, j]) %>%\n    select(i, j, value) %>%\n    filter(value > 0)\n\n\n\n  asignaciones <- matching %>%\n    group_by(j) %>%\n    summarise(asignaciones = sum(value)) %>%\n    arrange(desc(asignaciones)) %>%\n    left_join(sedes_filt, by = c(\"j\" = \"id_sede\"))\n\n\n  plot_assignment <- matching %>%\n    inner_join(cod_postales_filt, by = c(\"i\" = \"id\")) %>%\n    inner_join(sedes_filt, by = c(\"j\" = \"id_sede\"), suffix = c(\"_clientes\", \"_comerciales\"))\n\n\n\n  p_jefes <- p +\n    geom_segment(\n      data = plot_assignment %>%\n        filter(tipo == \"jefe\"),\n      aes(\n        x = centroide_longitud_comerciales,\n        y = centroide_latitud_comerciales,\n        xend = centroide_longitud_clientes,\n        yend = centroide_latitud_clientes\n      )\n    ) +\n    ggtitle(paste0(\"Asignaciones para los jefes\"))\n\n\n  p_indios <- p +\n    geom_segment(\n      data = plot_assignment %>%\n        filter(tipo == \"indio\"),\n      aes(\n        x = centroide_longitud_comerciales,\n        y = centroide_latitud_comerciales,\n        xend = centroide_longitud_clientes,\n        yend = centroide_latitud_clientes\n      )\n    ) +\n    ggtitle(paste0(\"Asignaciones para los indios\"))\n\n  subtitulo <- reduce(provincia_sel, function(x, y) paste(x, y, sep = \"-\"))\n  p_or <- p +\n    labs(\n      title = \"sin asignar\",\n      subtitle = subtitulo\n    )\n  p_final <- p_or / p_jefes / p_indios\n\n  if (plot) print(p_final)\n\n  return(list(\n    comerciales = sedes_filt,\n    cod_postales = cod_postales_filt,\n    matching = matching, tot_asignaciones = asignaciones, plot_final = p_final\n  ))\n}\n```\n\nY veamos algunos ejemplos. \n\n### MADRID\n\n\n```r\nmadrid <- get_asignaciones_x_provincia(cod_postales, sedes, provincia_sel = \"MADRID\")\n```\n\n```\n## <SOLVER MSG>  ----\n## GLPK Simplex Optimizer, v4.65\n## 385 rows, 4425 columns, 45725 non-zeros\n##       0: obj =   0.000000000e+00 inf =   3.400e+02 (320)\n##     498: obj =   1.415569938e+04 inf =   5.690e-14 (0) 1\n## Perturbing LP to avoid stalling [939]...\n## Removing LP perturbation [1341]...\n## *  1341: obj =   5.881701905e+03 inf =   0.000e+00 (0) 4\n## OPTIMAL LP SOLUTION FOUND\n## GLPK Integer Optimizer, v4.65\n## 385 rows, 4425 columns, 45725 non-zeros\n## 4425 integer variables, all of which are binary\n## Integer optimization begins...\n## Long-step dual simplex will be used\n## +  1341: mip =     not found yet >=              -inf        (1; 0)\n## +  1341: >>>>>   5.881701905e+03 >=   5.881701905e+03   0.0% (1; 0)\n## +  1341: mip =   5.881701905e+03 >=     tree is empty   0.0% (0; 1)\n## INTEGER OPTIMAL SOLUTION FOUND\n## <!SOLVER MSG> ----\n```\n\n<img src=\"unnamed-chunk-23-1.png\" width=\"384\" />\n\nPodemos ver cuántos códigos postales le han tocado a cada empleado. \n\nSe ve que se cumplen las restricciones. Seguramente para ser más equitativo habría que tocar algo a mano, para que a los empleados indios de la misma sede se repartan mejor los códigos postales. pero como primera aproximación no está mal\n\n\n```r\nmadrid$tot_asignaciones %>% \n  arrange(cod_postal)\n```\n\n```\n## # A tibble: 15 × 9\n##        j asignaciones cod_postal tipo  cod_prov  area_m2 centr…¹ centr…² provi…³\n##    <int>        <dbl> <fct>      <chr> <chr>       <dbl>   <dbl>   <dbl> <chr>  \n##  1     2            7 28011      jefe  28         3.03e7   -3.75    40.4 MADRID \n##  2     1            7 28015      jefe  28         2.59e6   -3.71    40.4 MADRID \n##  3     5            7 28015      jefe  28         2.59e6   -3.71    40.4 MADRID \n##  4    12           30 28035      indio 28         2.20e7   -3.74    40.5 MADRID \n##  5    14           30 28213      indio 28         8.52e7   -4.19    40.4 MADRID \n##  6     9           30 28521      indio 28         3.53e7   -3.50    40.3 MADRID \n##  7     7           30 28668      indio 28         3.65e6   -3.84    40.4 MADRID \n##  8    13           30 28755      indio 28         1.23e8   -3.60    41.1 MADRID \n##  9     6           25 28755      indio 28         1.23e8   -3.60    41.1 MADRID \n## 10     8           17 28755      indio 28         1.23e8   -3.60    41.1 MADRID \n## 11    11            8 28755      indio 28         1.23e8   -3.60    41.1 MADRID \n## 12     4            7 28817      jefe  28         6.04e7   -3.26    40.5 MADRID \n## 13    15           30 28901      indio 28         1.62e6   -3.73    40.3 MADRID \n## 14    10           30 28931      indio 28         8.78e5   -3.86    40.3 MADRID \n## 15     3            7 28931      jefe  28         8.78e5   -3.86    40.3 MADRID \n## # … with abbreviated variable names ¹​centroide_longitud, ²​centroide_latitud,\n## #   ³​provincia\n```\n\n\nPodemos ver el detalle, por ejemplo qué códigos postales le toca al empleado j=4\n\n\n```r\nmadrid_asignaciones <-  madrid$tot_asignaciones  %>% \n  left_join(madrid$matching, by = \"j\") %>% \n  left_join(madrid$cod_postales, by = c(\"i\" = \"id\"), suffix = c(\"\",\"_tienda\")) \n\nmadrid_asignaciones %>% \n  filter(j==4) %>% \n  select(tipo ,j, i, cod_postal, cod_postal_tienda)\n```\n\n```\n## # A tibble: 7 × 5\n##   tipo      j     i cod_postal cod_postal_tienda\n##   <chr> <int> <int> <fct>      <fct>            \n## 1 jefe      4    61 28817      28810            \n## 2 jefe      4    71 28817      28812            \n## 3 jefe      4    89 28817      28818            \n## 4 jefe      4   121 28817      28515            \n## 5 jefe      4   155 28817      28804            \n## 6 jefe      4   172 28817      28817            \n## 7 jefe      4   219 28817      28811\n```\n\n### Barcelona\n\n```r\nbarcelona <- get_asignaciones_x_provincia(cod_postales, sedes, provincia_sel =\"BARCELONA\")\n```\n\n```\n## <SOLVER MSG>  ----\n## GLPK Simplex Optimizer, v4.65\n## 471 rows, 5715 columns, 59055 non-zeros\n##       0: obj =   0.000000000e+00 inf =   4.260e+02 (406)\n##     600: obj =   1.389502410e+04 inf =   9.258e-13 (0) 1\n## Perturbing LP to avoid stalling [1077]...\n## Removing LP perturbation [1716]...\n## *  1716: obj =   7.841913058e+03 inf =   0.000e+00 (0) 5\n## OPTIMAL LP SOLUTION FOUND\n## GLPK Integer Optimizer, v4.65\n## 471 rows, 5715 columns, 59055 non-zeros\n## 5715 integer variables, all of which are binary\n## Integer optimization begins...\n## Long-step dual simplex will be used\n## +  1716: mip =     not found yet >=              -inf        (1; 0)\n## +  1716: >>>>>   7.841913058e+03 >=   7.841913058e+03   0.0% (1; 0)\n## +  1716: mip =   7.841913058e+03 >=     tree is empty   0.0% (0; 1)\n## INTEGER OPTIMAL SOLUTION FOUND\n## <!SOLVER MSG> ----\n```\n\n<img src=\"unnamed-chunk-26-1.png\" width=\"384\" />\n\n\n### Sevilla\n\n\n```r\nsevilla <- get_asignaciones_x_provincia(cod_postales, sedes, provincia_sel = \"SEVILLA\")\n```\n\n```\n## <SOLVER MSG>  ----\n## GLPK Simplex Optimizer, v4.65\n## 182 rows, 1064 columns, 7448 non-zeros\n##       0: obj =   0.000000000e+00 inf =   1.710e+02 (163)\n##     243: obj =   8.653234667e+03 inf =   5.145e-13 (0)\n## *   572: obj =   3.623165871e+03 inf =   0.000e+00 (0) 1\n## OPTIMAL LP SOLUTION FOUND\n## GLPK Integer Optimizer, v4.65\n## 182 rows, 1064 columns, 7448 non-zeros\n## 1064 integer variables, all of which are binary\n## Integer optimization begins...\n## Long-step dual simplex will be used\n## +   572: mip =     not found yet >=              -inf        (1; 0)\n## +   572: >>>>>   3.623165871e+03 >=   3.623165871e+03   0.0% (1; 0)\n## +   572: mip =   3.623165871e+03 >=     tree is empty   0.0% (0; 1)\n## INTEGER OPTIMAL SOLUTION FOUND\n## <!SOLVER MSG> ----\n```\n\n<img src=\"unnamed-chunk-27-1.png\" width=\"384\" />\n\n\n### Granada y Málaga juntas\n\n\n```r\ngranada_malaga <- get_asignaciones_x_provincia(cod_postales, sedes, provincia_sel = c(\"GRANADA\",\"MALAGA\"))\n```\n\n```\n## <SOLVER MSG>  ----\n## GLPK Simplex Optimizer, v4.65\n## 488 rows, 7160 columns, 80550 non-zeros\n##       0: obj =   0.000000000e+00 inf =   4.230e+02 (393)\n##     515: obj =   2.754380624e+04 inf =   4.807e-13 (0) 1\n## Perturbing LP to avoid stalling [1388]...\n## Removing LP perturbation [1688]...\n## *  1688: obj =   7.728634950e+03 inf =   0.000e+00 (0) 5\n## OPTIMAL LP SOLUTION FOUND\n## GLPK Integer Optimizer, v4.65\n## 488 rows, 7160 columns, 80550 non-zeros\n## 7160 integer variables, all of which are binary\n## Integer optimization begins...\n## Long-step dual simplex will be used\n## +  1688: mip =     not found yet >=              -inf        (1; 0)\n## +  1688: >>>>>   7.728634950e+03 >=   7.728634950e+03   0.0% (1; 0)\n## +  1688: mip =   7.728634950e+03 >=     tree is empty   0.0% (0; 1)\n## INTEGER OPTIMAL SOLUTION FOUND\n## <!SOLVER MSG> ----\n```\n\n<img src=\"unnamed-chunk-28-1.png\" width=\"384\" />\n\n\nY hasta aquí ha llegado el uso de la IO para el mal. Feliz verano !!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}