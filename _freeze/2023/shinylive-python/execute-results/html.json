{
  "hash": "f38f95a642b6054a1cecb26600bd1e6a",
  "result": {
    "markdown": "---\ntitle: Shinylive-python\ndate: '2023-09-29'\ndate-modified: last-modified\ncategories:\n  - python\n  - 2023\nexecute: \n  message: false\n  warning: false\n  echo: true\nformat: \n  html: \n    fig-height: 5\n    fig-dpi: 300\n    fig-width: 8.88\n    fig-align: center\nknitr:\n  opts_chunk:\n    out.width: 80%\n    fig.showtext: TRUE\n    collapse: true\n    comment: \"#>\"\nfilters:\n  - shinylive\n---\n\n\nAyer asistí a una charla de David Durey en el grupo de R-madrid. Era sobre como migraron de Tableau a Shiny y fue una charla excepcional, gracias David.\n\n\nEn shiny está habiendo avances, tales como shiny en python o la extensión `shinylive` para Quarto. Está extensión permite ejecutar código de python y de R (pero está más avanzado en python) en el navegador, gracias a `WebAssembly` que permite correr ese código en el navegador en vez de tener un servidor corriendo\n\nAsí que ni corto ni perezoso, voy a probarlo, copiando un código de ejemplo y poniendo una aplicación shiny dentro de este documento. Si la ves y se ejecuta, que sepas que no hay un servidor detrás y que eres tú en tu navegador quién está ejecutando esta aplicación de shiny para python. \n\n```{shinylive-python}\n#| standalone: true\n#| components: [editor, viewer]\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import App, render, ui\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_slider(\"n\", \"N\", 0, 100, 20),\n        ),\n        ui.panel_main(\n            ui.output_plot(\"histogram\"),\n        ),\n    ),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"A histogram\")\n    def histogram():\n        np.random.seed(19680801)\n        x = 100 + 15 * np.random.randn(437)\n        plt.hist(x, input.n(), density=True)\n\n\napp = App(app_ui, server, debug=True)\n\n```\n\n\nPara R usaría  `webr`y una versión en desarrollo de [shinylive](https://github.com/posit-dev/shinylive) que he sido incapaz de compilar correctamente, y mira que se me dan bien estas cosas. \n\nAsí que quizá toque esperar un poco y ver como avanzan este tipo de proyectos de ejecutar cosas de python y R e incluso shinyapps en el navegador y por tanto en la máquina del usuario sin necesidad de un servidor. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}