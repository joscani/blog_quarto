{
  "hash": "193f1924b00d8710d65606929c4b9b59",
  "result": {
    "markdown": "---\ntitle: Shinylive-r\ndate: '2023-12-16'\ndate-modified: last-modified\ncategories:\n  - r\n  - 2023\n  - shiny\nexecute: \n  message: false\n  warning: false\n  echo: true\nformat: \n  html: \n    fig-height: 12\n    fig-dpi: 300\n    fig-width: 10\n    fig-align: center\nknitr:\n  opts_chunk:\n    out.width: 80%\n    fig.showtext: TRUE\n    collapse: true\n    comment: \"#>\"\nfilters:\n  - shinylive\n  - webr\n---\n\n\n\n\nEstán saliendo cosas como `webr` que permiten ejecutar R en el navegador que junto con [shinylive](https://github.com/posit-dev/shinylive)  nos van a permitir hacer aplicaciones de Shiny (en R y en Python) que sean serverless. Es decir, el código se ejecuta en el navegador del usuario, no en un servidor. \n\nUn post dónde probé con shinylive en python. [__Shinylive en python __](2023/shinylive-python.html)\n\n\n### Cosas que hay que hacer para que funcione en mi documento de quarto, que es con lo que hago el blog\n\n* Instalar la librería de python shinylive `pip install shinylive`\n* Instalar las extensiones de quarto para shinylive `quarto add quarto-ext/shinylive`\n* Instalar la librería de shinylive de [https://github.com/posit-dev/r-shinylive](https://github.com/posit-dev/r-shinylive)\n\n\nEl  chunk se especifica poniendo `shinylive-r` y se ponen algunas opciones como estas\n\n```\n#| standalone: true\n#| viewerHeight: 600\n#| components: [editor, viewer]\n\n```\n\nEstas librerías aún están en fase temprana de desarrollo y por ejemplo no está resuelto como leer un fichero que tengas en local y que ese fichero se suba al sitio web estático y se pueda leer con `read.csv` . Pero podemos hacer una ñapa como he hecho en el ejemplo, que es subir el fichero de datos a github  y leer de la url dónde lo he subido. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nmpgData <- read.csv(\"https://raw.githubusercontent.com/joscani/blog_quarto/master/mtcars.csv\")\n```\n:::\n\n\n\nSe abre el camino pues para tener pequeñas aplicaciones shiny que no necesiten de servidor. \n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(datasets)\n\n# Data pre-processing ----\n# Tweak the \"am\" variable to have nicer factor labels -- since this\n# doesn't rely on any user inputs, we can do this once at startup\n# and then use the value throughout the lifetime of the app\nmpgData <- read.csv(\"https://raw.githubusercontent.com/joscani/blog_quarto/master/mtcars.csv\")\nmpgData$am <- factor(mpgData$am, labels = c(\"Automatic\", \"Manual\"))\n\n\n# Define UI for miles per gallon app ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Miles Per Gallon\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Selector for variable to plot against mpg ----\n      selectInput(\"variable\", \"Elige la variable:\",\n                  c(\"Cylinders\" = \"cyl\",\n                    \"Transmission\" = \"am\",\n                    \"Gears\" = \"gear\")),\n\n      # Input: Checkbox for whether outliers should be included ----\n      checkboxInput(\"outliers\", \"Show outliers\", TRUE)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Formatted text for caption ----\n      h3(textOutput(\"caption\")),\n\n      # Output: Plot of the requested variable against mpg ----\n      plotOutput(\"mpgPlot\")\n\n    )\n  )\n)\n\n# Define server logic to plot various variables against mpg ----\nserver <- function(input, output) {\n\n  # Compute the formula text ----\n  # This is in a reactive expression since it is shared by the\n  # output$caption and output$mpgPlot functions\n  formulaText <- reactive({\n    paste(\"mpg ~\", input$variable)\n  })\n\n  # Return the formula text for printing as a caption ----\n  output$caption <- renderText({\n    formulaText()\n  })\n\n  # Generate a plot of the requested variable against mpg ----\n  # and only exclude outliers if requested\n  output$mpgPlot <- renderPlot({\n    boxplot(as.formula(formulaText()),\n            data = mpgData,\n            outline = input$outliers,\n            col = \"#75AADB\", pch = 19)\n  })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui, server)\n\n\n\n```\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}