---
title: Cachitos 2024. Cuarta parte. The python way
date: '2024-01-09'
categories: 
  - estadística
  - polémica
  - 2024
  - textmining
  - ocr
  - linux
  - python
  - cachitos
description: ''
execute: 
  message: false
  warning: false
  echo: true
format: 
  html: 
    fig-height: 5
    fig-dpi: 300
    fig-width: 8
    fig-align: center
    code-fold: show
    code-summary: "Show the code"
knitr:
  opts_chunk:
    out.width: 80%
    fig.showtext: TRUE
    collapse: true
    comment: "#>"
image: "topic_modeling_pixar.jpeg"
---

Vamos ya con la última entrada del cachitos de este año. Están de moda los LLM's y demás, por el momento no estoy pagando ChatGpt ni ningún otro, quizá lo haga en el futuro para ir probando cosas. Lo que si puedo hacer es utilizar modelos libres. 



### Transformers

Voy a probar a hacer topic modelling usando [`BERTopic`](https://maartengr.github.io/BERTopic/index.html) en python. BERTopic que utiliza cosas como reducción de dimensionalidad con embeddings, `hdbscan` y los conocidos `transformers` 

Para eso, he instalado lo necesario en un entorno de miniconda. El script en python es este 

```{python}
import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"

from bertopic import BERTopic
from bertopic.vectorizers import ClassTfidfTransformer
import pandas as pd
from matplotlib import pyplot as plt
import plotly.express as px
from sklearn.feature_extraction.text import CountVectorizer
from spacy.lang.es.stop_words import STOP_WORDS


pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
```


```{python}
## rotulos 
rotulos = pd.read_csv("/home/jose/proyecto_cachitos/2023_txt_unido.csv")
polemicos = pd.read_csv("/home/jose/proyecto_cachitos/2023_solo_polem.csv")
```



Con BERT se hace embedding de los documentos,luego reducción de la dimensionalidad, clustering utilizando las dimensiones obtenidas y por último un modelo de topic modeling usando LDA con métrica c-tfidf.  
Para este ejemplo concreto todo esto es lo que se suele llamar _sobreingeinería_ pero puede ser útil en análisis de texto mucho más largos y complejos. 

Ajustamos el modelo con BERT, dónde por un lado quitamos stopwords y elegimos un modelo de *embedding multilingüe* . 

```{python}

lista_stop = list(STOP_WORDS) 

vectorizer_model = CountVectorizer(stop_words= lista_stop)

topic_model = BERTopic(verbose=True, 
    vectorizer_model = vectorizer_model, 
    embedding_model='paraphrase-multilingual-MiniLM-L12-v2',
    min_topic_size= 5)

## ajustr modelo con el texto de los rotulos
topicos, _ = topic_model.fit_transform(rotulos.texto)

```

Y no consigo ver este plotly correctamente. Otros plotly desde python si me deja. 

``` {python, eval = FALSE}

import plotly.express as px
fig = topic_model.visualize_barchart(top_n_topics=20)
##fig.show() # el show no me funciona


```

![topic1](plotly_python.png)


Ahora solo con los rótulos polémicos, los cuales identificamos en el post anterior. 


```{python}
## solo polémicos


model_polem =  BERTopic(verbose=True, 
    vectorizer_model = vectorizer_model,
    embedding_model='paraphrase-multilingual-MiniLM-L12-v2',
    min_topic_size= 2)

topicos_polem, _ = model_polem.fit_transform(polemicos.texto)


freq = model_polem.get_topic_info()
print("Number of topics: {}".format( len(freq)))
freq.head()
```


```{python, eval = FALSE}

fig_polem = model_polem.visualize_barchart(top_n_topics=20)
# fig_polem.show() no funciona incrusto el html con el plotly
```

![topci2](plotly_python2.png)

Para ver los rótulos del topic 0 
 
```{python}
df = pd.DataFrame({'topic': topicos_polem, 'document': polemicos.texto})

df.loc[df.topic == 0, 'document']
```


Y vemos que BERtopic es una buena herramienta para este tipo de cosas, y que seguramente en análisis de texto más complejos sea muy útil. 



